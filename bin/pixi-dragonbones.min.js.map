{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","pixi-dragonbones.min.js","src/DragonbonesRuntime/dragonBones.js","src/Dragonbones/display/DisplayBridge.js","src/Dragonbones/display/DisplayObjectContainer.js","src/Dragonbones/display/Sprite.js","src/Dragonbones/factories/Factory.js","src/Dragonbones/index.js","src/Dragonbones/texture/TextureAtlas.js","src/Pixi/display/Skeleton.js","src/Pixi/index.js","src/Pixi/loaders/skeletonParser.js","src/loaders/AtlasParser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","PIXI","dragonbones","./Pixi",2,"dragonBones","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","geom","Point","x","y","toString","Rectangle","width","height","Matrix","c","tx","ty","invert","a1","b1","c1","d1","tx1","ColorTransform","alphaMultiplier","alphaOffset","blueMultiplier","blueOffset","greenMultiplier","greenOffset","redMultiplier","redOffset","events","Event","type","AnimationEvent","_super","FADE_IN","FADE_OUT","START","COMPLETE","LOOP_COMPLETE","FADE_IN_COMPLETE","FADE_OUT_COMPLETE","ArmatureEvent","Z_ORDER_UPDATED","FrameEvent","ANIMATION_FRAME_EVENT","BONE_FRAME_EVENT","SoundEvent","SOUND","EventDispatcher","hasEventListener","_listenersMap","addEventListener","listener","listeners","removeEventListener","push","splice","removeAllEventListeners","dispatchEvent","event","target","listenersCopy","concat","SoundEventManager","_instance","getInstance","animation","WorldClock","timeScale","time","Date","getTime","_animatableList","contains","animatable","indexOf","add","remove","index","clear","advanceTime","passedTime","currentTime","currentIndex","clock","TimelineState","transform","objects","DBTransform","pivot","_durationTransform","_durationPivot","_durationColor","_borrowObject","_pool","pop","_returnObject","timeline","_clear","getEaseValue","value","easing","valueEase","Math","cos","PI","sin","HALF_PI","fadeIn","bone","animationState","_bone","_animationState","_timeline","_originTransform","originTransform","_originPivot","originPivot","_tweenTransform","_tweenColor","_totalTime","totalTime","scaleX","scaleY","skewX","skewY","_currentFrame","getFrameList","_arriveAtFrame","_updateState","fadeOut","utils","TransformUtil","formatRadian","update","progress","scale","offset","loopCount","floor","frameIndex","playedTime","isArrivedFrame","_currentFramePosition","_currentFrameDuration","duration","position","tweenActive","displayIndex","nextFrame","loop","abs","_tweenEasing","NaN","tweenEnabled","isNaN","clip","tweenEasing","color","blend","_updateColor","_isColorChanged","currentTransform","currentPivot","copy","AnimationState","layer","_timelineStates","armature","fadeInTime","displayControl","pauseBeforeFadeInComplete","name","_armature","round","frameRate","Infinity","_pauseBeforeFadeInComplete","_fadeInTime","_fadeState","_fadeOutBeginTime","_fadeOutWeight","_fadeWeight","_fadeIn","_fadeOut","isPlaying","isComplete","weight","enabled","updateTimelineStates","fadeOutTime","pause","_fadeOutTime","play","stop","getMixingTransform","timelineName","_mixingTransforms","Number","addMixingTransform","recursive","getTimeline","currentBone","_boneList","removeMixingTransform","hasMixing","_eventList","currentLoopCount","frameList","removeTimelineState","addTimelineState","getTimelines","getBone","timelineState","Animation","_animationLayer","_isPlaying","animationNameList","getLastAnimationName","_lastAnimationState","getLastAnimationState","getAnimationDataList","_animationDataList","setAnimationDataList","getIsPlaying","getIsComplete","j","animationStateList","dispose","gotoAndPlay","animationName","group","fadeOutMode","pauseFadeOut","pauseFadeIn","SAME_LAYER_AND_GROUP","animationData","durationScale","addLayer","NONE","SAME_LAYER","SAME_GROUP","ALL","addState","slot","childArmature","slotList","_slotList","getChildArmature","getState","hasAnimation","stateListLength","boneName","weigthLeft","pivotX","pivotY","layerTotalWeight","k","removeState","tween","_tweenPivot","getRotation","setRotation","Frame","TransformFrame","tweenRotate","zOrder","visible","global","Timeline","_frameList","addFrame","frame","TransformTimeline","transformed","HIDE_TIMELINE","AnimationData","_timelines","addTimeline","DisplayData","ARMATURE","IMAGE","SlotData","_displayDataList","getDisplayDataList","addDisplayData","displayData","getDisplayData","displayName","BoneData","SkinData","_slotDataList","getSlotDataList","getSlotData","slotName","addSlotData","slotData","ArmatureData","_boneDataList","_skinDataList","getBoneDataList","getSkinDataList","getBoneData","getSkinData","skinName","getAnimationData","addBoneData","boneData","addSkinData","skinData","addAnimationData","sortBoneDataList","helpArray","level","parentData","parent","sort","sortBoneData","object1","object2","SkeletonData","_armatureDataList","_subTexturePivots","getArmatureNames","nameList","armatureDataIndex","getArmatureDataList","getArmatureData","armatureName","addArmatureData","armatureData","removeArmatureData","removeArmatureDataByName","getSubTexturePivot","subTextureName","addSubTexturePivot","point","removeSubTexturePivot","DataParser","parseTextureAtlasData","rawData","textureAtlasData","__name","ConstValues","A_NAME","subTextureList","SUB_TEXTURE","subTextureObject","subTextureData","A_X","A_Y","A_WIDTH","A_HEIGHT","parseSkeletonData","A_FRAME_RATE","data","armatureObjectList","armatureObject","parseArmatureData","boneObjectList","BONE","boneObject","parseBoneData","skinObjectList","SKIN","skinObject","parseSkinData","DBDataUtil","transformArmatureData","animationObjectList","ANIMATION","animationObject","parseAnimationData","A_PARENT","A_LENGTH","parseTransform","TRANSFORM","slotObjectList","SLOT","slotObject","parseSlotData","A_Z_ORDER","displayObjectList","DISPLAY","displayObject","parseDisplayData","A_TYPE","A_LOOP","A_FADE_IN_TIME","A_DURATION","A_SCALE","A_TWEEN_EASING","tweenEase","undefined","parseTimeline","parseMainFrame","timelineObjectList","TIMELINE","timelineObject","parseTransformTimeline","addHideTimeline","transformAnimationData","frameParser","frameObjectList","FRAME","frameObject","parseTransformFrame","A_OFFSET","parseFrame","action","A_ACTION","A_EVENT","sound","A_SOUND","A_HIDE","A_TWEEN_ROTATE","A_DISPLAY_INDEX","colorTransformObject","COLOR_TRANSFORM","A_ALPHA_OFFSET","A_RED_OFFSET","A_GREEN_OFFSET","A_BLUE_OFFSET","A_ALPHA_MULTIPLIER","A_RED_MULTIPLIER","A_GREEN_MULTIPLIER","A_BLUE_MULTIPLIER","transformObject","A_SKEW_X","ANGLE_TO_RADIAN","A_SKEW_Y","A_SCALE_X","A_SCALE_Y","A_PIVOT_X","A_PIVOT_Y","factorys","BaseFactory","_dataDic","_textureAtlasDic","_textureAtlasLoadingDic","getSkeletonData","addSkeletonData","removeSkeletonData","getTextureAtlas","addTextureAtlas","textureAtlas","removeTextureAtlas","disposeData","_currentDataName","_currentTextureAtlasName","buildArmature","skeletonName","textureAtlasName","_generateArmature","boneDataList","Bone","origin","addChild","animationArmatureData","displayDataList","slotDataList","_generateSlot","_originZOrder","_dislayDataList","_generateDisplay","setDisplayList","_changeDisplay","_slotsZOrderChanged","getTextureDisplay","textureName","getRegion","fullName","DRAGON_BONES","TEXTURE_ATLAS","A_VERSION","A_IMAGE_PATH","transformPointWithParent","helpMatrix","_helpMatrix","transformToMatrix","matrix","radian","DOUBLE_PI","parentBoneData","transformArmatureDataAnimations","animationDataList","parentTimeline","prevFrame","frameListLength","slotIndex","_helpTransform1","getTimelineTransform","_helpTransform2","dLX","retult","currentFrame","DBObject","_globalTransformMatrix","_visible","_isDisplayOnStage","_scaleType","fixedRotation","getVisible","setVisible","_setParent","_setArmature","_removeDBObject","_addDBObject","_update","parentMatrix","scaleMode","Slot","displayBrideg","_displayBridge","_displayList","_displayIndex","_tweenZorder","_offsetZOrder","_isHideDisplay","getZOrder","setZOrder","getDisplay","display","Armature","setDisplay","_setDisplay","setChildArmature","getDisplayList","displayIndexBackup","addDisplay","updateChildArmatureAnimation","removeDisplay","changeShowState","_updateVisible","updateTransform","lastAnimationName","_children","child","ancestor","removeChild","getSlots","unshift","isCross","mixingType","displayController","tansformFrame","frameEvent","frameLabel","_soundManager","soundEvent","aOffset","rOffset","gOffset","bOffset","aMultiplier","rMultiplier","gMultiplier","bMultiplier","isColorChanged","updateColor","_display","updateSlotsZOrder","returnCopy","getBones","getSlot","getSlotByDisplay","removeSlot","removeSlotByName","getBoneByDisplay","removeBone","removeBoneByName","object","parentName","boneParent","sortSlot","_sortBoneList","sortBone","slot1","slot2",3,"DisplayBridge","children","rotation","alpha","container","addChildAt","min","RADIAN_TO_ANGLE",4,"DisplayObjectContainer","Object","create","Container",5,"Sprite","texture",6,"DragonbonesRuntime","Factory","image","TextureCache","../../DragonbonesRuntime/dragonBones","../display/DisplayBridge","../display/DisplayObjectContainer","../display/Sprite",7,"factory","textures","TextureAtlas","../DragonbonesRuntime/dragonBones","./display/DisplayBridge","./factories/Factory","./texture/TextureAtlas",8,"textureAtlasRawData","_regions","parseData",9,"Dragonbones","skeletonParser","Skeleton","_factory","makeArmature","dataName","skeleton","skeletons","defineProperties","get","../../Dragonbones","../loaders/skeletonParser",10,"loaders","runtime","./display/Skeleton","./loaders/skeletonParser",11,"resource","next","url","skeletonData","atlasPath","split","atlasLoader","Loader","use","AtlasParser","load","loader","res","bind","Resource","async","../../loaders/AtlasParser",12,"isJson","atlasData","imagePath","substr","lastIndexOf","loadOptions","crossOrigin","loadType","LOAD_TYPE","frames","SubTexture","size","math","Texture","baseTexture","clone"],"mappings":"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","file":"pixi-dragonbones.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = PIXI.dragonbones = require('./Pixi');\r\n",null,"var __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar dragonBones;\r\n(function (dragonBones) {\r\n    (function (geom) {\r\n        var Point = (function () {\r\n            function Point(x, y) {\r\n                if (typeof x === \"undefined\") { x = 0; }\r\n                if (typeof y === \"undefined\") { y = 0; }\r\n                this.x = x;\r\n                this.y = y;\r\n            }\r\n            Point.prototype.toString = function () {\r\n                return \"[Point (x=\" + this.x + \" y=\" + this.y + \")]\";\r\n            };\r\n            return Point;\r\n        })();\r\n        geom.Point = Point;\r\n\r\n        var Rectangle = (function () {\r\n            function Rectangle(x, y, width, height) {\r\n                if (typeof x === \"undefined\") { x = 0; }\r\n                if (typeof y === \"undefined\") { y = 0; }\r\n                if (typeof width === \"undefined\") { width = 0; }\r\n                if (typeof height === \"undefined\") { height = 0; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n            return Rectangle;\r\n        })();\r\n        geom.Rectangle = Rectangle;\r\n\r\n        var Matrix = (function () {\r\n            function Matrix() {\r\n                this.a = 1;\r\n                this.b = 0;\r\n                this.c = 0;\r\n                this.d = 1;\r\n                this.tx = 0;\r\n                this.ty = 0;\r\n            }\r\n            Matrix.prototype.invert = function () {\r\n                var a1 = this.a;\r\n                var b1 = this.b;\r\n                var c1 = this.c;\r\n                var d1 = this.d;\r\n                var tx1 = this.tx;\r\n                var n = a1 * d1 - b1 * c1;\r\n\r\n                this.a = d1 / n;\r\n                this.b = -b1 / n;\r\n                this.c = -c1 / n;\r\n                this.d = a1 / n;\r\n                this.tx = (c1 * this.ty - d1 * tx1) / n;\r\n                this.ty = -(a1 * this.ty - b1 * tx1) / n;\r\n            };\r\n            return Matrix;\r\n        })();\r\n        geom.Matrix = Matrix;\r\n\r\n        var ColorTransform = (function () {\r\n            function ColorTransform() {\r\n                this.alphaMultiplier = 0;\r\n                this.alphaOffset = 0;\r\n                this.blueMultiplier = 0;\r\n                this.blueOffset = 0;\r\n                this.greenMultiplier = 0;\r\n                this.greenOffset = 0;\r\n                this.redMultiplier = 0;\r\n                this.redOffset = 0;\r\n            }\r\n            return ColorTransform;\r\n        })();\r\n        geom.ColorTransform = ColorTransform;\r\n    })(dragonBones.geom || (dragonBones.geom = {}));\r\n    var geom = dragonBones.geom;\r\n\r\n    (function (events) {\r\n        var Event = (function () {\r\n            function Event(type) {\r\n                this.type = type;\r\n            }\r\n            return Event;\r\n        })();\r\n        events.Event = Event;\r\n\r\n        var AnimationEvent = (function (_super) {\r\n            __extends(AnimationEvent, _super);\r\n            function AnimationEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            AnimationEvent.FADE_IN = \"fadeIn\";\r\n            AnimationEvent.FADE_OUT = \"fadeOut\";\r\n            AnimationEvent.START = \"start\";\r\n            AnimationEvent.COMPLETE = \"complete\";\r\n            AnimationEvent.LOOP_COMPLETE = \"loopComplete\";\r\n            AnimationEvent.FADE_IN_COMPLETE = \"fadeInComplete\";\r\n            AnimationEvent.FADE_OUT_COMPLETE = \"fadeOutComplete\";\r\n            return AnimationEvent;\r\n        })(Event);\r\n        events.AnimationEvent = AnimationEvent;\r\n\r\n        var ArmatureEvent = (function (_super) {\r\n            __extends(ArmatureEvent, _super);\r\n            function ArmatureEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            ArmatureEvent.Z_ORDER_UPDATED = \"zOrderUpdated\";\r\n            return ArmatureEvent;\r\n        })(Event);\r\n        events.ArmatureEvent = ArmatureEvent;\r\n\r\n        var FrameEvent = (function (_super) {\r\n            __extends(FrameEvent, _super);\r\n            function FrameEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            FrameEvent.ANIMATION_FRAME_EVENT = \"animationFrameEvent\";\r\n            FrameEvent.BONE_FRAME_EVENT = \"boneFrameEvent\";\r\n            return FrameEvent;\r\n        })(Event);\r\n        events.FrameEvent = FrameEvent;\r\n\r\n        var SoundEvent = (function (_super) {\r\n            __extends(SoundEvent, _super);\r\n            function SoundEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            SoundEvent.SOUND = \"sound\";\r\n            SoundEvent.BONE_FRAME_EVENT = \"boneFrameEvent\";\r\n            return SoundEvent;\r\n        })(Event);\r\n        events.SoundEvent = SoundEvent;\r\n\r\n        var EventDispatcher = (function () {\r\n            function EventDispatcher() {\r\n            }\r\n            EventDispatcher.prototype.hasEventListener = function (type) {\r\n                if (this._listenersMap && this._listenersMap[type]) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            EventDispatcher.prototype.addEventListener = function (type, listener) {\r\n                if (type && listener) {\r\n                    if (!this._listenersMap) {\r\n                        this._listenersMap = {};\r\n                    }\r\n                    var listeners = this._listenersMap[type];\r\n                    if (listeners) {\r\n                        this.removeEventListener(type, listener);\r\n                    }\r\n                    if (listeners) {\r\n                        listeners.push(listener);\r\n                    } else {\r\n                        this._listenersMap[type] = [listener];\r\n                    }\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.removeEventListener = function (type, listener) {\r\n                if (!this._listenersMap || !type || !listener) {\r\n                    return;\r\n                }\r\n                var listeners = this._listenersMap[type];\r\n                if (listeners) {\r\n                    var length = listeners.length;\r\n                    for (var i = 0; i < length; i++) {\r\n                        if (listeners[i] == listener) {\r\n                            if (length == 1) {\r\n                                listeners.length = 0;\r\n                                delete this._listenersMap[type];\r\n                            } else {\r\n                                listeners.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.removeAllEventListeners = function (type) {\r\n                if (type) {\r\n                    delete this._listenersMap[type];\r\n                } else {\r\n                    this._listenersMap = null;\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.dispatchEvent = function (event) {\r\n                if (event) {\r\n                    var listeners = this._listenersMap[event.type];\r\n                    if (listeners) {\r\n                        event.target = this;\r\n                        var listenersCopy = listeners.concat();\r\n                        var length = listeners.length;\r\n                        for (var i = 0; i < length; i++) {\r\n                            listenersCopy[i](event);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            return EventDispatcher;\r\n        })();\r\n        events.EventDispatcher = EventDispatcher;\r\n\r\n        var SoundEventManager = (function (_super) {\r\n            __extends(SoundEventManager, _super);\r\n            function SoundEventManager() {\r\n                _super.call(this);\r\n                if (SoundEventManager._instance) {\r\n                    throw new Error(\"Singleton already constructed!\");\r\n                }\r\n            }\r\n            SoundEventManager.getInstance = function () {\r\n                if (!SoundEventManager._instance) {\r\n                    SoundEventManager._instance = new SoundEventManager();\r\n                }\r\n                return SoundEventManager._instance;\r\n            };\r\n            return SoundEventManager;\r\n        })(EventDispatcher);\r\n        events.SoundEventManager = SoundEventManager;\r\n    })(dragonBones.events || (dragonBones.events = {}));\r\n    var events = dragonBones.events;\r\n\r\n    (function (animation) {\r\n        var WorldClock = (function () {\r\n            function WorldClock() {\r\n                this.timeScale = 1;\r\n                this.time = new Date().getTime() * 0.001;\r\n                this._animatableList = [];\r\n            }\r\n            WorldClock.prototype.contains = function (animatable) {\r\n                return this._animatableList.indexOf(animatable) >= 0;\r\n            };\r\n\r\n            WorldClock.prototype.add = function (animatable) {\r\n                if (animatable && this._animatableList.indexOf(animatable) == -1) {\r\n                    this._animatableList.push(animatable);\r\n                }\r\n            };\r\n\r\n            WorldClock.prototype.remove = function (animatable) {\r\n                var index = this._animatableList.indexOf(animatable);\r\n                if (index >= 0) {\r\n                    this._animatableList[index] = null;\r\n                }\r\n            };\r\n\r\n            WorldClock.prototype.clear = function () {\r\n                this._animatableList.length = 0;\r\n            };\r\n\r\n            WorldClock.prototype.advanceTime = function (passedTime) {\r\n                if (passedTime < 0) {\r\n                    var currentTime = new Date().getTime() * 0.001;\r\n                    passedTime = currentTime - this.time;\r\n                    this.time = currentTime;\r\n                }\r\n\r\n                passedTime *= this.timeScale;\r\n\r\n                var length = this._animatableList.length;\r\n                if (length == 0) {\r\n                    return;\r\n                }\r\n                var currentIndex = 0;\r\n\r\n                for (var i = 0; i < length; i++) {\r\n                    var animatable = this._animatableList[i];\r\n                    if (animatable) {\r\n                        if (currentIndex != i) {\r\n                            this._animatableList[currentIndex] = animatable;\r\n                            this._animatableList[i] = null;\r\n                        }\r\n                        animatable.advanceTime(passedTime);\r\n                        currentIndex++;\r\n                    }\r\n                }\r\n\r\n                if (currentIndex != i) {\r\n                    length = this._animatableList.length;\r\n                    while (i < length) {\r\n                        this._animatableList[currentIndex++] = this._animatableList[i++];\r\n                    }\r\n                    this._animatableList.length = currentIndex;\r\n                }\r\n            };\r\n            WorldClock.clock = new WorldClock();\r\n            return WorldClock;\r\n        })();\r\n        animation.WorldClock = WorldClock;\r\n\r\n        var TimelineState = (function () {\r\n            function TimelineState() {\r\n                this.transform = new objects.DBTransform();\r\n                this.pivot = new geom.Point();\r\n\r\n                this._durationTransform = new objects.DBTransform();\r\n                this._durationPivot = new geom.Point();\r\n                this._durationColor = new geom.ColorTransform();\r\n            }\r\n            TimelineState._borrowObject = function () {\r\n                if (TimelineState._pool.length == 0) {\r\n                    return new TimelineState();\r\n                }\r\n                return TimelineState._pool.pop();\r\n            };\r\n\r\n            TimelineState._returnObject = function (timeline) {\r\n                if (TimelineState._pool.indexOf(timeline) < 0) {\r\n                    TimelineState._pool[TimelineState._pool.length] = timeline;\r\n                }\r\n\r\n                timeline.clear();\r\n            };\r\n\r\n            TimelineState._clear = function () {\r\n                var i = TimelineState._pool.length;\r\n                while (i--) {\r\n                    TimelineState._pool[i].clear();\r\n                }\r\n                TimelineState._pool.length = 0;\r\n            };\r\n\r\n            TimelineState.getEaseValue = function (value, easing) {\r\n                if (easing > 1) {\r\n                    var valueEase = 0.5 * (1 - Math.cos(value * Math.PI)) - value;\r\n                    easing -= 1;\r\n                } else if (easing > 0) {\r\n                    valueEase = Math.sin(value * TimelineState.HALF_PI) - value;\r\n                } else if (easing < 0) {\r\n                    valueEase = 1 - Math.cos(value * TimelineState.HALF_PI) - value;\r\n                    easing *= -1;\r\n                }\r\n                return valueEase * easing + value;\r\n            };\r\n\r\n            TimelineState.prototype.fadeIn = function (bone, animationState, timeline) {\r\n                this._bone = bone;\r\n                this._animationState = animationState;\r\n                this._timeline = timeline;\r\n\r\n                this._originTransform = this._timeline.originTransform;\r\n                this._originPivot = this._timeline.originPivot;\r\n\r\n                this._tweenTransform = false;\r\n                this._tweenColor = false;\r\n\r\n                this._totalTime = this._animationState.totalTime;\r\n\r\n                this.transform.x = 0;\r\n                this.transform.y = 0;\r\n                this.transform.scaleX = 0;\r\n                this.transform.scaleY = 0;\r\n                this.transform.skewX = 0;\r\n                this.transform.skewY = 0;\r\n                this.pivot.x = 0;\r\n                this.pivot.y = 0;\r\n\r\n                this._durationTransform.x = 0;\r\n                this._durationTransform.y = 0;\r\n                this._durationTransform.scaleX = 0;\r\n                this._durationTransform.scaleY = 0;\r\n                this._durationTransform.skewX = 0;\r\n                this._durationTransform.skewY = 0;\r\n                this._durationPivot.x = 0;\r\n                this._durationPivot.y = 0;\r\n\r\n                this._currentFrame = null;\r\n\r\n                switch (this._timeline.getFrameList().length) {\r\n                    case 0:\r\n                        this._bone._arriveAtFrame(null, this, this._animationState, false);\r\n                        this._updateState = 0;\r\n                        break;\r\n                    case 1:\r\n                        this._updateState = -1;\r\n                        break;\r\n                    default:\r\n                        this._updateState = 1;\r\n                        break;\r\n                }\r\n            };\r\n\r\n            TimelineState.prototype.fadeOut = function () {\r\n                this.transform.skewX = utils.TransformUtil.formatRadian(this.transform.skewX);\r\n                this.transform.skewY = utils.TransformUtil.formatRadian(this.transform.skewY);\r\n            };\r\n\r\n            TimelineState.prototype.update = function (progress) {\r\n                if (this._updateState) {\r\n                    if (this._updateState > 0) {\r\n                        if (this._timeline.scale == 0) {\r\n                            progress = 1;\r\n                        } else {\r\n                            progress /= this._timeline.scale;\r\n                        }\r\n\r\n                        if (progress == 1) {\r\n                            progress = 0.99999999;\r\n                        }\r\n\r\n                        progress += this._timeline.offset;\r\n                        var loopCount = Math.floor(progress);\r\n                        progress -= loopCount;\r\n\r\n                        var playedTime = this._totalTime * progress;\r\n                        var isArrivedFrame = false;\r\n                        var frameIndex;\r\n                        while (!this._currentFrame || playedTime > this._currentFramePosition + this._currentFrameDuration || playedTime < this._currentFramePosition) {\r\n                            if (isArrivedFrame) {\r\n                                this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, true);\r\n                            }\r\n                            isArrivedFrame = true;\r\n                            if (this._currentFrame) {\r\n                                frameIndex = this._timeline.getFrameList().indexOf(this._currentFrame) + 1;\r\n                                if (frameIndex >= this._timeline.getFrameList().length) {\r\n                                    frameIndex = 0;\r\n                                }\r\n                                this._currentFrame = this._timeline.getFrameList()[frameIndex];\r\n                            } else {\r\n                                frameIndex = 0;\r\n                                this._currentFrame = this._timeline.getFrameList()[0];\r\n                            }\r\n                            this._currentFrameDuration = this._currentFrame.duration;\r\n                            this._currentFramePosition = this._currentFrame.position;\r\n                        }\r\n\r\n                        if (isArrivedFrame) {\r\n                            this.tweenActive = this._currentFrame.displayIndex >= 0;\r\n                            frameIndex++;\r\n                            if (frameIndex >= this._timeline.getFrameList().length) {\r\n                                frameIndex = 0;\r\n                            }\r\n                            var nextFrame = this._timeline.getFrameList()[frameIndex];\r\n\r\n                            if (frameIndex == 0 && this._animationState.loop && this._animationState.loopCount >= Math.abs(this._animationState.loop) - 1 && ((this._currentFramePosition + this._currentFrameDuration) / this._totalTime + loopCount - this._timeline.offset) * this._timeline.scale > 0.99999999) {\r\n                                this._updateState = 0;\r\n                                this._tweenEasing = NaN;\r\n                            } else if (this._currentFrame.displayIndex < 0 || nextFrame.displayIndex < 0 || !this._animationState.tweenEnabled) {\r\n                                this._tweenEasing = NaN;\r\n                            } else if (isNaN(this._animationState.clip.tweenEasing)) {\r\n                                this._tweenEasing = this._currentFrame.tweenEasing;\r\n                            } else {\r\n                                this._tweenEasing = this._animationState.clip.tweenEasing;\r\n                            }\r\n\r\n                            if (isNaN(this._tweenEasing)) {\r\n                                this._tweenTransform = false;\r\n                                this._tweenColor = false;\r\n                            } else {\r\n                                this._durationTransform.x = nextFrame.transform.x - this._currentFrame.transform.x;\r\n                                this._durationTransform.y = nextFrame.transform.y - this._currentFrame.transform.y;\r\n                                this._durationTransform.skewX = nextFrame.transform.skewX - this._currentFrame.transform.skewX;\r\n                                this._durationTransform.skewY = nextFrame.transform.skewY - this._currentFrame.transform.skewY;\r\n                                this._durationTransform.scaleX = nextFrame.transform.scaleX - this._currentFrame.transform.scaleX;\r\n                                this._durationTransform.scaleY = nextFrame.transform.scaleY - this._currentFrame.transform.scaleY;\r\n\r\n                                if (frameIndex == 0) {\r\n                                    this._durationTransform.skewX = utils.TransformUtil.formatRadian(this._durationTransform.skewX);\r\n                                    this._durationTransform.skewY = utils.TransformUtil.formatRadian(this._durationTransform.skewY);\r\n                                }\r\n\r\n                                this._durationPivot.x = nextFrame.pivot.x - this._currentFrame.pivot.x;\r\n                                this._durationPivot.y = nextFrame.pivot.y - this._currentFrame.pivot.y;\r\n\r\n                                if (this._durationTransform.x != 0 || this._durationTransform.y != 0 || this._durationTransform.skewX != 0 || this._durationTransform.skewY != 0 || this._durationTransform.scaleX != 0 || this._durationTransform.scaleY != 0 || this._durationPivot.x != 0 || this._durationPivot.y != 0) {\r\n                                    this._tweenTransform = true;\r\n                                } else {\r\n                                    this._tweenTransform = false;\r\n                                }\r\n\r\n                                if (this._currentFrame.color && nextFrame.color) {\r\n                                    this._durationColor.alphaOffset = nextFrame.color.alphaOffset - this._currentFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = nextFrame.color.redOffset - this._currentFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = nextFrame.color.greenOffset - this._currentFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = nextFrame.color.blueOffset - this._currentFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = nextFrame.color.alphaMultiplier - this._currentFrame.color.alphaMultiplier;\r\n                                    this._durationColor.redMultiplier = nextFrame.color.redMultiplier - this._currentFrame.color.redMultiplier;\r\n                                    this._durationColor.greenMultiplier = nextFrame.color.greenMultiplier - this._currentFrame.color.greenMultiplier;\r\n                                    this._durationColor.blueMultiplier = nextFrame.color.blueMultiplier - this._currentFrame.color.blueMultiplier;\r\n\r\n                                    if (this._durationColor.alphaOffset != 0 || this._durationColor.redOffset != 0 || this._durationColor.greenOffset != 0 || this._durationColor.blueOffset != 0 || this._durationColor.alphaMultiplier != 0 || this._durationColor.redMultiplier != 0 || this._durationColor.greenMultiplier != 0 || this._durationColor.blueMultiplier != 0) {\r\n                                        this._tweenColor = true;\r\n                                    } else {\r\n                                        this._tweenColor = false;\r\n                                    }\r\n                                } else if (this._currentFrame.color) {\r\n                                    this._tweenColor = true;\r\n                                    this._durationColor.alphaOffset = -this._currentFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = -this._currentFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = -this._currentFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = -this._currentFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = 1 - this._currentFrame.color.alphaMultiplier;\r\n                                    this._durationColor.redMultiplier = 1 - this._currentFrame.color.redMultiplier;\r\n                                    this._durationColor.greenMultiplier = 1 - this._currentFrame.color.greenMultiplier;\r\n                                    this._durationColor.blueMultiplier = 1 - this._currentFrame.color.blueMultiplier;\r\n                                } else if (nextFrame.color) {\r\n                                    this._tweenColor = true;\r\n                                    this._durationColor.alphaOffset = nextFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = nextFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = nextFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = nextFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = nextFrame.color.alphaMultiplier - 1;\r\n                                    this._durationColor.redMultiplier = nextFrame.color.redMultiplier - 1;\r\n                                    this._durationColor.greenMultiplier = nextFrame.color.greenMultiplier - 1;\r\n                                    this._durationColor.blueMultiplier = nextFrame.color.blueMultiplier - 1;\r\n                                } else {\r\n                                    this._tweenColor = false;\r\n                                }\r\n                            }\r\n\r\n                            if (!this._tweenTransform) {\r\n                                if (this._animationState.blend) {\r\n                                    this.transform.x = this._originTransform.x + this._currentFrame.transform.x;\r\n                                    this.transform.y = this._originTransform.y + this._currentFrame.transform.y;\r\n                                    this.transform.skewX = this._originTransform.skewX + this._currentFrame.transform.skewX;\r\n                                    this.transform.skewY = this._originTransform.skewY + this._currentFrame.transform.skewY;\r\n                                    this.transform.scaleX = this._originTransform.scaleX + this._currentFrame.transform.scaleX;\r\n                                    this.transform.scaleY = this._originTransform.scaleY + this._currentFrame.transform.scaleY;\r\n\r\n                                    this.pivot.x = this._originPivot.x + this._currentFrame.pivot.x;\r\n                                    this.pivot.y = this._originPivot.y + this._currentFrame.pivot.y;\r\n                                } else {\r\n                                    this.transform.x = this._currentFrame.transform.x;\r\n                                    this.transform.y = this._currentFrame.transform.y;\r\n                                    this.transform.skewX = this._currentFrame.transform.skewX;\r\n                                    this.transform.skewY = this._currentFrame.transform.skewY;\r\n                                    this.transform.scaleX = this._currentFrame.transform.scaleX;\r\n                                    this.transform.scaleY = this._currentFrame.transform.scaleY;\r\n\r\n                                    this.pivot.x = this._currentFrame.pivot.x;\r\n                                    this.pivot.y = this._currentFrame.pivot.y;\r\n                                }\r\n                            }\r\n\r\n                            if (!this._tweenColor) {\r\n                                if (this._currentFrame.color) {\r\n                                    this._bone._updateColor(this._currentFrame.color.alphaOffset, this._currentFrame.color.redOffset, this._currentFrame.color.greenOffset, this._currentFrame.color.blueOffset, this._currentFrame.color.alphaMultiplier, this._currentFrame.color.redMultiplier, this._currentFrame.color.greenMultiplier, this._currentFrame.color.blueMultiplier, true);\r\n                                } else if (this._bone._isColorChanged) {\r\n                                    this._bone._updateColor(0, 0, 0, 0, 1, 1, 1, 1, false);\r\n                                }\r\n                            }\r\n                            this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, false);\r\n                        }\r\n\r\n                        if (this._tweenTransform || this._tweenColor) {\r\n                            progress = (playedTime - this._currentFramePosition) / this._currentFrameDuration;\r\n                            if (this._tweenEasing) {\r\n                                progress = TimelineState.getEaseValue(progress, this._tweenEasing);\r\n                            }\r\n                        }\r\n\r\n                        if (this._tweenTransform) {\r\n                            var currentTransform = this._currentFrame.transform;\r\n                            var currentPivot = this._currentFrame.pivot;\r\n                            if (this._animationState.blend) {\r\n                                this.transform.x = this._originTransform.x + currentTransform.x + this._durationTransform.x * progress;\r\n                                this.transform.y = this._originTransform.y + currentTransform.y + this._durationTransform.y * progress;\r\n                                this.transform.skewX = this._originTransform.skewX + currentTransform.skewX + this._durationTransform.skewX * progress;\r\n                                this.transform.skewY = this._originTransform.skewY + currentTransform.skewY + this._durationTransform.skewY * progress;\r\n                                this.transform.scaleX = this._originTransform.scaleX + currentTransform.scaleX + this._durationTransform.scaleX * progress;\r\n                                this.transform.scaleY = this._originTransform.scaleY + currentTransform.scaleY + this._durationTransform.scaleY * progress;\r\n\r\n                                this.pivot.x = this._originPivot.x + currentPivot.x + this._durationPivot.x * progress;\r\n                                this.pivot.y = this._originPivot.y + currentPivot.y + this._durationPivot.y * progress;\r\n                            } else {\r\n                                this.transform.x = currentTransform.x + this._durationTransform.x * progress;\r\n                                this.transform.y = currentTransform.y + this._durationTransform.y * progress;\r\n                                this.transform.skewX = currentTransform.skewX + this._durationTransform.skewX * progress;\r\n                                this.transform.skewY = currentTransform.skewY + this._durationTransform.skewY * progress;\r\n                                this.transform.scaleX = currentTransform.scaleX + this._durationTransform.scaleX * progress;\r\n                                this.transform.scaleY = currentTransform.scaleY + this._durationTransform.scaleY * progress;\r\n\r\n                                this.pivot.x = currentPivot.x + this._durationPivot.x * progress;\r\n                                this.pivot.y = currentPivot.y + this._durationPivot.y * progress;\r\n                            }\r\n                        }\r\n\r\n                        if (this._tweenColor) {\r\n                            if (this._currentFrame.color) {\r\n                                this._bone._updateColor(this._currentFrame.color.alphaOffset + this._durationColor.alphaOffset * progress, this._currentFrame.color.redOffset + this._durationColor.redOffset * progress, this._currentFrame.color.greenOffset + this._durationColor.greenOffset * progress, this._currentFrame.color.blueOffset + this._durationColor.blueOffset * progress, this._currentFrame.color.alphaMultiplier + this._durationColor.alphaMultiplier * progress, this._currentFrame.color.redMultiplier + this._durationColor.redMultiplier * progress, this._currentFrame.color.greenMultiplier + this._durationColor.greenMultiplier * progress, this._currentFrame.color.blueMultiplier + this._durationColor.blueMultiplier * progress, true);\r\n                            } else {\r\n                                this._bone._updateColor(this._durationColor.alphaOffset * progress, this._durationColor.redOffset * progress, this._durationColor.greenOffset * progress, this._durationColor.blueOffset * progress, 1 + this._durationColor.alphaMultiplier * progress, 1 + this._durationColor.redMultiplier * progress, 1 + this._durationColor.greenMultiplier * progress, 1 + this._durationColor.blueMultiplier * progress, true);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this._updateState = 0;\r\n                        if (this._animationState.blend) {\r\n                            this.transform.copy(this._originTransform);\r\n\r\n                            this.pivot.x = this._originPivot.x;\r\n                            this.pivot.y = this._originPivot.y;\r\n                        } else {\r\n                            this.transform.x = this.transform.y = this.transform.skewX = this.transform.skewY = this.transform.scaleX = this.transform.scaleY = 0;\r\n\r\n                            this.pivot.x = 0;\r\n                            this.pivot.y = 0;\r\n                        }\r\n\r\n                        this._currentFrame = this._timeline.getFrameList()[0];\r\n\r\n                        this.tweenActive = this._currentFrame.displayIndex >= 0;\r\n\r\n                        if (this._currentFrame.color) {\r\n                            this._bone._updateColor(this._currentFrame.color.alphaOffset, this._currentFrame.color.redOffset, this._currentFrame.color.greenOffset, this._currentFrame.color.blueOffset, this._currentFrame.color.alphaMultiplier, this._currentFrame.color.redMultiplier, this._currentFrame.color.greenMultiplier, this._currentFrame.color.blueMultiplier, true);\r\n                        } else {\r\n                            this._bone._updateColor(0, 0, 0, 0, 1, 1, 1, 1, false);\r\n                        }\r\n\r\n                        this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, false);\r\n                    }\r\n                }\r\n            };\r\n\r\n            TimelineState.prototype.clear = function () {\r\n                this._updateState = 0;\r\n                this._bone = null;\r\n                this._animationState = null;\r\n                this._timeline = null;\r\n                this._currentFrame = null;\r\n                this._originTransform = null;\r\n                this._originPivot = null;\r\n            };\r\n            TimelineState.HALF_PI = Math.PI * 0.5;\r\n\r\n            TimelineState._pool = [];\r\n            return TimelineState;\r\n        })();\r\n        animation.TimelineState = TimelineState;\r\n\r\n        var AnimationState = (function () {\r\n            function AnimationState() {\r\n                this.loop = 0;\r\n                this.layer = 0;\r\n                this._timelineStates = {};\r\n            }\r\n            AnimationState._borrowObject = function () {\r\n                if (AnimationState._pool.length == 0) {\r\n                    return new AnimationState();\r\n                }\r\n                return AnimationState._pool.pop();\r\n            };\r\n\r\n            AnimationState._returnObject = function (animationState) {\r\n                if (AnimationState._pool.indexOf(animationState) < 0) {\r\n                    AnimationState._pool[AnimationState._pool.length] = animationState;\r\n                }\r\n\r\n                animationState.clear();\r\n            };\r\n\r\n            AnimationState._clear = function () {\r\n                var i = AnimationState._pool.length;\r\n                while (i--) {\r\n                    AnimationState._pool[i].clear();\r\n                }\r\n                AnimationState._pool.length = 0;\r\n            };\r\n\r\n            AnimationState.prototype.fadeIn = function (armature, clip, fadeInTime, timeScale, loop, layer, displayControl, pauseBeforeFadeInComplete) {\r\n                this.layer = layer;\r\n                this.clip = clip;\r\n                this.name = this.clip.name;\r\n                this.totalTime = this.clip.duration;\r\n\r\n                this._armature = armature;\r\n\r\n                if (Math.round(this.clip.duration * this.clip.frameRate) < 2 || timeScale == Infinity) {\r\n                    this.timeScale = 1;\r\n                    this.currentTime = this.totalTime;\r\n                    if (this.loop >= 0) {\r\n                        this.loop = 1;\r\n                    } else {\r\n                        this.loop = -1;\r\n                    }\r\n                } else {\r\n                    this.timeScale = timeScale;\r\n                    this.currentTime = 0;\r\n                    this.loop = loop;\r\n                }\r\n\r\n                this._pauseBeforeFadeInComplete = pauseBeforeFadeInComplete;\r\n\r\n                this._fadeInTime = fadeInTime * this.timeScale;\r\n                this._fadeState = 1;\r\n                this._fadeOutBeginTime = 0;\r\n                this._fadeOutWeight = -1;\r\n                this._fadeWeight = 0;\r\n                this._fadeIn = true;\r\n                this._fadeOut = false;\r\n\r\n                this.loopCount = -1;\r\n                this.displayControl = displayControl;\r\n                this.isPlaying = true;\r\n                this.isComplete = false;\r\n\r\n                this.weight = 1;\r\n                this.blend = true;\r\n                this.enabled = true;\r\n                this.tweenEnabled = true;\r\n\r\n                this.updateTimelineStates();\r\n            };\r\n\r\n            AnimationState.prototype.fadeOut = function (fadeOutTime, pause) {\r\n                if (typeof pause === \"undefined\") { pause = false; }\r\n                if (!this._armature || this._fadeOutWeight >= 0) {\r\n                    return;\r\n                }\r\n                this._fadeState = -1;\r\n                this._fadeOutWeight = this._fadeWeight;\r\n                this._fadeOutTime = fadeOutTime * this.timeScale;\r\n                this._fadeOutBeginTime = this.currentTime;\r\n                this._fadeOut = true;\r\n\r\n                this.isPlaying = !pause;\r\n                this.displayControl = false;\r\n\r\n                for (var index in this._timelineStates) {\r\n                    (this._timelineStates[index]).fadeOut();\r\n                }\r\n\r\n                this.enabled = true;\r\n            };\r\n\r\n            AnimationState.prototype.play = function () {\r\n                this.isPlaying = true;\r\n            };\r\n\r\n            AnimationState.prototype.stop = function () {\r\n                this.isPlaying = false;\r\n            };\r\n\r\n            AnimationState.prototype.getMixingTransform = function (timelineName) {\r\n                if (this._mixingTransforms) {\r\n                    return Number(this._mixingTransforms[timelineName]);\r\n                }\r\n                return -1;\r\n            };\r\n\r\n            AnimationState.prototype.addMixingTransform = function (timelineName, type, recursive) {\r\n                if (typeof type === \"undefined\") { type = 2; }\r\n                if (typeof recursive === \"undefined\") { recursive = true; }\r\n                if (this.clip && this.clip.getTimeline(timelineName)) {\r\n                    if (!this._mixingTransforms) {\r\n                        this._mixingTransforms = {};\r\n                    }\r\n                    if (recursive) {\r\n                        var i = this._armature._boneList.length;\r\n                        var bone;\r\n                        var currentBone;\r\n                        while (i--) {\r\n                            bone = this._armature._boneList[i];\r\n                            if (bone.name == timelineName) {\r\n                                currentBone = bone;\r\n                            }\r\n                            if (currentBone && (currentBone == bone || currentBone.contains(bone))) {\r\n                                this._mixingTransforms[bone.name] = type;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this._mixingTransforms[timelineName] = type;\r\n                    }\r\n\r\n                    this.updateTimelineStates();\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.removeMixingTransform = function (timelineName, recursive) {\r\n                if (typeof timelineName === \"undefined\") { timelineName = null; }\r\n                if (typeof recursive === \"undefined\") { recursive = true; }\r\n                if (timelineName) {\r\n                    if (recursive) {\r\n                        var i = this._armature._boneList.length;\r\n                        var bone;\r\n                        var currentBone;\r\n                        while (i--) {\r\n                            bone = this._armature._boneList[i];\r\n                            if (bone.name == timelineName) {\r\n                                currentBone = bone;\r\n                            }\r\n                            if (currentBone && (currentBone == bone || currentBone.contains(bone))) {\r\n                                delete this._mixingTransforms[bone.name];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        delete this._mixingTransforms[timelineName];\r\n                    }\r\n\r\n                    for (var index in this._mixingTransforms) {\r\n                        var hasMixing = true;\r\n                        break;\r\n                    }\r\n                    if (!hasMixing) {\r\n                        this._mixingTransforms = null;\r\n                    }\r\n                } else {\r\n                    this._mixingTransforms = null;\r\n                }\r\n\r\n                this.updateTimelineStates();\r\n            };\r\n\r\n            AnimationState.prototype.advanceTime = function (passedTime) {\r\n                if (!this.enabled) {\r\n                    return false;\r\n                }\r\n                var event;\r\n                var isComplete;\r\n\r\n                if (this._fadeIn) {\r\n                    this._fadeIn = false;\r\n                    if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN)) {\r\n                        event = new events.AnimationEvent(events.AnimationEvent.FADE_IN);\r\n                        event.animationState = this;\r\n                        this._armature._eventList.push(event);\r\n                    }\r\n                }\r\n\r\n                if (this._fadeOut) {\r\n                    this._fadeOut = false;\r\n                    if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT)) {\r\n                        event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT);\r\n                        event.animationState = this;\r\n                        this._armature._eventList.push(event);\r\n                    }\r\n                }\r\n\r\n                this.currentTime += passedTime * this.timeScale;\r\n\r\n                if (this.isPlaying && !this.isComplete) {\r\n                    var progress;\r\n                    var currentLoopCount;\r\n                    if (this._pauseBeforeFadeInComplete) {\r\n                        this._pauseBeforeFadeInComplete = false;\r\n                        this.isPlaying = false;\r\n                        progress = 0;\r\n                        currentLoopCount = Math.floor(progress);\r\n                    } else {\r\n                        progress = this.currentTime / this.totalTime;\r\n\r\n                        currentLoopCount = Math.floor(progress);\r\n                        if (currentLoopCount != this.loopCount) {\r\n                            if (this.loopCount == -1) {\r\n                                if (this._armature.hasEventListener(events.AnimationEvent.START)) {\r\n                                    event = new events.AnimationEvent(events.AnimationEvent.START);\r\n                                    event.animationState = this;\r\n                                    this._armature._eventList.push(event);\r\n                                }\r\n                            }\r\n                            this.loopCount = currentLoopCount;\r\n                            if (this.loopCount) {\r\n                                if (this.loop && this.loopCount * this.loopCount >= this.loop * this.loop - 1) {\r\n                                    isComplete = true;\r\n                                    progress = 1;\r\n                                    currentLoopCount = 0;\r\n                                    if (this._armature.hasEventListener(events.AnimationEvent.COMPLETE)) {\r\n                                        event = new events.AnimationEvent(events.AnimationEvent.COMPLETE);\r\n                                        event.animationState = this;\r\n                                        this._armature._eventList.push(event);\r\n                                    }\r\n                                } else {\r\n                                    if (this._armature.hasEventListener(events.AnimationEvent.LOOP_COMPLETE)) {\r\n                                        event = new events.AnimationEvent(events.AnimationEvent.LOOP_COMPLETE);\r\n                                        event.animationState = this;\r\n                                        this._armature._eventList.push(event);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (var index in this._timelineStates) {\r\n                        (this._timelineStates[index]).update(progress);\r\n                    }\r\n                    var frameList = this.clip.getFrameList();\r\n                    if (frameList.length > 0) {\r\n                        var playedTime = this.totalTime * (progress - currentLoopCount);\r\n                        var isArrivedFrame = false;\r\n                        var frameIndex;\r\n                        while (!this._currentFrame || playedTime > this._currentFrame.position + this._currentFrame.duration || playedTime < this._currentFrame.position) {\r\n                            if (isArrivedFrame) {\r\n                                this._armature._arriveAtFrame(this._currentFrame, null, this, true);\r\n                            }\r\n                            isArrivedFrame = true;\r\n                            if (this._currentFrame) {\r\n                                frameIndex = frameList.indexOf(this._currentFrame);\r\n                                frameIndex++;\r\n                                if (frameIndex >= frameList.length) {\r\n                                    frameIndex = 0;\r\n                                }\r\n                                this._currentFrame = frameList[frameIndex];\r\n                            } else {\r\n                                this._currentFrame = frameList[0];\r\n                            }\r\n                        }\r\n\r\n                        if (isArrivedFrame) {\r\n                            this._armature._arriveAtFrame(this._currentFrame, null, this, false);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this._fadeState > 0) {\r\n                    if (this._fadeInTime == 0) {\r\n                        this._fadeWeight = 1;\r\n                        this._fadeState = 0;\r\n                        this.isPlaying = true;\r\n                        if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN_COMPLETE)) {\r\n                            event = new events.AnimationEvent(events.AnimationEvent.FADE_IN_COMPLETE);\r\n                            event.animationState = this;\r\n                            this._armature._eventList.push(event);\r\n                        }\r\n                    } else {\r\n                        this._fadeWeight = this.currentTime / this._fadeInTime;\r\n                        if (this._fadeWeight >= 1) {\r\n                            this._fadeWeight = 1;\r\n                            this._fadeState = 0;\r\n                            if (!this.isPlaying) {\r\n                                this.currentTime -= this._fadeInTime;\r\n                            }\r\n                            this.isPlaying = true;\r\n                            if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN_COMPLETE)) {\r\n                                event = new events.AnimationEvent(events.AnimationEvent.FADE_IN_COMPLETE);\r\n                                event.animationState = this;\r\n                                this._armature._eventList.push(event);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (this._fadeState < 0) {\r\n                    if (this._fadeOutTime == 0) {\r\n                        this._fadeWeight = 0;\r\n                        this._fadeState = 0;\r\n                        if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT_COMPLETE)) {\r\n                            event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT_COMPLETE);\r\n                            event.animationState = this;\r\n                            this._armature._eventList.push(event);\r\n                        }\r\n                        return true;\r\n                    } else {\r\n                        this._fadeWeight = (1 - (this.currentTime - this._fadeOutBeginTime) / this._fadeOutTime) * this._fadeOutWeight;\r\n                        if (this._fadeWeight <= 0) {\r\n                            this._fadeWeight = 0;\r\n                            this._fadeState = 0;\r\n                            if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT_COMPLETE)) {\r\n                                event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT_COMPLETE);\r\n                                event.animationState = this;\r\n                                this._armature._eventList.push(event);\r\n                            }\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isComplete) {\r\n                    this.isComplete = true;\r\n                    if (this.loop < 0) {\r\n                        this.fadeOut((this._fadeOutWeight || this._fadeInTime) / this.timeScale, true);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            AnimationState.prototype.updateTimelineStates = function () {\r\n                if (this._mixingTransforms) {\r\n                    for (var timelineName in this._timelineStates) {\r\n                        if (this._mixingTransforms[timelineName] == null) {\r\n                            this.removeTimelineState(timelineName);\r\n                        }\r\n                    }\r\n\r\n                    for (timelineName in this._mixingTransforms) {\r\n                        if (!this._timelineStates[timelineName]) {\r\n                            this.addTimelineState(timelineName);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (timelineName in this.clip.getTimelines()) {\r\n                        if (!this._timelineStates[timelineName]) {\r\n                            this.addTimelineState(timelineName);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.addTimelineState = function (timelineName) {\r\n                var bone = this._armature.getBone(timelineName);\r\n                if (bone) {\r\n                    var timelineState = TimelineState._borrowObject();\r\n                    var timeline = this.clip.getTimeline(timelineName);\r\n                    timelineState.fadeIn(bone, this, timeline);\r\n                    this._timelineStates[timelineName] = timelineState;\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.removeTimelineState = function (timelineName) {\r\n                TimelineState._returnObject(this._timelineStates[timelineName]);\r\n                delete this._timelineStates[timelineName];\r\n            };\r\n\r\n            AnimationState.prototype.clear = function () {\r\n                this.clip = null;\r\n                this.enabled = false;\r\n\r\n                this._armature = null;\r\n                this._currentFrame = null;\r\n                this._mixingTransforms = null;\r\n\r\n                for (var timelineName in this._timelineStates) {\r\n                    this.removeTimelineState(timelineName);\r\n                }\r\n            };\r\n            AnimationState._pool = [];\r\n            return AnimationState;\r\n        })();\r\n        animation.AnimationState = AnimationState;\r\n\r\n        var Animation = (function () {\r\n            function Animation(armature) {\r\n                this._armature = armature;\r\n                this._animationLayer = [];\r\n                this._isPlaying = false;\r\n\r\n                this.animationNameList = [];\r\n                this.tweenEnabled = true;\r\n                this.timeScale = 1;\r\n            }\r\n            Animation.prototype.getLastAnimationName = function () {\r\n                return this._lastAnimationState ? this._lastAnimationState.name : null;\r\n            };\r\n\r\n            Animation.prototype.getLastAnimationState = function () {\r\n                return this._lastAnimationState;\r\n            };\r\n\r\n            Animation.prototype.getAnimationDataList = function () {\r\n                return this._animationDataList;\r\n            };\r\n            Animation.prototype.setAnimationDataList = function (value) {\r\n                this._animationDataList = value;\r\n                this.animationNameList.length = 0;\r\n                for (var index in this._animationDataList) {\r\n                    this.animationNameList[this.animationNameList.length] = this._animationDataList[index].name;\r\n                }\r\n            };\r\n\r\n            Animation.prototype.getIsPlaying = function () {\r\n                return this._isPlaying && !this.getIsComplete();\r\n            };\r\n\r\n            Animation.prototype.getIsComplete = function () {\r\n                if (this._lastAnimationState) {\r\n                    if (!this._lastAnimationState.isComplete) {\r\n                        return false;\r\n                    }\r\n                    var j = this._animationLayer.length;\r\n                    while (j--) {\r\n                        var animationStateList = this._animationLayer[j];\r\n                        var i = animationStateList.length;\r\n                        while (i--) {\r\n                            if (!animationStateList[i].isComplete) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            Animation.prototype.dispose = function () {\r\n                if (!this._armature) {\r\n                    return;\r\n                }\r\n                this.stop();\r\n                var i = this._animationLayer.length;\r\n                while (i--) {\r\n                    var animationStateList = this._animationLayer[i];\r\n                    var j = animationStateList.length;\r\n                    while (j--) {\r\n                        AnimationState._returnObject(animationStateList[j]);\r\n                    }\r\n                    animationStateList.length = 0;\r\n                }\r\n                this._animationLayer.length = 0;\r\n                this.animationNameList.length = 0;\r\n\r\n                this._armature = null;\r\n                this._animationLayer = null;\r\n                this._animationDataList = null;\r\n                this.animationNameList = null;\r\n            };\r\n\r\n            Animation.prototype.gotoAndPlay = function (animationName, fadeInTime, duration, loop, layer, group, fadeOutMode, displayControl, pauseFadeOut, pauseFadeIn) {\r\n                if (typeof fadeInTime === \"undefined\") { fadeInTime = -1; }\r\n                if (typeof duration === \"undefined\") { duration = -1; }\r\n                if (typeof loop === \"undefined\") { loop = NaN; }\r\n                if (typeof layer === \"undefined\") { layer = 0; }\r\n                if (typeof group === \"undefined\") { group = null; }\r\n                if (typeof fadeOutMode === \"undefined\") { fadeOutMode = Animation.SAME_LAYER_AND_GROUP; }\r\n                if (typeof displayControl === \"undefined\") { displayControl = true; }\r\n                if (typeof pauseFadeOut === \"undefined\") { pauseFadeOut = true; }\r\n                if (typeof pauseFadeIn === \"undefined\") { pauseFadeIn = true; }\r\n                if (!this._animationDataList) {\r\n                    return null;\r\n                }\r\n                var i = this._animationDataList.length;\r\n                var animationData;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        animationData = this._animationDataList[i];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!animationData) {\r\n                    return null;\r\n                }\r\n\r\n                this._isPlaying = true;\r\n\r\n                fadeInTime = fadeInTime < 0 ? (animationData.fadeInTime < 0 ? 0.3 : animationData.fadeInTime) : fadeInTime;\r\n\r\n                var durationScale;\r\n                if (duration < 0) {\r\n                    durationScale = animationData.scale < 0 ? 1 : animationData.scale;\r\n                } else {\r\n                    durationScale = duration / animationData.duration;\r\n                }\r\n\r\n                loop = isNaN(loop) ? animationData.loop : loop;\r\n                layer = this.addLayer(layer);\r\n\r\n                var animationState;\r\n                var animationStateList;\r\n                switch (fadeOutMode) {\r\n                    case Animation.NONE:\r\n                        break;\r\n                    case Animation.SAME_LAYER:\r\n                        animationStateList = this._animationLayer[layer];\r\n                        i = animationStateList.length;\r\n                        while (i--) {\r\n                            animationState = animationStateList[i];\r\n                            animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                        }\r\n                        break;\r\n                    case Animation.SAME_GROUP:\r\n                        j = this._animationLayer.length;\r\n                        while (j--) {\r\n                            animationStateList = this._animationLayer[j];\r\n                            i = animationStateList.length;\r\n                            while (i--) {\r\n                                animationState = animationStateList[i];\r\n                                if (animationState.group == group) {\r\n                                    animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case Animation.ALL:\r\n                        var j = this._animationLayer.length;\r\n                        while (j--) {\r\n                            animationStateList = this._animationLayer[j];\r\n                            i = animationStateList.length;\r\n                            while (i--) {\r\n                                animationState = animationStateList[i];\r\n                                animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case Animation.SAME_LAYER_AND_GROUP:\r\n                    default:\r\n                        animationStateList = this._animationLayer[layer];\r\n                        i = animationStateList.length;\r\n                        while (i--) {\r\n                            animationState = animationStateList[i];\r\n                            if (animationState.group == group) {\r\n                                animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                this._lastAnimationState = AnimationState._borrowObject();\r\n                this._lastAnimationState.group = group;\r\n                this._lastAnimationState.tweenEnabled = this.tweenEnabled;\r\n                this._lastAnimationState.fadeIn(this._armature, animationData, fadeInTime, 1 / durationScale, loop, layer, displayControl, pauseFadeIn);\r\n\r\n                this.addState(this._lastAnimationState);\r\n\r\n                var slotList = this._armature._slotList;\r\n                var slot;\r\n                var childArmature;\r\n                i = slotList.length;\r\n                while (i--) {\r\n                    slot = slotList[i];\r\n                    childArmature = slot.getChildArmature();\r\n                    if (childArmature) {\r\n                        childArmature.animation.gotoAndPlay(animationName, fadeInTime);\r\n                    }\r\n                }\r\n\r\n                return this._lastAnimationState;\r\n            };\r\n\r\n            Animation.prototype.play = function () {\r\n                if (!this._animationDataList || this._animationDataList.length == 0) {\r\n                    return;\r\n                }\r\n                if (!this._lastAnimationState) {\r\n                    this.gotoAndPlay(this._animationDataList[0].name);\r\n                } else if (!this._isPlaying) {\r\n                    this._isPlaying = true;\r\n                } else {\r\n                    this.gotoAndPlay(this._lastAnimationState.name);\r\n                }\r\n            };\r\n\r\n            Animation.prototype.stop = function () {\r\n                this._isPlaying = false;\r\n            };\r\n\r\n            Animation.prototype.getState = function (name, layer) {\r\n                if (typeof layer === \"undefined\") { layer = 0; }\r\n                var l = this._animationLayer.length;\r\n                if (l == 0) {\r\n                    return null;\r\n                } else if (layer >= l) {\r\n                    layer = l - 1;\r\n                }\r\n\r\n                var animationStateList = this._animationLayer[layer];\r\n                if (!animationStateList) {\r\n                    return null;\r\n                }\r\n                var i = animationStateList.length;\r\n                while (i--) {\r\n                    if (animationStateList[i].name == name) {\r\n                        return animationStateList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            Animation.prototype.hasAnimation = function (animationName) {\r\n                var i = this._animationDataList.length;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            Animation.prototype.advanceTime = function (passedTime) {\r\n                if (!this._isPlaying) {\r\n                    return;\r\n                }\r\n                passedTime *= this.timeScale;\r\n\r\n                var l = this._armature._boneList.length;\r\n                var i;\r\n                var j;\r\n                var k = l;\r\n                var stateListLength;\r\n                var bone;\r\n                var boneName;\r\n                var weigthLeft;\r\n\r\n                var x;\r\n                var y;\r\n                var skewX;\r\n                var skewY;\r\n                var scaleX;\r\n                var scaleY;\r\n                var pivotX;\r\n                var pivotY;\r\n\r\n                var layerTotalWeight;\r\n                var animationStateList;\r\n                var animationState;\r\n                var timelineState;\r\n                var weight;\r\n                var transform;\r\n                var pivot;\r\n\r\n                l--;\r\n                while (k--) {\r\n                    bone = this._armature._boneList[k];\r\n                    boneName = bone.name;\r\n                    weigthLeft = 1;\r\n\r\n                    x = 0;\r\n                    y = 0;\r\n                    skewX = 0;\r\n                    skewY = 0;\r\n                    scaleX = 0;\r\n                    scaleY = 0;\r\n                    pivotX = 0;\r\n                    pivotY = 0;\r\n\r\n                    i = this._animationLayer.length;\r\n                    while (i--) {\r\n                        layerTotalWeight = 0;\r\n                        animationStateList = this._animationLayer[i];\r\n                        stateListLength = animationStateList.length;\r\n                        for (j = 0; j < stateListLength; j++) {\r\n                            animationState = animationStateList[j];\r\n                            if (k == l) {\r\n                                if (animationState.advanceTime(passedTime)) {\r\n                                    this.removeState(animationState);\r\n                                    j--;\r\n                                    stateListLength--;\r\n                                    continue;\r\n                                }\r\n                            }\r\n\r\n                            timelineState = animationState._timelineStates[boneName];\r\n                            if (timelineState && timelineState.tweenActive) {\r\n                                weight = animationState._fadeWeight * animationState.weight * weigthLeft;\r\n                                transform = timelineState.transform;\r\n                                pivot = timelineState.pivot;\r\n                                x += transform.x * weight;\r\n                                y += transform.y * weight;\r\n                                skewX += transform.skewX * weight;\r\n                                skewY += transform.skewY * weight;\r\n                                scaleX += transform.scaleX * weight;\r\n                                scaleY += transform.scaleY * weight;\r\n                                pivotX += pivot.x * weight;\r\n                                pivotY += pivot.y * weight;\r\n\r\n                                layerTotalWeight += weight;\r\n                            }\r\n                        }\r\n\r\n                        if (layerTotalWeight >= weigthLeft) {\r\n                            break;\r\n                        } else {\r\n                            weigthLeft -= layerTotalWeight;\r\n                        }\r\n                    }\r\n                    transform = bone.tween;\r\n                    pivot = bone._tweenPivot;\r\n\r\n                    transform.x = x;\r\n                    transform.y = y;\r\n                    transform.skewX = skewX;\r\n                    transform.skewY = skewY;\r\n                    transform.scaleX = scaleX;\r\n                    transform.scaleY = scaleY;\r\n                    pivot.x = pivotX;\r\n                    pivot.y = pivotY;\r\n                }\r\n            };\r\n\r\n            Animation.prototype.addLayer = function (layer) {\r\n                if (layer >= this._animationLayer.length) {\r\n                    layer = this._animationLayer.length;\r\n                    this._animationLayer[layer] = [];\r\n                }\r\n                return layer;\r\n            };\r\n\r\n            Animation.prototype.addState = function (animationState) {\r\n                var animationStateList = this._animationLayer[animationState.layer];\r\n                animationStateList.push(animationState);\r\n            };\r\n\r\n            Animation.prototype.removeState = function (animationState) {\r\n                var layer = animationState.layer;\r\n                var animationStateList = this._animationLayer[layer];\r\n                animationStateList.splice(animationStateList.indexOf(animationState), 1);\r\n\r\n                AnimationState._returnObject(animationState);\r\n\r\n                if (animationStateList.length == 0 && layer == this._animationLayer.length - 1) {\r\n                    this._animationLayer.length--;\r\n                }\r\n            };\r\n            Animation.NONE = \"none\";\r\n            Animation.SAME_LAYER = \"sameLayer\";\r\n            Animation.SAME_GROUP = \"sameGroup\";\r\n            Animation.SAME_LAYER_AND_GROUP = \"sameLayerAndGroup\";\r\n            Animation.ALL = \"all\";\r\n            return Animation;\r\n        })();\r\n        animation.Animation = Animation;\r\n    })(dragonBones.animation || (dragonBones.animation = {}));\r\n    var animation = dragonBones.animation;\r\n\r\n    (function (objects) {\r\n        var DBTransform = (function () {\r\n            function DBTransform() {\r\n                this.x = 0;\r\n                this.y = 0;\r\n                this.skewX = 0;\r\n                this.skewY = 0;\r\n                this.scaleX = 1;\r\n                this.scaleY = 1;\r\n            }\r\n            DBTransform.prototype.getRotation = function () {\r\n                return this.skewX;\r\n            };\r\n            DBTransform.prototype.setRotation = function (value) {\r\n                this.skewX = this.skewY = value;\r\n            };\r\n\r\n            DBTransform.prototype.copy = function (transform) {\r\n                this.x = transform.x;\r\n                this.y = transform.y;\r\n                this.skewX = transform.skewX;\r\n                this.skewY = transform.skewY;\r\n                this.scaleX = transform.scaleX;\r\n                this.scaleY = transform.scaleY;\r\n            };\r\n\r\n            DBTransform.prototype.toString = function () {\r\n                return \"[DBTransform (x=\" + this.x + \" y=\" + this.y + \" skewX=\" + this.skewX + \" skewY=\" + this.skewY + \" scaleX=\" + this.scaleX + \" scaleY=\" + this.scaleY + \")]\";\r\n            };\r\n            return DBTransform;\r\n        })();\r\n        objects.DBTransform = DBTransform;\r\n\r\n        var Frame = (function () {\r\n            function Frame() {\r\n                this.position = 0;\r\n                this.duration = 0;\r\n            }\r\n            Frame.prototype.dispose = function () {\r\n            };\r\n            return Frame;\r\n        })();\r\n        objects.Frame = Frame;\r\n\r\n        var TransformFrame = (function (_super) {\r\n            __extends(TransformFrame, _super);\r\n            function TransformFrame() {\r\n                _super.call(this);\r\n\r\n                this.tweenEasing = 0;\r\n                this.tweenRotate = 0;\r\n                this.displayIndex = 0;\r\n                this.zOrder = NaN;\r\n                this.visible = true;\r\n\r\n                this.global = new DBTransform();\r\n                this.transform = new DBTransform();\r\n                this.pivot = new geom.Point();\r\n            }\r\n            TransformFrame.prototype.dispose = function () {\r\n                _super.prototype.dispose.call(this);\r\n                this.global = null;\r\n                this.transform = null;\r\n\r\n                this.pivot = null;\r\n                this.color = null;\r\n            };\r\n            return TransformFrame;\r\n        })(Frame);\r\n        objects.TransformFrame = TransformFrame;\r\n\r\n        var Timeline = (function () {\r\n            function Timeline() {\r\n                this._frameList = [];\r\n                this.duration = 0;\r\n                this.scale = 1;\r\n            }\r\n            Timeline.prototype.getFrameList = function () {\r\n                return this._frameList;\r\n            };\r\n\r\n            Timeline.prototype.dispose = function () {\r\n                var i = this._frameList.length;\r\n                while (i--) {\r\n                    this._frameList[i].dispose();\r\n                }\r\n                this._frameList.length = 0;\r\n                this._frameList = null;\r\n            };\r\n\r\n            Timeline.prototype.addFrame = function (frame) {\r\n                if (!frame) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._frameList.indexOf(frame) < 0) {\r\n                    this._frameList[this._frameList.length] = frame;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n            return Timeline;\r\n        })();\r\n        objects.Timeline = Timeline;\r\n\r\n        var TransformTimeline = (function (_super) {\r\n            __extends(TransformTimeline, _super);\r\n            function TransformTimeline() {\r\n                _super.call(this);\r\n                this.originTransform = new DBTransform();\r\n                this.originPivot = new geom.Point();\r\n                this.offset = 0;\r\n                this.transformed = false;\r\n            }\r\n            TransformTimeline.prototype.dispose = function () {\r\n                if (this == TransformTimeline.HIDE_TIMELINE) {\r\n                    return;\r\n                }\r\n                _super.prototype.dispose.call(this);\r\n                this.originTransform = null;\r\n                this.originPivot = null;\r\n            };\r\n            TransformTimeline.HIDE_TIMELINE = new TransformTimeline();\r\n            return TransformTimeline;\r\n        })(Timeline);\r\n        objects.TransformTimeline = TransformTimeline;\r\n\r\n        var AnimationData = (function (_super) {\r\n            __extends(AnimationData, _super);\r\n            function AnimationData() {\r\n                _super.call(this);\r\n                this.frameRate = 0;\r\n                this.loop = 0;\r\n                this.tweenEasing = NaN;\r\n                this.fadeInTime = 0;\r\n\r\n                this._timelines = {};\r\n            }\r\n            AnimationData.prototype.getTimelines = function () {\r\n                return this._timelines;\r\n            };\r\n\r\n            AnimationData.prototype.dispose = function () {\r\n                _super.prototype.dispose.call(this);\r\n\r\n                for (var timelineName in this._timelines) {\r\n                    (this._timelines[timelineName]).dispose();\r\n                }\r\n                this._timelines = null;\r\n            };\r\n\r\n            AnimationData.prototype.getTimeline = function (timelineName) {\r\n                return this._timelines[timelineName];\r\n            };\r\n\r\n            AnimationData.prototype.addTimeline = function (timeline, timelineName) {\r\n                if (!timeline) {\r\n                    throw new Error();\r\n                }\r\n\r\n                this._timelines[timelineName] = timeline;\r\n            };\r\n            return AnimationData;\r\n        })(Timeline);\r\n        objects.AnimationData = AnimationData;\r\n\r\n        var DisplayData = (function () {\r\n            function DisplayData() {\r\n                this.transform = new DBTransform();\r\n            }\r\n            DisplayData.prototype.dispose = function () {\r\n                this.transform = null;\r\n                this.pivot = null;\r\n            };\r\n            DisplayData.ARMATURE = \"armature\";\r\n            DisplayData.IMAGE = \"image\";\r\n            return DisplayData;\r\n        })();\r\n        objects.DisplayData = DisplayData;\r\n\r\n        var SlotData = (function () {\r\n            function SlotData() {\r\n                this._displayDataList = [];\r\n                this.zOrder = 0;\r\n            }\r\n            SlotData.prototype.getDisplayDataList = function () {\r\n                return this._displayDataList;\r\n            };\r\n\r\n            SlotData.prototype.dispose = function () {\r\n                var i = this._displayDataList.length;\r\n                while (i--) {\r\n                    this._displayDataList[i].dispose();\r\n                }\r\n                this._displayDataList.length = 0;\r\n                this._displayDataList = null;\r\n            };\r\n\r\n            SlotData.prototype.addDisplayData = function (displayData) {\r\n                if (!displayData) {\r\n                    throw new Error();\r\n                }\r\n                if (this._displayDataList.indexOf(displayData) < 0) {\r\n                    this._displayDataList[this._displayDataList.length] = displayData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            SlotData.prototype.getDisplayData = function (displayName) {\r\n                var i = this._displayDataList.length;\r\n                while (i--) {\r\n                    if (this._displayDataList[i].name == displayName) {\r\n                        return this._displayDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n            return SlotData;\r\n        })();\r\n        objects.SlotData = SlotData;\r\n\r\n        var BoneData = (function () {\r\n            function BoneData() {\r\n                this.length = 0;\r\n                this.global = new DBTransform();\r\n                this.transform = new DBTransform();\r\n            }\r\n            BoneData.prototype.dispose = function () {\r\n                this.global = null;\r\n                this.transform = null;\r\n            };\r\n            return BoneData;\r\n        })();\r\n        objects.BoneData = BoneData;\r\n\r\n        var SkinData = (function () {\r\n            function SkinData() {\r\n                this._slotDataList = [];\r\n            }\r\n            SkinData.prototype.getSlotDataList = function () {\r\n                return this._slotDataList;\r\n            };\r\n\r\n            SkinData.prototype.dispose = function () {\r\n                var i = this._slotDataList.length;\r\n                while (i--) {\r\n                    this._slotDataList[i].dispose();\r\n                }\r\n                this._slotDataList.length = 0;\r\n                this._slotDataList = null;\r\n            };\r\n\r\n            SkinData.prototype.getSlotData = function (slotName) {\r\n                var i = this._slotDataList.length;\r\n                while (i--) {\r\n                    if (this._slotDataList[i].name == slotName) {\r\n                        return this._slotDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            SkinData.prototype.addSlotData = function (slotData) {\r\n                if (!slotData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._slotDataList.indexOf(slotData) < 0) {\r\n                    this._slotDataList[this._slotDataList.length] = slotData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n            return SkinData;\r\n        })();\r\n        objects.SkinData = SkinData;\r\n\r\n        var ArmatureData = (function () {\r\n            function ArmatureData() {\r\n                this._boneDataList = [];\r\n                this._skinDataList = [];\r\n                this._animationDataList = [];\r\n            }\r\n            ArmatureData.prototype.getBoneDataList = function () {\r\n                return this._boneDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.getSkinDataList = function () {\r\n                return this._skinDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.getAnimationDataList = function () {\r\n                return this._animationDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.dispose = function () {\r\n                var i = this._boneDataList.length;\r\n                while (i--) {\r\n                    this._boneDataList[i].dispose();\r\n                }\r\n                i = this._skinDataList.length;\r\n                while (i--) {\r\n                    this._skinDataList[i].dispose();\r\n                }\r\n                i = this._animationDataList.length;\r\n                while (i--) {\r\n                    this._animationDataList[i].dispose();\r\n                }\r\n                this._boneDataList.length = 0;\r\n                this._skinDataList.length = 0;\r\n                this._animationDataList.length = 0;\r\n                this._boneDataList = null;\r\n                this._skinDataList = null;\r\n                this._animationDataList = null;\r\n            };\r\n\r\n            ArmatureData.prototype.getBoneData = function (boneName) {\r\n                var i = this._boneDataList.length;\r\n                while (i--) {\r\n                    if (this._boneDataList[i].name == boneName) {\r\n                        return this._boneDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.getSkinData = function (skinName) {\r\n                if (!skinName) {\r\n                    return this._skinDataList[0];\r\n                }\r\n                var i = this._skinDataList.length;\r\n                while (i--) {\r\n                    if (this._skinDataList[i].name == skinName) {\r\n                        return this._skinDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.getAnimationData = function (animationName) {\r\n                var i = this._animationDataList.length;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        return this._animationDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.addBoneData = function (boneData) {\r\n                if (!boneData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._boneDataList.indexOf(boneData) < 0) {\r\n                    this._boneDataList[this._boneDataList.length] = boneData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.addSkinData = function (skinData) {\r\n                if (!skinData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._skinDataList.indexOf(skinData) < 0) {\r\n                    this._skinDataList[this._skinDataList.length] = skinData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.addAnimationData = function (animationData) {\r\n                if (!animationData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._animationDataList.indexOf(animationData) < 0) {\r\n                    this._animationDataList[this._animationDataList.length] = animationData;\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.sortBoneDataList = function () {\r\n                var i = this._boneDataList.length;\r\n                if (i == 0) {\r\n                    return;\r\n                }\r\n\r\n                var helpArray = [];\r\n                while (i--) {\r\n                    var boneData = this._boneDataList[i];\r\n                    var level = 0;\r\n                    var parentData = boneData;\r\n                    while (parentData && parentData.parent) {\r\n                        level++;\r\n                        parentData = this.getBoneData(parentData.parent);\r\n                    }\r\n                    helpArray[i] = { level: level, boneData: boneData };\r\n                }\r\n\r\n                helpArray.sort(this.sortBoneData);\r\n\r\n                i = helpArray.length;\r\n                while (i--) {\r\n                    this._boneDataList[i] = helpArray[i].boneData;\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.sortBoneData = function (object1, object2) {\r\n                return object1.level > object2.level ? 1 : -1;\r\n            };\r\n            return ArmatureData;\r\n        })();\r\n        objects.ArmatureData = ArmatureData;\r\n\r\n        var SkeletonData = (function () {\r\n            function SkeletonData() {\r\n                this._armatureDataList = [];\r\n                this._subTexturePivots = {};\r\n            }\r\n            SkeletonData.prototype.getArmatureNames = function () {\r\n                var nameList = [];\r\n                for (var armatureDataIndex in this._armatureDataList) {\r\n                    nameList[nameList.length] = this._armatureDataList[armatureDataIndex].name;\r\n                }\r\n                return nameList;\r\n            };\r\n\r\n            SkeletonData.prototype.getArmatureDataList = function () {\r\n                return this._armatureDataList;\r\n            };\r\n\r\n            SkeletonData.prototype.dispose = function () {\r\n                for (var armatureDataIndex in this._armatureDataList) {\r\n                    this._armatureDataList[armatureDataIndex].dispose();\r\n                }\r\n                this._armatureDataList.length = 0;\r\n\r\n                this._armatureDataList = null;\r\n                this._subTexturePivots = null;\r\n            };\r\n\r\n            SkeletonData.prototype.getArmatureData = function (armatureName) {\r\n                var i = this._armatureDataList.length;\r\n                while (i--) {\r\n                    if (this._armatureDataList[i].name == armatureName) {\r\n                        return this._armatureDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            SkeletonData.prototype.addArmatureData = function (armatureData) {\r\n                if (!armatureData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._armatureDataList.indexOf(armatureData) < 0) {\r\n                    this._armatureDataList[this._armatureDataList.length] = armatureData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.removeArmatureData = function (armatureData) {\r\n                var index = this._armatureDataList.indexOf(armatureData);\r\n                if (index >= 0) {\r\n                    this._armatureDataList.splice(index, 1);\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.removeArmatureDataByName = function (armatureName) {\r\n                var i = this._armatureDataList.length;\r\n                while (i--) {\r\n                    if (this._armatureDataList[i].name == armatureName) {\r\n                        this._armatureDataList.splice(i, 1);\r\n                    }\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.getSubTexturePivot = function (subTextureName) {\r\n                return this._subTexturePivots[subTextureName];\r\n            };\r\n\r\n            SkeletonData.prototype.addSubTexturePivot = function (x, y, subTextureName) {\r\n                var point = this._subTexturePivots[subTextureName];\r\n                if (point) {\r\n                    point.x = x;\r\n                    point.y = y;\r\n                } else {\r\n                    this._subTexturePivots[subTextureName] = point = new geom.Point(x, y);\r\n                }\r\n\r\n                return point;\r\n            };\r\n\r\n            SkeletonData.prototype.removeSubTexturePivot = function (subTextureName) {\r\n                if (subTextureName) {\r\n                    delete this._subTexturePivots[subTextureName];\r\n                } else {\r\n                    for (subTextureName in this._subTexturePivots) {\r\n                        delete this._subTexturePivots[subTextureName];\r\n                    }\r\n                }\r\n            };\r\n            return SkeletonData;\r\n        })();\r\n        objects.SkeletonData = SkeletonData;\r\n\r\n        var DataParser = (function () {\r\n            function DataParser() {\r\n            }\r\n            DataParser.parseTextureAtlasData = function (rawData, scale) {\r\n                if (typeof scale === \"undefined\") { scale = 1; }\r\n                if (!rawData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var textureAtlasData = {};\r\n                textureAtlasData.__name = rawData[utils.ConstValues.A_NAME];\r\n                var subTextureList = rawData[utils.ConstValues.SUB_TEXTURE];\r\n                for (var index in subTextureList) {\r\n                    var subTextureObject = subTextureList[index];\r\n                    var subTextureName = subTextureObject[utils.ConstValues.A_NAME];\r\n                    var subTextureData = new geom.Rectangle(Number(subTextureObject[utils.ConstValues.A_X]) / scale, Number(subTextureObject[utils.ConstValues.A_Y]) / scale, Number(subTextureObject[utils.ConstValues.A_WIDTH]) / scale, Number(subTextureObject[utils.ConstValues.A_HEIGHT]) / scale);\r\n                    textureAtlasData[subTextureName] = subTextureData;\r\n                }\r\n\r\n                return textureAtlasData;\r\n            };\r\n\r\n            DataParser.parseSkeletonData = function (rawData) {\r\n                if (!rawData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var frameRate = Number(rawData[utils.ConstValues.A_FRAME_RATE]);\r\n                var data = new SkeletonData();\r\n                data.name = rawData[utils.ConstValues.A_NAME];\r\n\r\n                var armatureObjectList = rawData[utils.ConstValues.ARMATURE];\r\n                for (var index in armatureObjectList) {\r\n                    var armatureObject = armatureObjectList[index];\r\n                    data.addArmatureData(DataParser.parseArmatureData(armatureObject, data, frameRate));\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n            DataParser.parseArmatureData = function (armatureObject, data, frameRate) {\r\n                var armatureData = new ArmatureData();\r\n                armatureData.name = armatureObject[utils.ConstValues.A_NAME];\r\n\r\n                var boneObjectList = armatureObject[utils.ConstValues.BONE];\r\n                for (var index in boneObjectList) {\r\n                    var boneObject = boneObjectList[index];\r\n                    armatureData.addBoneData(DataParser.parseBoneData(boneObject));\r\n                }\r\n\r\n                var skinObjectList = armatureObject[utils.ConstValues.SKIN];\r\n                for (var index in skinObjectList) {\r\n                    var skinObject = skinObjectList[index];\r\n                    armatureData.addSkinData(DataParser.parseSkinData(skinObject, data));\r\n                }\r\n\r\n                utils.DBDataUtil.transformArmatureData(armatureData);\r\n                armatureData.sortBoneDataList();\r\n\r\n                var animationObjectList = armatureObject[utils.ConstValues.ANIMATION];\r\n\r\n                for (var index in animationObjectList) {\r\n                    var animationObject = animationObjectList[index];\r\n                    armatureData.addAnimationData(DataParser.parseAnimationData(animationObject, armatureData, frameRate));\r\n                }\r\n\r\n                return armatureData;\r\n            };\r\n\r\n            DataParser.parseBoneData = function (boneObject) {\r\n                var boneData = new BoneData();\r\n                boneData.name = boneObject[utils.ConstValues.A_NAME];\r\n                boneData.parent = boneObject[utils.ConstValues.A_PARENT];\r\n                boneData.length = Number(boneObject[utils.ConstValues.A_LENGTH]) || 0;\r\n\r\n                DataParser.parseTransform(boneObject[utils.ConstValues.TRANSFORM], boneData.global);\r\n                boneData.transform.copy(boneData.global);\r\n\r\n                return boneData;\r\n            };\r\n\r\n            DataParser.parseSkinData = function (skinObject, data) {\r\n                var skinData = new SkinData();\r\n                skinData.name = skinObject[utils.ConstValues.A_NAME];\r\n                var slotObjectList = skinObject[utils.ConstValues.SLOT];\r\n                for (var index in slotObjectList) {\r\n                    var slotObject = slotObjectList[index];\r\n                    skinData.addSlotData(DataParser.parseSlotData(slotObject, data));\r\n                }\r\n\r\n                return skinData;\r\n            };\r\n\r\n            DataParser.parseSlotData = function (slotObject, data) {\r\n                var slotData = new SlotData();\r\n                slotData.name = slotObject[utils.ConstValues.A_NAME];\r\n                slotData.parent = slotObject[utils.ConstValues.A_PARENT];\r\n                slotData.zOrder = Number(slotObject[utils.ConstValues.A_Z_ORDER]);\r\n\r\n                var displayObjectList = slotObject[utils.ConstValues.DISPLAY];\r\n                for (var index in displayObjectList) {\r\n                    var displayObject = displayObjectList[index];\r\n                    slotData.addDisplayData(DataParser.parseDisplayData(displayObject, data));\r\n                }\r\n\r\n                return slotData;\r\n            };\r\n\r\n            DataParser.parseDisplayData = function (displayObject, data) {\r\n                var displayData = new DisplayData();\r\n                displayData.name = displayObject[utils.ConstValues.A_NAME];\r\n                displayData.type = displayObject[utils.ConstValues.A_TYPE];\r\n\r\n                displayData.pivot = data.addSubTexturePivot(0, 0, displayData.name);\r\n\r\n                DataParser.parseTransform(displayObject[utils.ConstValues.TRANSFORM], displayData.transform, displayData.pivot);\r\n\r\n                return displayData;\r\n            };\r\n\r\n            DataParser.parseAnimationData = function (animationObject, armatureData, frameRate) {\r\n                var animationData = new AnimationData();\r\n                animationData.name = animationObject[utils.ConstValues.A_NAME];\r\n                animationData.frameRate = frameRate;\r\n                animationData.loop = Number(animationObject[utils.ConstValues.A_LOOP]) || 0;\r\n                animationData.fadeInTime = Number(animationObject[utils.ConstValues.A_FADE_IN_TIME]);\r\n                animationData.duration = Number(animationObject[utils.ConstValues.A_DURATION]) / frameRate;\r\n                animationData.scale = Number(animationObject[utils.ConstValues.A_SCALE]);\r\n\r\n                if (animationObject.hasOwnProperty(utils.ConstValues.A_TWEEN_EASING)) {\r\n                    var tweenEase = animationObject[utils.ConstValues.A_TWEEN_EASING];\r\n                    if (tweenEase == undefined || tweenEase == null) {\r\n                        animationData.tweenEasing = NaN;\r\n                    } else {\r\n                        animationData.tweenEasing = Number(tweenEase);\r\n                    }\r\n                } else {\r\n                    animationData.tweenEasing = NaN;\r\n                }\r\n\r\n                DataParser.parseTimeline(animationObject, animationData, DataParser.parseMainFrame, frameRate);\r\n\r\n                var timeline;\r\n                var timelineName;\r\n                var timelineObjectList = animationObject[utils.ConstValues.TIMELINE];\r\n                for (var index in timelineObjectList) {\r\n                    var timelineObject = timelineObjectList[index];\r\n                    timeline = DataParser.parseTransformTimeline(timelineObject, animationData.duration, frameRate);\r\n                    timelineName = timelineObject[utils.ConstValues.A_NAME];\r\n                    animationData.addTimeline(timeline, timelineName);\r\n                }\r\n\r\n                utils.DBDataUtil.addHideTimeline(animationData, armatureData);\r\n                utils.DBDataUtil.transformAnimationData(animationData, armatureData);\r\n\r\n                return animationData;\r\n            };\r\n\r\n            DataParser.parseTimeline = function (timelineObject, timeline, frameParser, frameRate) {\r\n                var position = 0;\r\n                var frame;\r\n                var frameObjectList = timelineObject[utils.ConstValues.FRAME];\r\n                for (var index in frameObjectList) {\r\n                    var frameObject = frameObjectList[index];\r\n                    frame = frameParser(frameObject, frameRate);\r\n                    frame.position = position;\r\n                    timeline.addFrame(frame);\r\n                    position += frame.duration;\r\n                }\r\n                if (frame) {\r\n                    frame.duration = timeline.duration - frame.position;\r\n                }\r\n            };\r\n\r\n            DataParser.parseTransformTimeline = function (timelineObject, duration, frameRate) {\r\n                var timeline = new TransformTimeline();\r\n                timeline.duration = duration;\r\n\r\n                DataParser.parseTimeline(timelineObject, timeline, DataParser.parseTransformFrame, frameRate);\r\n\r\n                timeline.scale = Number(timelineObject[utils.ConstValues.A_SCALE]);\r\n                timeline.offset = Number(timelineObject[utils.ConstValues.A_OFFSET]);\r\n\r\n                return timeline;\r\n            };\r\n\r\n            DataParser.parseFrame = function (frameObject, frame, frameRate) {\r\n                frame.duration = Number(frameObject[utils.ConstValues.A_DURATION]) / frameRate;\r\n                frame.action = frameObject[utils.ConstValues.A_ACTION];\r\n                frame.event = frameObject[utils.ConstValues.A_EVENT];\r\n                frame.sound = frameObject[utils.ConstValues.A_SOUND];\r\n            };\r\n\r\n            DataParser.parseMainFrame = function (frameObject, frameRate) {\r\n                var frame = new Frame();\r\n                DataParser.parseFrame(frameObject, frame, frameRate);\r\n                return frame;\r\n            };\r\n\r\n            DataParser.parseTransformFrame = function (frameObject, frameRate) {\r\n                var frame = new TransformFrame();\r\n                DataParser.parseFrame(frameObject, frame, frameRate);\r\n\r\n                frame.visible = Number(frameObject[utils.ConstValues.A_HIDE]) != 1;\r\n\r\n                if (frameObject.hasOwnProperty(utils.ConstValues.A_TWEEN_EASING)) {\r\n                    var tweenEase = frameObject[utils.ConstValues.A_TWEEN_EASING];\r\n                    if (tweenEase == undefined || tweenEase == null) {\r\n                        frame.tweenEasing = NaN;\r\n                    } else {\r\n                        frame.tweenEasing = Number(tweenEase);\r\n                    }\r\n                } else {\r\n                    frame.tweenEasing = 0;\r\n                }\r\n\r\n                frame.tweenRotate = Number(frameObject[utils.ConstValues.A_TWEEN_ROTATE]) || 0;\r\n                frame.displayIndex = Number(frameObject[utils.ConstValues.A_DISPLAY_INDEX]) || 0;\r\n\r\n                frame.zOrder = Number(frameObject[utils.ConstValues.A_Z_ORDER]) || 0;\r\n\r\n                DataParser.parseTransform(frameObject[utils.ConstValues.TRANSFORM], frame.global, frame.pivot);\r\n                frame.transform.copy(frame.global);\r\n\r\n                var colorTransformObject = frameObject[utils.ConstValues.COLOR_TRANSFORM];\r\n                if (colorTransformObject) {\r\n                    frame.color = new geom.ColorTransform();\r\n                    frame.color.alphaOffset = Number(colorTransformObject[utils.ConstValues.A_ALPHA_OFFSET]);\r\n                    frame.color.redOffset = Number(colorTransformObject[utils.ConstValues.A_RED_OFFSET]);\r\n                    frame.color.greenOffset = Number(colorTransformObject[utils.ConstValues.A_GREEN_OFFSET]);\r\n                    frame.color.blueOffset = Number(colorTransformObject[utils.ConstValues.A_BLUE_OFFSET]);\r\n\r\n                    frame.color.alphaMultiplier = Number(colorTransformObject[utils.ConstValues.A_ALPHA_MULTIPLIER]) * 0.01;\r\n                    frame.color.redMultiplier = Number(colorTransformObject[utils.ConstValues.A_RED_MULTIPLIER]) * 0.01;\r\n                    frame.color.greenMultiplier = Number(colorTransformObject[utils.ConstValues.A_GREEN_MULTIPLIER]) * 0.01;\r\n                    frame.color.blueMultiplier = Number(colorTransformObject[utils.ConstValues.A_BLUE_MULTIPLIER]) * 0.01;\r\n                }\r\n\r\n                return frame;\r\n            };\r\n\r\n            DataParser.parseTransform = function (transformObject, transform, pivot) {\r\n                if (typeof pivot === \"undefined\") { pivot = null; }\r\n                if (transformObject) {\r\n                    if (transform) {\r\n                        transform.x = Number(transformObject[utils.ConstValues.A_X]);\r\n                        transform.y = Number(transformObject[utils.ConstValues.A_Y]);\r\n                        transform.skewX = Number(transformObject[utils.ConstValues.A_SKEW_X]) * utils.ConstValues.ANGLE_TO_RADIAN;\r\n                        transform.skewY = Number(transformObject[utils.ConstValues.A_SKEW_Y]) * utils.ConstValues.ANGLE_TO_RADIAN;\r\n                        transform.scaleX = Number(transformObject[utils.ConstValues.A_SCALE_X]);\r\n                        transform.scaleY = Number(transformObject[utils.ConstValues.A_SCALE_Y]);\r\n                    }\r\n                    if (pivot) {\r\n                        pivot.x = Number(transformObject[utils.ConstValues.A_PIVOT_X]);\r\n                        pivot.y = Number(transformObject[utils.ConstValues.A_PIVOT_Y]);\r\n                    }\r\n                }\r\n            };\r\n            return DataParser;\r\n        })();\r\n        objects.DataParser = DataParser;\r\n    })(dragonBones.objects || (dragonBones.objects = {}));\r\n    var objects = dragonBones.objects;\r\n\r\n    (function (factorys) {\r\n        var BaseFactory = (function (_super) {\r\n            __extends(BaseFactory, _super);\r\n            function BaseFactory() {\r\n                _super.call(this);\r\n\r\n                this._dataDic = {};\r\n                this._textureAtlasDic = {};\r\n                this._textureAtlasLoadingDic = {};\r\n            }\r\n            BaseFactory.prototype.getSkeletonData = function (name) {\r\n                return this._dataDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.addSkeletonData = function (data, name) {\r\n                if (!data) {\r\n                    throw new Error();\r\n                }\r\n                name = name || data.name;\r\n                if (!name) {\r\n                    throw new Error(\"Unnamed data!\");\r\n                }\r\n                if (this._dataDic[name]) {\r\n                }\r\n                this._dataDic[name] = data;\r\n            };\r\n\r\n            BaseFactory.prototype.removeSkeletonData = function (name) {\r\n                delete this._dataDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.getTextureAtlas = function (name) {\r\n                return this._textureAtlasDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.addTextureAtlas = function (textureAtlas, name) {\r\n                if (!textureAtlas) {\r\n                    throw new Error();\r\n                }\r\n\r\n                name = name || textureAtlas.name;\r\n                if (!name) {\r\n                    throw new Error(\"Unnamed data!\");\r\n                }\r\n                if (this._textureAtlasDic[name]) {\r\n                }\r\n                this._textureAtlasDic[name] = textureAtlas;\r\n            };\r\n\r\n            BaseFactory.prototype.removeTextureAtlas = function (name) {\r\n                delete this._textureAtlasDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.dispose = function (disposeData) {\r\n                if (typeof disposeData === \"undefined\") { disposeData = true; }\r\n                if (disposeData) {\r\n                    for (var i in this._dataDic) {\r\n                        this._dataDic[i].dispose();\r\n                    }\r\n                    for (var i in this._textureAtlasDic) {\r\n                        this._textureAtlasDic[i].dispose();\r\n                    }\r\n                }\r\n                this._dataDic = null;\r\n                this._textureAtlasDic = null;\r\n                this._textureAtlasLoadingDic = null;\r\n                this._currentDataName = null;\r\n                this._currentTextureAtlasName = null;\r\n            };\r\n\r\n            BaseFactory.prototype.buildArmature = function (armatureName, animationName, skeletonName, textureAtlasName, skinName) {\r\n                if (skeletonName) {\r\n                    var data = this._dataDic[skeletonName];\r\n                    if (data) {\r\n                        var armatureData = data.getArmatureData(armatureName);\r\n                    }\r\n                } else {\r\n                    for (skeletonName in this._dataDic) {\r\n                        data = this._dataDic[skeletonName];\r\n                        armatureData = data.getArmatureData(armatureName);\r\n                        if (armatureData) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!armatureData) {\r\n                    return null;\r\n                }\r\n\r\n                this._currentDataName = skeletonName;\r\n                this._currentTextureAtlasName = textureAtlasName || skeletonName;\r\n\r\n                var armature = this._generateArmature();\r\n                armature.name = armatureName;\r\n                var bone;\r\n                var boneData;\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                for (var index in boneDataList) {\r\n                    boneData = boneDataList[index];\r\n                    bone = new dragonBones.Bone();\r\n                    bone.name = boneData.name;\r\n                    bone.origin.copy(boneData.transform);\r\n                    if (armatureData.getBoneData(boneData.parent)) {\r\n                        armature.addChild(bone, boneData.parent);\r\n                    } else {\r\n                        armature.addChild(bone, null);\r\n                    }\r\n                }\r\n\r\n                if (animationName && animationName != armatureName) {\r\n                    var animationArmatureData = data.getArmatureData(animationName);\r\n                    if (!animationArmatureData) {\r\n                        for (skeletonName in this._dataDic) {\r\n                            data = this._dataDic[skeletonName];\r\n                            animationArmatureData = data.getArmatureData(animationName);\r\n                            if (animationArmatureData) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (animationArmatureData) {\r\n                    armature.animation.setAnimationDataList(animationArmatureData.getAnimationDataList());\r\n                } else {\r\n                    armature.animation.setAnimationDataList(armatureData.getAnimationDataList());\r\n                }\r\n\r\n                var skinData = armatureData.getSkinData(skinName);\r\n                if (!skinData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var slot;\r\n                var displayData;\r\n                var childArmature;\r\n                var i;\r\n                var helpArray = [];\r\n                var slotData;\r\n                var slotDataList = skinData.getSlotDataList();\r\n                var displayDataList;\r\n                for (var index in slotDataList) {\r\n                    slotData = slotDataList[index];\r\n                    bone = armature.getBone(slotData.parent);\r\n                    if (!bone) {\r\n                        continue;\r\n                    }\r\n                    displayDataList = slotData.getDisplayDataList();\r\n                    slot = this._generateSlot();\r\n                    slot.name = slotData.name;\r\n                    slot._originZOrder = slotData.zOrder;\r\n                    slot._dislayDataList = displayDataList;\r\n\r\n                    helpArray.length = 0;\r\n                    i = displayDataList.length;\r\n                    while (i--) {\r\n                        displayData = displayDataList[i];\r\n                        switch (displayData.type) {\r\n                            case objects.DisplayData.ARMATURE:\r\n                                childArmature = this.buildArmature(displayData.name, null, this._currentDataName, this._currentTextureAtlasName, null);\r\n                                if (childArmature) {\r\n                                    helpArray[i] = childArmature;\r\n                                }\r\n                                break;\r\n                            case objects.DisplayData.IMAGE:\r\n                            default:\r\n                                helpArray[i] = this._generateDisplay(this._textureAtlasDic[this._currentTextureAtlasName], displayData.name, displayData.pivot.x, displayData.pivot.y);\r\n                                break;\r\n                        }\r\n                    }\r\n                    slot.setDisplayList(helpArray);\r\n                    slot._changeDisplay(0);\r\n                    bone.addChild(slot);\r\n                }\r\n\r\n                armature._slotsZOrderChanged = true;\r\n                armature.advanceTime(0);\r\n                return armature;\r\n            };\r\n\r\n            BaseFactory.prototype.getTextureDisplay = function (textureName, textureAtlasName, pivotX, pivotY) {\r\n                if (textureAtlasName) {\r\n                    var textureAtlas = this._textureAtlasDic[textureAtlasName];\r\n                }\r\n                if (!textureAtlas && !textureAtlasName) {\r\n                    for (textureAtlasName in this._textureAtlasDic) {\r\n                        textureAtlas = this._textureAtlasDic[textureAtlasName];\r\n                        if (textureAtlas.getRegion(textureName)) {\r\n                            break;\r\n                        }\r\n                        textureAtlas = null;\r\n                    }\r\n                }\r\n                if (textureAtlas) {\r\n                    if (isNaN(pivotX) || isNaN(pivotY)) {\r\n                        var data = this._dataDic[textureAtlasName];\r\n                        if (data) {\r\n                            var pivot = data.getSubTexturePivot(textureName);\r\n                            if (pivot) {\r\n                                pivotX = pivot.x;\r\n                                pivotY = pivot.y;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return this._generateDisplay(textureAtlas, textureName, pivotX, pivotY);\r\n                }\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateArmature = function () {\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateSlot = function () {\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateDisplay = function (textureAtlas, fullName, pivotX, pivotY) {\r\n                return null;\r\n            };\r\n            return BaseFactory;\r\n        })(events.EventDispatcher);\r\n        factorys.BaseFactory = BaseFactory;\r\n    })(dragonBones.factorys || (dragonBones.factorys = {}));\r\n    var factorys = dragonBones.factorys;\r\n\r\n    (function (utils) {\r\n        var ConstValues = (function () {\r\n            function ConstValues() {\r\n            }\r\n            ConstValues.ANGLE_TO_RADIAN = Math.PI / 180;\r\n\r\n            ConstValues.DRAGON_BONES = \"dragonBones\";\r\n            ConstValues.ARMATURE = \"armature\";\r\n            ConstValues.SKIN = \"skin\";\r\n            ConstValues.BONE = \"bone\";\r\n            ConstValues.SLOT = \"slot\";\r\n            ConstValues.DISPLAY = \"display\";\r\n            ConstValues.ANIMATION = \"animation\";\r\n            ConstValues.TIMELINE = \"timeline\";\r\n            ConstValues.FRAME = \"frame\";\r\n            ConstValues.TRANSFORM = \"transform\";\r\n            ConstValues.COLOR_TRANSFORM = \"colorTransform\";\r\n\r\n            ConstValues.TEXTURE_ATLAS = \"TextureAtlas\";\r\n            ConstValues.SUB_TEXTURE = \"SubTexture\";\r\n\r\n            ConstValues.A_VERSION = \"version\";\r\n            ConstValues.A_IMAGE_PATH = \"imagePath\";\r\n            ConstValues.A_FRAME_RATE = \"frameRate\";\r\n            ConstValues.A_NAME = \"name\";\r\n            ConstValues.A_PARENT = \"parent\";\r\n            ConstValues.A_LENGTH = \"length\";\r\n            ConstValues.A_TYPE = \"type\";\r\n            ConstValues.A_FADE_IN_TIME = \"fadeInTime\";\r\n            ConstValues.A_DURATION = \"duration\";\r\n            ConstValues.A_SCALE = \"scale\";\r\n            ConstValues.A_OFFSET = \"offset\";\r\n            ConstValues.A_LOOP = \"loop\";\r\n            ConstValues.A_EVENT = \"event\";\r\n            ConstValues.A_SOUND = \"sound\";\r\n            ConstValues.A_ACTION = \"action\";\r\n            ConstValues.A_HIDE = \"hide\";\r\n            ConstValues.A_TWEEN_EASING = \"tweenEasing\";\r\n            ConstValues.A_TWEEN_ROTATE = \"tweenRotate\";\r\n            ConstValues.A_DISPLAY_INDEX = \"displayIndex\";\r\n            ConstValues.A_Z_ORDER = \"z\";\r\n            ConstValues.A_WIDTH = \"width\";\r\n            ConstValues.A_HEIGHT = \"height\";\r\n            ConstValues.A_X = \"x\";\r\n            ConstValues.A_Y = \"y\";\r\n            ConstValues.A_SKEW_X = \"skX\";\r\n            ConstValues.A_SKEW_Y = \"skY\";\r\n            ConstValues.A_SCALE_X = \"scX\";\r\n            ConstValues.A_SCALE_Y = \"scY\";\r\n            ConstValues.A_PIVOT_X = \"pX\";\r\n            ConstValues.A_PIVOT_Y = \"pY\";\r\n            ConstValues.A_ALPHA_OFFSET = \"aO\";\r\n            ConstValues.A_RED_OFFSET = \"rO\";\r\n            ConstValues.A_GREEN_OFFSET = \"gO\";\r\n            ConstValues.A_BLUE_OFFSET = \"bO\";\r\n            ConstValues.A_ALPHA_MULTIPLIER = \"aM\";\r\n            ConstValues.A_RED_MULTIPLIER = \"rM\";\r\n            ConstValues.A_GREEN_MULTIPLIER = \"gM\";\r\n            ConstValues.A_BLUE_MULTIPLIER = \"bM\";\r\n            return ConstValues;\r\n        })();\r\n        utils.ConstValues = ConstValues;\r\n\r\n        var TransformUtil = (function () {\r\n            function TransformUtil() {\r\n            }\r\n            TransformUtil.transformPointWithParent = function (transform, parent) {\r\n                var helpMatrix = TransformUtil._helpMatrix;\r\n                TransformUtil.transformToMatrix(parent, helpMatrix);\r\n                helpMatrix.invert();\r\n\r\n                var x = transform.x;\r\n                var y = transform.y;\r\n\r\n                transform.x = helpMatrix.a * x + helpMatrix.c * y + helpMatrix.tx;\r\n                transform.y = helpMatrix.d * y + helpMatrix.b * x + helpMatrix.ty;\r\n\r\n                transform.skewX = TransformUtil.formatRadian(transform.skewX - parent.skewX);\r\n                transform.skewY = TransformUtil.formatRadian(transform.skewY - parent.skewY);\r\n            };\r\n\r\n            TransformUtil.transformToMatrix = function (transform, matrix) {\r\n                matrix.a = transform.scaleX * Math.cos(transform.skewY);\r\n                matrix.b = transform.scaleX * Math.sin(transform.skewY);\r\n                matrix.c = -transform.scaleY * Math.sin(transform.skewX);\r\n                matrix.d = transform.scaleY * Math.cos(transform.skewX);\r\n                matrix.tx = transform.x;\r\n                matrix.ty = transform.y;\r\n            };\r\n\r\n            TransformUtil.formatRadian = function (radian) {\r\n                radian %= TransformUtil.DOUBLE_PI;\r\n                if (radian > Math.PI) {\r\n                    radian -= TransformUtil.DOUBLE_PI;\r\n                }\r\n                if (radian < -Math.PI) {\r\n                    radian += TransformUtil.DOUBLE_PI;\r\n                }\r\n                return radian;\r\n            };\r\n            TransformUtil.DOUBLE_PI = Math.PI * 2;\r\n            TransformUtil._helpMatrix = new geom.Matrix();\r\n            return TransformUtil;\r\n        })();\r\n        utils.TransformUtil = TransformUtil;\r\n\r\n        var DBDataUtil = (function () {\r\n            function DBDataUtil() {\r\n            }\r\n            DBDataUtil.transformArmatureData = function (armatureData) {\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var i = boneDataList.length;\r\n                var boneData;\r\n                var parentBoneData;\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    if (boneData.parent) {\r\n                        parentBoneData = armatureData.getBoneData(boneData.parent);\r\n                        if (parentBoneData) {\r\n                            boneData.transform.copy(boneData.global);\r\n                            TransformUtil.transformPointWithParent(boneData.transform, parentBoneData.global);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            DBDataUtil.transformArmatureDataAnimations = function (armatureData) {\r\n                var animationDataList = armatureData.getAnimationDataList();\r\n                var i = animationDataList.length;\r\n                while (i--) {\r\n                    DBDataUtil.transformAnimationData(animationDataList[i], armatureData);\r\n                }\r\n            };\r\n\r\n            DBDataUtil.transformAnimationData = function (animationData, armatureData) {\r\n                var skinData = armatureData.getSkinData(null);\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var slotDataList = skinData.getSlotDataList();\r\n                var i = boneDataList.length;\r\n\r\n                var boneData;\r\n                var timeline;\r\n                var slotData;\r\n                var displayData;\r\n                var parentTimeline;\r\n                var frameList;\r\n                var originTransform;\r\n                var originPivot;\r\n                var prevFrame;\r\n                var frame;\r\n                var frameListLength;\r\n\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    timeline = animationData.getTimeline(boneData.name);\r\n                    if (!timeline) {\r\n                        continue;\r\n                    }\r\n\r\n                    slotData = null;\r\n\r\n                    for (var slotIndex in slotDataList) {\r\n                        slotData = slotDataList[slotIndex];\r\n                        if (slotData.parent == boneData.name) {\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    parentTimeline = boneData.parent ? animationData.getTimeline(boneData.parent) : null;\r\n\r\n                    frameList = timeline.getFrameList();\r\n\r\n                    originTransform = null;\r\n                    originPivot = null;\r\n                    prevFrame = null;\r\n                    frameListLength = frameList.length;\r\n                    for (var j = 0; j < frameListLength; j++) {\r\n                        frame = frameList[j];\r\n                        if (parentTimeline) {\r\n                            DBDataUtil._helpTransform1.copy(frame.global);\r\n\r\n                            DBDataUtil.getTimelineTransform(parentTimeline, frame.position, DBDataUtil._helpTransform2);\r\n                            TransformUtil.transformPointWithParent(DBDataUtil._helpTransform1, DBDataUtil._helpTransform2);\r\n\r\n                            frame.transform.copy(DBDataUtil._helpTransform1);\r\n                        } else {\r\n                            frame.transform.copy(frame.global);\r\n                        }\r\n\r\n                        frame.transform.x -= boneData.transform.x;\r\n                        frame.transform.y -= boneData.transform.y;\r\n                        frame.transform.skewX -= boneData.transform.skewX;\r\n                        frame.transform.skewY -= boneData.transform.skewY;\r\n                        frame.transform.scaleX -= boneData.transform.scaleX;\r\n                        frame.transform.scaleY -= boneData.transform.scaleY;\r\n\r\n                        if (!timeline.transformed) {\r\n                            if (slotData) {\r\n                                frame.zOrder -= slotData.zOrder;\r\n                            }\r\n                        }\r\n\r\n                        if (!originTransform) {\r\n                            originTransform = timeline.originTransform;\r\n                            originTransform.copy(frame.transform);\r\n                            originTransform.skewX = TransformUtil.formatRadian(originTransform.skewX);\r\n                            originTransform.skewY = TransformUtil.formatRadian(originTransform.skewY);\r\n                            originPivot = timeline.originPivot;\r\n                            originPivot.x = frame.pivot.x;\r\n                            originPivot.y = frame.pivot.y;\r\n                        }\r\n\r\n                        frame.transform.x -= originTransform.x;\r\n                        frame.transform.y -= originTransform.y;\r\n                        frame.transform.skewX = TransformUtil.formatRadian(frame.transform.skewX - originTransform.skewX);\r\n                        frame.transform.skewY = TransformUtil.formatRadian(frame.transform.skewY - originTransform.skewY);\r\n                        frame.transform.scaleX -= originTransform.scaleX;\r\n                        frame.transform.scaleY -= originTransform.scaleY;\r\n\r\n                        if (!timeline.transformed) {\r\n                            frame.pivot.x -= originPivot.x;\r\n                            frame.pivot.y -= originPivot.y;\r\n                        }\r\n\r\n                        if (prevFrame) {\r\n                            var dLX = frame.transform.skewX - prevFrame.transform.skewX;\r\n\r\n                            if (prevFrame.tweenRotate) {\r\n                                if (prevFrame.tweenRotate > 0) {\r\n                                    if (dLX < 0) {\r\n                                        frame.transform.skewX += Math.PI * 2;\r\n                                        frame.transform.skewY += Math.PI * 2;\r\n                                    }\r\n\r\n                                    if (prevFrame.tweenRotate > 1) {\r\n                                        frame.transform.skewX += Math.PI * 2 * (prevFrame.tweenRotate - 1);\r\n                                        frame.transform.skewY += Math.PI * 2 * (prevFrame.tweenRotate - 1);\r\n                                    }\r\n                                } else {\r\n                                    if (dLX > 0) {\r\n                                        frame.transform.skewX -= Math.PI * 2;\r\n                                        frame.transform.skewY -= Math.PI * 2;\r\n                                    }\r\n\r\n                                    if (prevFrame.tweenRotate < 1) {\r\n                                        frame.transform.skewX += Math.PI * 2 * (prevFrame.tweenRotate + 1);\r\n                                        frame.transform.skewY += Math.PI * 2 * (prevFrame.tweenRotate + 1);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                frame.transform.skewX = prevFrame.transform.skewX + TransformUtil.formatRadian(frame.transform.skewX - prevFrame.transform.skewX);\r\n                                frame.transform.skewY = prevFrame.transform.skewY + TransformUtil.formatRadian(frame.transform.skewY - prevFrame.transform.skewY);\r\n                            }\r\n                        }\r\n\r\n                        prevFrame = frame;\r\n                    }\r\n                    timeline.transformed = true;\r\n                }\r\n            };\r\n\r\n            DBDataUtil.getTimelineTransform = function (timeline, position, retult) {\r\n                var frameList = timeline.getFrameList();\r\n                var i = frameList.length;\r\n\r\n                var currentFrame;\r\n                var tweenEasing;\r\n                var progress;\r\n                var nextFrame;\r\n                while (i--) {\r\n                    currentFrame = frameList[i];\r\n                    if (currentFrame.position <= position && currentFrame.position + currentFrame.duration > position) {\r\n                        tweenEasing = currentFrame.tweenEasing;\r\n                        if (i == frameList.length - 1 || isNaN(tweenEasing) || position == currentFrame.position) {\r\n                            retult.copy(currentFrame.global);\r\n                        } else {\r\n                            progress = (position - currentFrame.position) / currentFrame.duration;\r\n                            if (tweenEasing) {\r\n                                progress = animation.TimelineState.getEaseValue(progress, tweenEasing);\r\n                            }\r\n\r\n                            nextFrame = frameList[i + 1];\r\n\r\n                            retult.x = currentFrame.global.x + (nextFrame.global.x - currentFrame.global.x) * progress;\r\n                            retult.y = currentFrame.global.y + (nextFrame.global.y - currentFrame.global.y) * progress;\r\n                            retult.skewX = TransformUtil.formatRadian(currentFrame.global.skewX + (nextFrame.global.skewX - currentFrame.global.skewX) * progress);\r\n                            retult.skewY = TransformUtil.formatRadian(currentFrame.global.skewY + (nextFrame.global.skewY - currentFrame.global.skewY) * progress);\r\n                            retult.scaleX = currentFrame.global.scaleX + (nextFrame.global.scaleX - currentFrame.global.scaleX) * progress;\r\n                            retult.scaleY = currentFrame.global.scaleY + (nextFrame.global.scaleY - currentFrame.global.scaleY) * progress;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            DBDataUtil.addHideTimeline = function (animationData, armatureData) {\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var i = boneDataList.length;\r\n\r\n                var boneData;\r\n                var boneName;\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    boneName = boneData.name;\r\n                    if (!animationData.getTimeline(boneName)) {\r\n                        animationData.addTimeline(objects.TransformTimeline.HIDE_TIMELINE, boneName);\r\n                    }\r\n                }\r\n            };\r\n            DBDataUtil._helpTransform1 = new objects.DBTransform();\r\n            DBDataUtil._helpTransform2 = new objects.DBTransform();\r\n            return DBDataUtil;\r\n        })();\r\n        utils.DBDataUtil = DBDataUtil;\r\n    })(dragonBones.utils || (dragonBones.utils = {}));\r\n    var utils = dragonBones.utils;\r\n\r\n    var DBObject = (function () {\r\n        function DBObject() {\r\n            this.global = new objects.DBTransform();\r\n            this.origin = new objects.DBTransform();\r\n            this.offset = new objects.DBTransform();\r\n            this.tween = new objects.DBTransform();\r\n            this.tween.scaleX = this.tween.scaleY = 0;\r\n\r\n            this._globalTransformMatrix = new geom.Matrix();\r\n\r\n            this._visible = true;\r\n            this._isColorChanged = false;\r\n            this._isDisplayOnStage = false;\r\n            this._scaleType = 0;\r\n\r\n            this.fixedRotation = false;\r\n        }\r\n        DBObject.prototype.getVisible = function () {\r\n            return this._visible;\r\n        };\r\n        DBObject.prototype.setVisible = function (value) {\r\n            this._visible = value;\r\n        };\r\n\r\n        DBObject.prototype._setParent = function (value) {\r\n            this.parent = value;\r\n        };\r\n\r\n        DBObject.prototype._setArmature = function (value) {\r\n            if (this.armature) {\r\n                this.armature._removeDBObject(this);\r\n            }\r\n            this.armature = value;\r\n            if (this.armature) {\r\n                this.armature._addDBObject(this);\r\n            }\r\n        };\r\n\r\n        DBObject.prototype.dispose = function () {\r\n            this.parent = null;\r\n            this.armature = null;\r\n            this.global = null;\r\n            this.origin = null;\r\n            this.offset = null;\r\n            this.tween = null;\r\n            this._globalTransformMatrix = null;\r\n        };\r\n\r\n        DBObject.prototype._update = function () {\r\n            this.global.scaleX = (this.origin.scaleX + this.tween.scaleX) * this.offset.scaleX;\r\n            this.global.scaleY = (this.origin.scaleY + this.tween.scaleY) * this.offset.scaleY;\r\n\r\n            if (this.parent) {\r\n                var x = this.origin.x + this.offset.x + this.tween.x;\r\n                var y = this.origin.y + this.offset.y + this.tween.y;\r\n                var parentMatrix = this.parent._globalTransformMatrix;\r\n\r\n                this._globalTransformMatrix.tx = this.global.x = parentMatrix.a * x + parentMatrix.c * y + parentMatrix.tx;\r\n                this._globalTransformMatrix.ty = this.global.y = parentMatrix.d * y + parentMatrix.b * x + parentMatrix.ty;\r\n\r\n                if (this.fixedRotation) {\r\n                    this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX;\r\n                    this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY;\r\n                } else {\r\n                    this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX + this.parent.global.skewX;\r\n                    this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY + this.parent.global.skewY;\r\n                }\r\n\r\n                if (this.parent.scaleMode >= this._scaleType) {\r\n                    this.global.scaleX *= this.parent.global.scaleX;\r\n                    this.global.scaleY *= this.parent.global.scaleY;\r\n                }\r\n            } else {\r\n                this._globalTransformMatrix.tx = this.global.x = this.origin.x + this.offset.x + this.tween.x;\r\n                this._globalTransformMatrix.ty = this.global.y = this.origin.y + this.offset.y + this.tween.y;\r\n\r\n                this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX;\r\n                this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY;\r\n            }\r\n            this._globalTransformMatrix.a = this.global.scaleX * Math.cos(this.global.skewY);\r\n            this._globalTransformMatrix.b = this.global.scaleX * Math.sin(this.global.skewY);\r\n            this._globalTransformMatrix.c = -this.global.scaleY * Math.sin(this.global.skewX);\r\n            this._globalTransformMatrix.d = this.global.scaleY * Math.cos(this.global.skewX);\r\n        };\r\n        return DBObject;\r\n    })();\r\n    dragonBones.DBObject = DBObject;\r\n\r\n    var Slot = (function (_super) {\r\n        __extends(Slot, _super);\r\n        function Slot(displayBrideg) {\r\n            _super.call(this);\r\n            this._displayBridge = displayBrideg;\r\n            this._displayList = [];\r\n            this._displayIndex = -1;\r\n            this._scaleType = 1;\r\n\r\n            this._originZOrder = 0;\r\n            this._tweenZorder = 0;\r\n            this._offsetZOrder = 0;\r\n\r\n            this._isDisplayOnStage = false;\r\n            this._isHideDisplay = false;\r\n        }\r\n        Slot.prototype.getZOrder = function () {\r\n            return this._originZOrder + this._tweenZorder + this._offsetZOrder;\r\n        };\r\n\r\n        Slot.prototype.setZOrder = function (value) {\r\n            if (this.getZOrder() != value) {\r\n                this._offsetZOrder = value - this._originZOrder - this._tweenZorder;\r\n                if (this.armature) {\r\n                    this.armature._slotsZOrderChanged = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        Slot.prototype.getDisplay = function () {\r\n            var display = this._displayList[this._displayIndex];\r\n            if (display instanceof Armature) {\r\n                return (display).getDisplay();\r\n            }\r\n            return display;\r\n        };\r\n        Slot.prototype.setDisplay = function (value) {\r\n            this._displayList[this._displayIndex] = value;\r\n            this._setDisplay(value);\r\n        };\r\n\r\n        Slot.prototype.getChildArmature = function () {\r\n            var display = this._displayList[this._displayIndex];\r\n            if (display instanceof Armature) {\r\n                return display;\r\n            }\r\n            return null;\r\n        };\r\n        Slot.prototype.setChildArmature = function (value) {\r\n            this._displayList[this._displayIndex] = value;\r\n            if (value) {\r\n                this._setDisplay(value.getDisplay());\r\n            }\r\n        };\r\n\r\n        Slot.prototype.getDisplayList = function () {\r\n            return this._displayList;\r\n        };\r\n        Slot.prototype.setDisplayList = function (value) {\r\n            if (!value) {\r\n                throw new Error();\r\n            }\r\n            var i = this._displayList.length = value.length;\r\n            while (i--) {\r\n                this._displayList[i] = value[i];\r\n            }\r\n            if (this._displayIndex >= 0) {\r\n                var displayIndexBackup = this._displayIndex;\r\n                this._displayIndex = -1;\r\n                this._changeDisplay(displayIndexBackup);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._setDisplay = function (display) {\r\n            if (this._displayBridge.getDisplay()) {\r\n                this._displayBridge.setDisplay(display);\r\n            } else {\r\n                this._displayBridge.setDisplay(display);\r\n                if (this.armature) {\r\n                    this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n                    this.armature._slotsZOrderChanged = true;\r\n                }\r\n            }\r\n\r\n            this.updateChildArmatureAnimation();\r\n\r\n            if (!this._isHideDisplay && this._displayBridge.getDisplay()) {\r\n                this._isDisplayOnStage = true;\r\n            } else {\r\n                this._isDisplayOnStage = false;\r\n            }\r\n        };\r\n\r\n        Slot.prototype._changeDisplay = function (displayIndex) {\r\n            if (displayIndex < 0) {\r\n                if (!this._isHideDisplay) {\r\n                    this._isHideDisplay = true;\r\n                    this._displayBridge.removeDisplay();\r\n                    this.updateChildArmatureAnimation();\r\n                }\r\n            } else {\r\n                if (this._isHideDisplay) {\r\n                    this._isHideDisplay = false;\r\n                    var changeShowState = true;\r\n                    if (this.armature) {\r\n                        this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n                        this.armature._slotsZOrderChanged = true;\r\n                    }\r\n                }\r\n\r\n                var length = this._displayList.length;\r\n                if (displayIndex >= length && length > 0) {\r\n                    displayIndex = length - 1;\r\n                }\r\n                if (this._displayIndex != displayIndex) {\r\n                    this._displayIndex = displayIndex;\r\n\r\n                    var display = this._displayList[this._displayIndex];\r\n                    if (display instanceof Armature) {\r\n                        this._setDisplay((display).getDisplay());\r\n                    } else {\r\n                        this._setDisplay(display);\r\n                    }\r\n\r\n                    if (this._dislayDataList && this._displayIndex <= this._dislayDataList.length) {\r\n                        this.origin.copy(this._dislayDataList[this._displayIndex].transform);\r\n                    }\r\n                } else if (changeShowState) {\r\n                    this.updateChildArmatureAnimation();\r\n                }\r\n            }\r\n\r\n            if (!this._isHideDisplay && this._displayBridge.getDisplay()) {\r\n                this._isDisplayOnStage = true;\r\n            } else {\r\n                this._isDisplayOnStage = false;\r\n            }\r\n        };\r\n\r\n        Slot.prototype.setVisible = function (value) {\r\n            if (value != this._visible) {\r\n                this._visible = value;\r\n                this._updateVisible(this._visible);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._setArmature = function (value) {\r\n            _super.prototype._setArmature.call(this, value);\r\n            if (this.armature) {\r\n                this.armature._slotsZOrderChanged = true;\r\n                this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n            } else {\r\n                this._displayBridge.removeDisplay();\r\n            }\r\n        };\r\n\r\n        Slot.prototype.dispose = function () {\r\n            if (!this._displayBridge) {\r\n                return;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n\r\n            this._displayBridge.dispose();\r\n            this._displayList.length = 0;\r\n\r\n            this._displayBridge = null;\r\n            this._displayList = null;\r\n            this._dislayDataList = null;\r\n        };\r\n\r\n        Slot.prototype._update = function () {\r\n            _super.prototype._update.call(this);\r\n            if (this._isDisplayOnStage) {\r\n                var pivotX = this.parent._tweenPivot.x;\r\n                var pivotY = this.parent._tweenPivot.y;\r\n                if (pivotX || pivotY) {\r\n                    var parentMatrix = this.parent._globalTransformMatrix;\r\n                    this._globalTransformMatrix.tx += parentMatrix.a * pivotX + parentMatrix.c * pivotY;\r\n                    this._globalTransformMatrix.ty += parentMatrix.b * pivotX + parentMatrix.d * pivotY;\r\n                }\r\n\r\n                this._displayBridge.updateTransform(this._globalTransformMatrix, this.global);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._updateVisible = function (value) {\r\n            this._displayBridge.setVisible(this.parent.getVisible() && this._visible && value);\r\n        };\r\n\r\n        Slot.prototype.updateChildArmatureAnimation = function () {\r\n            var childArmature = this.getChildArmature();\r\n\r\n            if (childArmature) {\r\n                if (this._isHideDisplay) {\r\n                    childArmature.animation.stop();\r\n                    childArmature.animation._lastAnimationState = null;\r\n                } else {\r\n                    var lastAnimationName = this.armature ? this.armature.animation.getLastAnimationName() : null;\r\n                    if (lastAnimationName && childArmature.animation.hasAnimation(lastAnimationName)) {\r\n                        childArmature.animation.gotoAndPlay(lastAnimationName);\r\n                    } else {\r\n                        childArmature.animation.play();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return Slot;\r\n    })(DBObject);\r\n    dragonBones.Slot = Slot;\r\n\r\n    var Bone = (function (_super) {\r\n        __extends(Bone, _super);\r\n        function Bone() {\r\n            _super.call(this);\r\n            this._children = [];\r\n            this._scaleType = 2;\r\n\r\n            this._tweenPivot = new geom.Point();\r\n\r\n            this.scaleMode = 1;\r\n        }\r\n        Bone.prototype.setVisible = function (value) {\r\n            if (this._visible != value) {\r\n                this._visible = value;\r\n                var i = this._children.length;\r\n                while (i--) {\r\n                    var child = this._children[i];\r\n                    if (child instanceof Slot) {\r\n                        (child)._updateVisible(this._visible);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        Bone.prototype._setArmature = function (value) {\r\n            _super.prototype._setArmature.call(this, value);\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                this._children[i]._setArmature(this.armature);\r\n            }\r\n        };\r\n\r\n        Bone.prototype.dispose = function () {\r\n            if (!this._children) {\r\n                return;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                this._children[i].dispose();\r\n            }\r\n            this._children.length = 0;\r\n\r\n            this._children = null;\r\n            this._tweenPivot = null;\r\n\r\n            this.slot = null;\r\n        };\r\n\r\n        Bone.prototype.contains = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n            if (child == this) {\r\n                return false;\r\n            }\r\n            var ancestor = child;\r\n            while (!(ancestor == this || ancestor == null)) {\r\n                ancestor = ancestor.parent;\r\n            }\r\n            return ancestor == this;\r\n        };\r\n\r\n        Bone.prototype.addChild = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (child == this || (child instanceof Bone && (child).contains(this))) {\r\n                throw new Error(\"An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)\");\r\n            }\r\n\r\n            if (child.parent) {\r\n                child.parent.removeChild(child);\r\n            }\r\n            this._children[this._children.length] = child;\r\n            child._setParent(this);\r\n            child._setArmature(this.armature);\r\n\r\n            if (!this.slot && child instanceof Slot) {\r\n                this.slot = child;\r\n            }\r\n        };\r\n\r\n        Bone.prototype.removeChild = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n\r\n            var index = this._children.indexOf(child);\r\n            if (index >= 0) {\r\n                this._children.splice(index, 1);\r\n                child._setParent(null);\r\n                child._setArmature(null);\r\n\r\n                if (child == this.slot) {\r\n                    this.slot = null;\r\n                }\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Bone.prototype.getSlots = function () {\r\n            var slotList = [];\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                if (this._children[i] instanceof Slot) {\r\n                    slotList.unshift(this._children[i]);\r\n                }\r\n            }\r\n            return slotList;\r\n        };\r\n\r\n        Bone.prototype._arriveAtFrame = function (frame, timelineState, animationState, isCross) {\r\n            if (frame) {\r\n                var mixingType = animationState.getMixingTransform(name);\r\n                if (animationState.displayControl && (mixingType == 2 || mixingType == -1)) {\r\n                    if (!this.displayController || this.displayController == animationState.name) {\r\n                        var tansformFrame = frame;\r\n                        if (this.slot) {\r\n                            var displayIndex = tansformFrame.displayIndex;\r\n                            if (displayIndex >= 0) {\r\n                                if (!isNaN(tansformFrame.zOrder) && tansformFrame.zOrder != this.slot._tweenZorder) {\r\n                                    this.slot._tweenZorder = tansformFrame.zOrder;\r\n                                    this.armature._slotsZOrderChanged = true;\r\n                                }\r\n                            }\r\n                            this.slot._changeDisplay(displayIndex);\r\n                            this.slot._updateVisible(tansformFrame.visible);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (frame.event && this.armature.hasEventListener(events.FrameEvent.BONE_FRAME_EVENT)) {\r\n                    var frameEvent = new events.FrameEvent(events.FrameEvent.BONE_FRAME_EVENT);\r\n                    frameEvent.bone = this;\r\n                    frameEvent.animationState = animationState;\r\n                    frameEvent.frameLabel = frame.event;\r\n                    this.armature._eventList.push(frameEvent);\r\n                }\r\n\r\n                if (frame.sound && Bone._soundManager.hasEventListener(events.SoundEvent.SOUND)) {\r\n                    var soundEvent = new events.SoundEvent(events.SoundEvent.SOUND);\r\n                    soundEvent.armature = this.armature;\r\n                    soundEvent.animationState = animationState;\r\n                    soundEvent.sound = frame.sound;\r\n                    Bone._soundManager.dispatchEvent(soundEvent);\r\n                }\r\n\r\n                if (frame.action) {\r\n                    for (var index in this._children) {\r\n                        if (this._children[index] instanceof Slot) {\r\n                            var childArmature = (this._children[index]).getChildArmature();\r\n                            if (childArmature) {\r\n                                childArmature.animation.gotoAndPlay(frame.action);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.slot) {\r\n                    this.slot._changeDisplay(-1);\r\n                }\r\n            }\r\n        };\r\n\r\n        Bone.prototype._updateColor = function (aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier, isColorChanged) {\r\n            if (isColorChanged || this._isColorChanged) {\r\n                this.slot._displayBridge.updateColor(aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier);\r\n            }\r\n            this._isColorChanged = isColorChanged;\r\n        };\r\n        Bone._soundManager = events.SoundEventManager.getInstance();\r\n        return Bone;\r\n    })(DBObject);\r\n    dragonBones.Bone = Bone;\r\n\r\n    var Armature = (function (_super) {\r\n        __extends(Armature, _super);\r\n        function Armature(display) {\r\n            _super.call(this);\r\n\r\n            this.animation = new animation.Animation(this);\r\n\r\n            this._display = display;\r\n            this._slotsZOrderChanged = false;\r\n            this._slotList = [];\r\n            this._boneList = [];\r\n            this._eventList = [];\r\n        }\r\n        Armature.prototype.getDisplay = function () {\r\n            return this._display;\r\n        };\r\n\r\n        Armature.prototype.dispose = function () {\r\n            if (!this.animation) {\r\n                return;\r\n            }\r\n\r\n            this.animation.dispose();\r\n\r\n            var i = this._slotList.length;\r\n            while (i--) {\r\n                this._slotList[i].dispose();\r\n            }\r\n\r\n            i = this._boneList.length;\r\n            while (i--) {\r\n                this._boneList[i].dispose();\r\n            }\r\n\r\n            this._slotList.length = 0;\r\n            this._boneList.length = 0;\r\n            this._eventList.length = 0;\r\n\r\n            this._slotList = null;\r\n            this._boneList = null;\r\n            this._eventList = null;\r\n            this._display = null;\r\n\r\n            this.animation = null;\r\n        };\r\n\r\n        Armature.prototype.advanceTime = function (passedTime) {\r\n            this.animation.advanceTime(passedTime);\r\n            passedTime *= this.animation.timeScale;\r\n\r\n            var i = this._boneList.length;\r\n            while (i--) {\r\n                this._boneList[i]._update();\r\n            }\r\n            i = this._slotList.length;\r\n            var slot;\r\n            while (i--) {\r\n                slot = this._slotList[i];\r\n                slot._update();\r\n                if (slot._isDisplayOnStage) {\r\n                    var childArmature = slot.getChildArmature();\r\n                    if (childArmature) {\r\n                        childArmature.advanceTime(passedTime);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._slotsZOrderChanged) {\r\n                this.updateSlotsZOrder();\r\n                if (this.hasEventListener(events.ArmatureEvent.Z_ORDER_UPDATED)) {\r\n                    this.dispatchEvent(new events.ArmatureEvent(events.ArmatureEvent.Z_ORDER_UPDATED));\r\n                }\r\n            }\r\n\r\n            if (this._eventList.length) {\r\n                var length = this._eventList.length;\r\n                for (i = 0; i < length; i++) {\r\n                    this.dispatchEvent(this._eventList[i]);\r\n                }\r\n                this._eventList.length = 0;\r\n            }\r\n        };\r\n\r\n        Armature.prototype.getSlots = function (returnCopy) {\r\n            if (typeof returnCopy === \"undefined\") { returnCopy = true; }\r\n            return returnCopy ? this._slotList.concat() : this._slotList;\r\n        };\r\n\r\n        Armature.prototype.getBones = function (returnCopy) {\r\n            if (typeof returnCopy === \"undefined\") { returnCopy = true; }\r\n            return returnCopy ? this._boneList.concat() : this._boneList;\r\n        };\r\n\r\n        Armature.prototype.getSlot = function (slotName) {\r\n            var i = this._slotList.length;\r\n            while (i--) {\r\n                if (this._slotList[i].name == slotName) {\r\n                    return this._slotList[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.getSlotByDisplay = function (display) {\r\n            if (display) {\r\n                var i = this._slotList.length;\r\n                while (i--) {\r\n                    if (this._slotList[i].getDisplay() == display) {\r\n                        return this._slotList[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.removeSlot = function (slot) {\r\n            if (!slot) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (this._slotList.indexOf(slot) >= 0) {\r\n                slot.parent.removeChild(slot);\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Armature.prototype.removeSlotByName = function (slotName) {\r\n            if (!slotName) {\r\n                return;\r\n            }\r\n\r\n            var slot = this.getSlot(slotName);\r\n            if (slot) {\r\n                this.removeSlot(slot);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.getBone = function (boneName) {\r\n            var i = this._boneList.length;\r\n            while (i--) {\r\n                if (this._boneList[i].name == boneName) {\r\n                    return this._boneList[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.getBoneByDisplay = function (display) {\r\n            var slot = this.getSlotByDisplay(display);\r\n            return slot ? slot.parent : null;\r\n        };\r\n\r\n        Armature.prototype.removeBone = function (bone) {\r\n            if (!bone) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (this._boneList.indexOf(bone) >= 0) {\r\n                if (bone.parent) {\r\n                    bone.parent.removeChild(bone);\r\n                } else {\r\n                    bone._setArmature(null);\r\n                }\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Armature.prototype.removeBoneByName = function (boneName) {\r\n            if (!boneName) {\r\n                return;\r\n            }\r\n\r\n            var bone = this.getBone(boneName);\r\n            if (bone) {\r\n                this.removeBone(bone);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.addChild = function (object, parentName) {\r\n            if (!object) {\r\n                throw new Error();\r\n            }\r\n            if (parentName) {\r\n                var boneParent = this.getBone(parentName);\r\n                if (boneParent) {\r\n                    boneParent.addChild(object);\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            } else {\r\n                if (object.parent) {\r\n                    object.parent.removeChild(object);\r\n                }\r\n                object._setArmature(this);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.updateSlotsZOrder = function () {\r\n            this._slotList.sort(this.sortSlot);\r\n            var i = this._slotList.length;\r\n            var slot;\r\n            while (i--) {\r\n                slot = this._slotList[i];\r\n                if (slot._isDisplayOnStage) {\r\n                    slot._displayBridge.addDisplay(this._display, -1);\r\n                }\r\n            }\r\n\r\n            this._slotsZOrderChanged = false;\r\n        };\r\n\r\n        Armature.prototype._addDBObject = function (object) {\r\n            if (object instanceof Slot) {\r\n                var slot = object;\r\n                if (this._slotList.indexOf(slot) < 0) {\r\n                    this._slotList[this._slotList.length] = slot;\r\n                }\r\n            } else if (object instanceof Bone) {\r\n                var bone = object;\r\n                if (this._boneList.indexOf(bone) < 0) {\r\n                    this._boneList[this._boneList.length] = bone;\r\n                    this._sortBoneList();\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype._removeDBObject = function (object) {\r\n            if (object instanceof Slot) {\r\n                var slot = object;\r\n                var index = this._slotList.indexOf(slot);\r\n                if (index >= 0) {\r\n                    this._slotList.splice(index, 1);\r\n                }\r\n            } else if (object instanceof Bone) {\r\n                var bone = object;\r\n                index = this._boneList.indexOf(bone);\r\n                if (index >= 0) {\r\n                    this._boneList.splice(index, 1);\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype._sortBoneList = function () {\r\n            var i = this._boneList.length;\r\n            if (i == 0) {\r\n                return;\r\n            }\r\n            var helpArray = [];\r\n            var level;\r\n            var bone;\r\n            var boneParent;\r\n            while (i--) {\r\n                level = 0;\r\n                bone = this._boneList[i];\r\n                boneParent = bone;\r\n                while (boneParent) {\r\n                    level++;\r\n                    boneParent = boneParent.parent;\r\n                }\r\n                helpArray[i] = { level: level, bone: bone };\r\n            }\r\n\r\n            helpArray.sort(this.sortBone);\r\n\r\n            i = helpArray.length;\r\n            while (i--) {\r\n                this._boneList[i] = helpArray[i].bone;\r\n            }\r\n        };\r\n\r\n        Armature.prototype._arriveAtFrame = function (frame, timelineState, animationState, isCross) {\r\n            if (frame.event && this.hasEventListener(events.FrameEvent.ANIMATION_FRAME_EVENT)) {\r\n                var frameEvent = new events.FrameEvent(events.FrameEvent.ANIMATION_FRAME_EVENT);\r\n                frameEvent.animationState = animationState;\r\n                frameEvent.frameLabel = frame.event;\r\n                this._eventList.push(frameEvent);\r\n            }\r\n\r\n            if (frame.sound && Armature._soundManager.hasEventListener(events.SoundEvent.SOUND)) {\r\n                var soundEvent = new events.SoundEvent(events.SoundEvent.SOUND);\r\n                soundEvent.armature = this;\r\n                soundEvent.animationState = animationState;\r\n                soundEvent.sound = frame.sound;\r\n                Armature._soundManager.dispatchEvent(soundEvent);\r\n            }\r\n\r\n            if (frame.action) {\r\n                if (animationState.isPlaying) {\r\n                    this.animation.gotoAndPlay(frame.action);\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype.sortSlot = function (slot1, slot2) {\r\n            return slot1.getZOrder() < slot2.getZOrder() ? 1 : -1;\r\n        };\r\n\r\n        Armature.prototype.sortBone = function (object1, object2) {\r\n            return object1.level < object2.level ? 1 : -1;\r\n        };\r\n        Armature._soundManager = events.SoundEventManager.getInstance();\r\n        return Armature;\r\n    })(events.EventDispatcher);\r\n    dragonBones.Armature = Armature;\r\n})(dragonBones || (dragonBones = {}));\r\n\r\nmodule.exports = dragonBones;","var DisplayBridge = (function () {\r\n    function DisplayBridge() {\r\n    }\r\n\r\n    DisplayBridge.prototype.getVisible = function () {\r\n        return this._display ? this._display.visible : false;\r\n    };\r\n\r\n    DisplayBridge.prototype.setVisible = function (value) {\r\n        if (this._display) {\r\n            this._display.visible = value;\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.getDisplay = function () {\r\n        return this._display;\r\n    };\r\n\r\n    DisplayBridge.prototype.setDisplay = function (value) {\r\n        if (this._display == value) {\r\n            return;\r\n        }\r\n\r\n        var index = -1;\r\n        if (this._display) {\r\n            var parent = this._display.parent;\r\n            if (parent) {\r\n                index = this._display.parent.children.indexOf(this._display);\r\n            }\r\n            this.removeDisplay();\r\n        }\r\n        this._display = value;\r\n        this.addDisplay(parent, index);\r\n    };\r\n\r\n    DisplayBridge.prototype.dispose = function () {\r\n        this._display = null;\r\n    };\r\n\r\n    DisplayBridge.prototype.updateTransform = function (matrix, transform) {\r\n        this._display.x = transform.x;\r\n        this._display.y = transform.y;\r\n\r\n        this._display.rotation = transform.skewX;\r\n\r\n        this._display.scale.x = transform.scaleX;\r\n        this._display.scale.y = transform.scaleY;\r\n    };\r\n\r\n    DisplayBridge.prototype.updateColor = function (aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier) {\r\n        if (this._display) {\r\n            this._display.alpha = aMultiplier;\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.addDisplay = function (container, index) {\r\n        var parent = container;\r\n        if (parent && this._display) {\r\n            if (index < 0) {\r\n                parent.addChild(this._display);\r\n            } else {\r\n                parent.addChildAt(this._display, Math.min(index, parent.children.length));\r\n            }\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.removeDisplay = function () {\r\n        if (this._display && this._display.parent) {\r\n            this._display.parent.removeChild(this._display);\r\n        }\r\n    };\r\n\r\n    DisplayBridge.RADIAN_TO_ANGLE = 180 / Math.PI;\r\n    return DisplayBridge;\r\n})();\r\n\r\nmodule.exports = DisplayBridge;\r\n","var DisplayObjectContainer = (function (parent) {\r\n    var DisplayObjectContainer = function () {\r\n        parent.call(this);\r\n    };\r\n\r\n    DisplayObjectContainer.prototype = Object.create(parent.prototype);\r\n    DisplayObjectContainer.prototype.constructor = DisplayObjectContainer;\r\n\r\n    DisplayObjectContainer.prototype.updateTransform = function()\r\n    {\r\n        parent.prototype.updateTransform.call(this);\r\n    };\r\n\r\n    return DisplayObjectContainer;\r\n})(PIXI.Container);\r\n\r\nmodule.exports = DisplayObjectContainer;","var Sprite = (function (parent) {\r\n    var Sprite = function (texture) {\r\n        parent.call(this, texture);\r\n    };\r\n\r\n    Sprite.prototype = Object.create(parent.prototype);\r\n    Sprite.prototype.constructor = Sprite;\r\n\r\n    Sprite.prototype.updateTransform = function ()\r\n    {\r\n        parent.prototype.updateTransform.call(this);\r\n    };\r\n\r\n    return Sprite;\r\n})(PIXI.Sprite);\r\n\r\nmodule.exports = Sprite;","var DragonbonesRuntime      = require('../../DragonbonesRuntime/dragonBones'),\r\n    DisplayBridge           = require('../display/DisplayBridge'),\r\n    Sprite                  = require('../display/Sprite');\r\n    DisplayObjectContainer  = require('../display/DisplayObjectContainer');\r\n\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar Factory = (function (_super) {\r\n    __extends(Factory, _super);\r\n\r\n    function Factory() {\r\n        _super.call(this);\r\n    };\r\n\r\n    Factory.prototype._generateArmature = function() {\r\n        var armature = new DragonbonesRuntime.Armature(new DisplayObjectContainer());\r\n        return armature;\r\n    };\r\n\r\n    Factory.prototype._generateSlot = function() {\r\n        var slot = new DragonbonesRuntime.Slot(new DisplayBridge());\r\n        return slot;\r\n    };\r\n\r\n    Factory.prototype._generateDisplay = function(textureAtlas, fullName, pivotX, pivotY) {\r\n        var image = new Sprite(PIXI.utils.TextureCache.dragonbones[this._currentDataName][fullName]);\r\n        image.pivot.x = pivotX;\r\n        image.pivot.y = pivotY;\r\n\r\n        return image;\r\n    };\r\n\r\n    return Factory;\r\n})(DragonbonesRuntime.factorys.BaseFactory);\r\n\r\nmodule.exports = Factory;","var DragonbonesRuntime = require('../DragonbonesRuntime/dragonBones');\r\n\r\n\r\nmodule.exports = {\r\n    display: {\r\n        DisplayBridge: require('./display/DisplayBridge')\r\n    },\r\n    factory: {\r\n        Factory: require('./factories/Factory')\r\n    },\r\n    textures: {\r\n        TextureAtlas: require('./texture/TextureAtlas')\r\n    }\r\n};","var DragonbonesRuntime = require('../../DragonbonesRuntime/dragonBones');\r\n\r\nvar TextureAtlas = (function () {\r\n    function TextureAtlas(image, textureAtlasRawData, scale) {\r\n        if(typeof scale === \"undefined\") {\r\n            scale = 1;\r\n        }\r\n        this._regions = {};\r\n\r\n        this.image = image;\r\n        this.scale = scale;\r\n\r\n        this.parseData(textureAtlasRawData);\r\n    };\r\n\r\n    TextureAtlas.prototype.dispose = function() {\r\n        this.image = null;\r\n        this._regions = null;\r\n    };\r\n\r\n    TextureAtlas.prototype.getRegion = function(subTextureName) {\r\n        return this._regions[subTextureName];\r\n    };\r\n\r\n    TextureAtlas.prototype.parseData = function(textureAtlasRawData) {\r\n        var textureAtlasData = DragonbonesRuntime.objects.DataParser.parseTextureAtlasData(textureAtlasRawData, this.scale);\r\n        this.name = textureAtlasData.__name;\r\n        delete textureAtlasData.__name;\r\n\r\n        for(var subTextureName in textureAtlasData) {\r\n            this._regions[subTextureName] = textureAtlasData[subTextureName];\r\n        }\r\n    };\r\n\r\n    return TextureAtlas;\r\n})();\r\n\r\nmodule.exports = TextureAtlas;\r\n","var Dragonbones = require('../../Dragonbones'),\r\n    DragonbonesRuntime = require('../../DragonbonesRuntime/dragonBones'),\r\n    skeletonParser = require('../loaders/skeletonParser');\r\n\r\nvar Skeleton = (function () {\r\n    var Skeleton = function () {\r\n        this._factory = undefined;\r\n        this._armature = undefined;\r\n        this._display = undefined;\r\n    };\r\n\r\n    Skeleton.makeArmature = function (armatureName, dataName) {\r\n        var skeleton = new Skeleton();\r\n\r\n        skeleton._factory = new Dragonbones.factory.Factory();\r\n        skeleton._factory.addSkeletonData(DragonbonesRuntime.objects.DataParser.parseSkeletonData(skeletonParser.skeletons[dataName]));\r\n\r\n        skeleton._armature = skeleton._factory.buildArmature(armatureName);\r\n\r\n        DragonbonesRuntime.animation.WorldClock.clock.add(skeleton._armature);\r\n\r\n        skeleton._display = skeleton._armature.getDisplay();\r\n\r\n        return skeleton;\r\n    };\r\n\r\n    Object.defineProperties(Skeleton.prototype, {\r\n        animation: {\r\n            get: function () {\r\n                return this._armature.animation;\r\n            }\r\n        },\r\n        display: {\r\n            get: function () {\r\n                return this._display;\r\n            }\r\n        }\r\n    });\r\n\r\n    return Skeleton;\r\n})();\r\n\r\nmodule.exports = Skeleton;\r\n","var DragonbonesRuntime = require('../DragonbonesRuntime/dragonBones');\r\n\r\nmodule.exports = {\r\n    display: {\r\n        Skeleton: require('./display/Skeleton')\r\n    },\r\n    loaders: {\r\n        skeletonParser: require('./loaders/skeletonParser')\r\n    },\r\n    runtime: DragonbonesRuntime\r\n};","var Resource    = PIXI.loaders.Resource,\r\n    async       = PIXI.utils.async,\r\n    AtlasParser = require('../../loaders/AtlasParser');\r\n\r\nfunction skeletonParser() {\r\n    return function (resource, next) {\r\n        if(resource.url.indexOf('_skeleton.json') < 0) {\r\n            return next();\r\n        }\r\n\r\n        var skeletonData = resource.data;\r\n        skeletonParser.skeletons[skeletonData.name] = skeletonData;\r\n\r\n        var atlasPath = resource.url.split('_skeleton.json')[0] + '_atlas.json';\r\n        var atlasKey = resource.name + '_atlas';\r\n\r\n        var atlasLoader = new PIXI.loaders.Loader();\r\n        atlasLoader.use(AtlasParser());\r\n        atlasLoader.add(skeletonData.name + '_atlas', atlasPath);\r\n        atlasLoader.load((function (loader, res) {\r\n            next();\r\n        }).bind(this));\r\n    }\r\n};\r\n\r\nskeletonParser.skeletons = {};\r\n\r\nmodule.exports = skeletonParser;","var Resource    = PIXI.loaders.Resource,\r\n    async       = PIXI.utils.async;\r\n\r\nvar AtlasParser = function () {\r\n    return function (resource, next) {\r\n        if (!resource.data || !resource.isJson) {\r\n            return next();\r\n        }\r\n\r\n        var atlasData = resource.data;\r\n\r\n        var imagePath = resource.url.substr(0, resource.url.lastIndexOf('/') + 1) + atlasData.imagePath;\r\n\r\n        var loadOptions = {\r\n            crossOrigin: resource.crossOrigin,\r\n            loadType: Resource.LOAD_TYPE.IMAGE\r\n        };\r\n\r\n        PIXI.utils.TextureCache.dragonbones = PIXI.TextureCache.dragonbones || {};\r\n        PIXI.utils.TextureCache.dragonbones[atlasData.name] = {};\r\n\r\n        this.add(resource.name + '_image', imagePath, loadOptions, function (res) {\r\n            var frames = atlasData.SubTexture;\r\n\r\n            var currentFrame;\r\n            for( var i = 0 ; i < frames.length ; i++ ) {\r\n                var currentFrame = frames[i];\r\n\r\n                var size = new PIXI.math.Rectangle(currentFrame.x, currentFrame.y, currentFrame.width, currentFrame.height);\r\n\r\n                PIXI.utils.TextureCache.dragonbones[atlasData.name][currentFrame.name] = new PIXI.Texture(res.texture.baseTexture, size, size.clone(), null, false);\r\n            };\r\n\r\n            next();\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports = AtlasParser;"],"sourceRoot":"./"}