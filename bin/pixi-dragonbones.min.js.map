{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","pixi-dragonbones.min.js","src/DragonbonesRuntime/dragonBones.js","src/Dragonbones/display/DisplayBridge.js","src/Dragonbones/factories/Factory.js","src/Dragonbones/index.js","src/Dragonbones/texture/TextureAtlas.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","DragonbonesRuntime","Dragonbones","makeArmature","armatureName","skeletonJSON","atlasJson","texture","factory","Factory","addSkeletonData","objects","DataParser","parseSkeletonData","addTextureAtlas","textures","TextureAtlas","armature","buildArmature","animation","WorldClock","clock","add","PIXI","dragonbones","./Dragonbones","./DragonbonesRuntime/dragonBones",2,"dragonBones","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","geom","Point","x","y","toString","Rectangle","width","height","Matrix","c","tx","ty","invert","a1","b1","c1","d1","tx1","ColorTransform","alphaMultiplier","alphaOffset","blueMultiplier","blueOffset","greenMultiplier","greenOffset","redMultiplier","redOffset","events","Event","type","AnimationEvent","_super","FADE_IN","FADE_OUT","START","COMPLETE","LOOP_COMPLETE","FADE_IN_COMPLETE","FADE_OUT_COMPLETE","ArmatureEvent","Z_ORDER_UPDATED","FrameEvent","ANIMATION_FRAME_EVENT","BONE_FRAME_EVENT","SoundEvent","SOUND","EventDispatcher","hasEventListener","_listenersMap","addEventListener","listener","listeners","removeEventListener","push","splice","removeAllEventListeners","dispatchEvent","event","target","listenersCopy","concat","SoundEventManager","_instance","getInstance","timeScale","time","Date","getTime","_animatableList","contains","animatable","indexOf","remove","index","clear","advanceTime","passedTime","currentTime","currentIndex","TimelineState","transform","DBTransform","pivot","_durationTransform","_durationPivot","_durationColor","_borrowObject","_pool","pop","_returnObject","timeline","_clear","getEaseValue","value","easing","valueEase","Math","cos","PI","sin","HALF_PI","fadeIn","bone","animationState","_bone","_animationState","_timeline","_originTransform","originTransform","_originPivot","originPivot","_tweenTransform","_tweenColor","_totalTime","totalTime","scaleX","scaleY","skewX","skewY","_currentFrame","getFrameList","_arriveAtFrame","_updateState","fadeOut","utils","TransformUtil","formatRadian","update","progress","scale","offset","loopCount","floor","frameIndex","playedTime","isArrivedFrame","_currentFramePosition","_currentFrameDuration","duration","position","tweenActive","displayIndex","nextFrame","loop","abs","_tweenEasing","NaN","tweenEnabled","isNaN","clip","tweenEasing","color","blend","_updateColor","_isColorChanged","currentTransform","currentPivot","copy","AnimationState","layer","_timelineStates","fadeInTime","displayControl","pauseBeforeFadeInComplete","name","_armature","round","frameRate","Infinity","_pauseBeforeFadeInComplete","_fadeInTime","_fadeState","_fadeOutBeginTime","_fadeOutWeight","_fadeWeight","_fadeIn","_fadeOut","isPlaying","isComplete","weight","enabled","updateTimelineStates","fadeOutTime","pause","_fadeOutTime","play","stop","getMixingTransform","timelineName","_mixingTransforms","Number","addMixingTransform","recursive","getTimeline","currentBone","_boneList","removeMixingTransform","hasMixing","_eventList","currentLoopCount","frameList","removeTimelineState","addTimelineState","getTimelines","getBone","timelineState","Animation","_animationLayer","_isPlaying","animationNameList","getLastAnimationName","_lastAnimationState","getLastAnimationState","getAnimationDataList","_animationDataList","setAnimationDataList","getIsPlaying","getIsComplete","j","animationStateList","dispose","gotoAndPlay","animationName","group","fadeOutMode","pauseFadeOut","pauseFadeIn","SAME_LAYER_AND_GROUP","animationData","durationScale","addLayer","NONE","SAME_LAYER","SAME_GROUP","ALL","addState","slot","childArmature","slotList","_slotList","getChildArmature","getState","hasAnimation","stateListLength","boneName","weigthLeft","pivotX","pivotY","layerTotalWeight","k","removeState","tween","_tweenPivot","getRotation","setRotation","Frame","TransformFrame","tweenRotate","zOrder","visible","global","Timeline","_frameList","addFrame","frame","TransformTimeline","transformed","HIDE_TIMELINE","AnimationData","_timelines","addTimeline","DisplayData","ARMATURE","IMAGE","SlotData","_displayDataList","getDisplayDataList","addDisplayData","displayData","getDisplayData","displayName","BoneData","SkinData","_slotDataList","getSlotDataList","getSlotData","slotName","addSlotData","slotData","ArmatureData","_boneDataList","_skinDataList","getBoneDataList","getSkinDataList","getBoneData","getSkinData","skinName","getAnimationData","addBoneData","boneData","addSkinData","skinData","addAnimationData","sortBoneDataList","helpArray","level","parentData","parent","sort","sortBoneData","object1","object2","SkeletonData","_armatureDataList","_subTexturePivots","getArmatureNames","nameList","armatureDataIndex","getArmatureDataList","getArmatureData","addArmatureData","armatureData","removeArmatureData","removeArmatureDataByName","getSubTexturePivot","subTextureName","addSubTexturePivot","point","removeSubTexturePivot","parseTextureAtlasData","rawData","textureAtlasData","__name","ConstValues","A_NAME","subTextureList","SUB_TEXTURE","subTextureObject","subTextureData","A_X","A_Y","A_WIDTH","A_HEIGHT","A_FRAME_RATE","data","armatureObjectList","armatureObject","parseArmatureData","boneObjectList","BONE","boneObject","parseBoneData","skinObjectList","SKIN","skinObject","parseSkinData","DBDataUtil","transformArmatureData","animationObjectList","ANIMATION","animationObject","parseAnimationData","A_PARENT","A_LENGTH","parseTransform","TRANSFORM","slotObjectList","SLOT","slotObject","parseSlotData","A_Z_ORDER","displayObjectList","DISPLAY","displayObject","parseDisplayData","A_TYPE","A_LOOP","A_FADE_IN_TIME","A_DURATION","A_SCALE","A_TWEEN_EASING","tweenEase","undefined","parseTimeline","parseMainFrame","timelineObjectList","TIMELINE","timelineObject","parseTransformTimeline","addHideTimeline","transformAnimationData","frameParser","frameObjectList","FRAME","frameObject","parseTransformFrame","A_OFFSET","parseFrame","action","A_ACTION","A_EVENT","sound","A_SOUND","A_HIDE","A_TWEEN_ROTATE","A_DISPLAY_INDEX","colorTransformObject","COLOR_TRANSFORM","A_ALPHA_OFFSET","A_RED_OFFSET","A_GREEN_OFFSET","A_BLUE_OFFSET","A_ALPHA_MULTIPLIER","A_RED_MULTIPLIER","A_GREEN_MULTIPLIER","A_BLUE_MULTIPLIER","transformObject","A_SKEW_X","ANGLE_TO_RADIAN","A_SKEW_Y","A_SCALE_X","A_SCALE_Y","A_PIVOT_X","A_PIVOT_Y","factorys","BaseFactory","_dataDic","_textureAtlasDic","_textureAtlasLoadingDic","getSkeletonData","removeSkeletonData","getTextureAtlas","textureAtlas","removeTextureAtlas","disposeData","_currentDataName","_currentTextureAtlasName","skeletonName","textureAtlasName","_generateArmature","boneDataList","Bone","origin","addChild","animationArmatureData","displayDataList","slotDataList","_generateSlot","_originZOrder","_dislayDataList","_generateDisplay","setDisplayList","_changeDisplay","_slotsZOrderChanged","getTextureDisplay","textureName","getRegion","fullName","DRAGON_BONES","TEXTURE_ATLAS","A_VERSION","A_IMAGE_PATH","transformPointWithParent","helpMatrix","_helpMatrix","transformToMatrix","matrix","radian","DOUBLE_PI","parentBoneData","transformArmatureDataAnimations","animationDataList","parentTimeline","prevFrame","frameListLength","slotIndex","_helpTransform1","getTimelineTransform","_helpTransform2","dLX","retult","currentFrame","DBObject","_globalTransformMatrix","_visible","_isDisplayOnStage","_scaleType","fixedRotation","getVisible","setVisible","_setParent","_setArmature","_removeDBObject","_addDBObject","_update","parentMatrix","scaleMode","Slot","displayBrideg","_displayBridge","_displayList","_displayIndex","_tweenZorder","_offsetZOrder","_isHideDisplay","getZOrder","setZOrder","getDisplay","display","Armature","setDisplay","_setDisplay","setChildArmature","getDisplayList","displayIndexBackup","addDisplay","updateChildArmatureAnimation","removeDisplay","changeShowState","_updateVisible","updateTransform","lastAnimationName","_children","child","ancestor","removeChild","getSlots","unshift","isCross","mixingType","displayController","tansformFrame","frameEvent","frameLabel","_soundManager","soundEvent","aOffset","rOffset","gOffset","bOffset","aMultiplier","rMultiplier","gMultiplier","bMultiplier","isColorChanged","updateColor","_display","updateSlotsZOrder","returnCopy","getBones","getSlot","getSlotByDisplay","removeSlot","removeSlotByName","getBoneByDisplay","removeBone","removeBoneByName","object","parentName","boneParent","sortSlot","_sortBoneList","sortBone","slot1","slot2",3,"DisplayBridge","children","rotation","alpha","container","addChildAt","min","RADIAN_TO_ANGLE",4,"DisplayObjectContainer","Texture","fromFrame","image","Sprite","../../DragonbonesRuntime/dragonBones","../display/DisplayBridge",5,"../DragonbonesRuntime/dragonBones","./display/DisplayBridge","./factories/Factory","./texture/TextureAtlas",6,"textureAtlasRawData","_regions","parseData"],"mappings":"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","file":"pixi-dragonbones.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var DragonbonesRuntime = require('./DragonbonesRuntime/dragonBones'),\n    Dragonbones = require('./Dragonbones');\n\nDragonbones.makeArmature = function (armatureName, skeletonJSON, atlasJson, texture) {\n    var factory = new Dragonbones.factory.Factory();\n    factory.addSkeletonData(DragonbonesRuntime.objects.DataParser.parseSkeletonData(skeletonJSON));\n    factory.addTextureAtlas(new Dragonbones.textures.TextureAtlas(texture, atlasJson));\n\n    var armature = factory.buildArmature(armatureName);\n\n    DragonbonesRuntime.animation.WorldClock.clock.add(armature);\n\n    return armature;\n};\n\nmodule.exports = PIXI.dragonbones = Dragonbones;\n\n\n",null,"var __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar dragonBones;\r\n(function (dragonBones) {\r\n    (function (geom) {\r\n        var Point = (function () {\r\n            function Point(x, y) {\r\n                if (typeof x === \"undefined\") { x = 0; }\r\n                if (typeof y === \"undefined\") { y = 0; }\r\n                this.x = x;\r\n                this.y = y;\r\n            }\r\n            Point.prototype.toString = function () {\r\n                return \"[Point (x=\" + this.x + \" y=\" + this.y + \")]\";\r\n            };\r\n            return Point;\r\n        })();\r\n        geom.Point = Point;\r\n\r\n        var Rectangle = (function () {\r\n            function Rectangle(x, y, width, height) {\r\n                if (typeof x === \"undefined\") { x = 0; }\r\n                if (typeof y === \"undefined\") { y = 0; }\r\n                if (typeof width === \"undefined\") { width = 0; }\r\n                if (typeof height === \"undefined\") { height = 0; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n            return Rectangle;\r\n        })();\r\n        geom.Rectangle = Rectangle;\r\n\r\n        var Matrix = (function () {\r\n            function Matrix() {\r\n                this.a = 1;\r\n                this.b = 0;\r\n                this.c = 0;\r\n                this.d = 1;\r\n                this.tx = 0;\r\n                this.ty = 0;\r\n            }\r\n            Matrix.prototype.invert = function () {\r\n                var a1 = this.a;\r\n                var b1 = this.b;\r\n                var c1 = this.c;\r\n                var d1 = this.d;\r\n                var tx1 = this.tx;\r\n                var n = a1 * d1 - b1 * c1;\r\n\r\n                this.a = d1 / n;\r\n                this.b = -b1 / n;\r\n                this.c = -c1 / n;\r\n                this.d = a1 / n;\r\n                this.tx = (c1 * this.ty - d1 * tx1) / n;\r\n                this.ty = -(a1 * this.ty - b1 * tx1) / n;\r\n            };\r\n            return Matrix;\r\n        })();\r\n        geom.Matrix = Matrix;\r\n\r\n        var ColorTransform = (function () {\r\n            function ColorTransform() {\r\n                this.alphaMultiplier = 0;\r\n                this.alphaOffset = 0;\r\n                this.blueMultiplier = 0;\r\n                this.blueOffset = 0;\r\n                this.greenMultiplier = 0;\r\n                this.greenOffset = 0;\r\n                this.redMultiplier = 0;\r\n                this.redOffset = 0;\r\n            }\r\n            return ColorTransform;\r\n        })();\r\n        geom.ColorTransform = ColorTransform;\r\n    })(dragonBones.geom || (dragonBones.geom = {}));\r\n    var geom = dragonBones.geom;\r\n\r\n    (function (events) {\r\n        var Event = (function () {\r\n            function Event(type) {\r\n                this.type = type;\r\n            }\r\n            return Event;\r\n        })();\r\n        events.Event = Event;\r\n\r\n        var AnimationEvent = (function (_super) {\r\n            __extends(AnimationEvent, _super);\r\n            function AnimationEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            AnimationEvent.FADE_IN = \"fadeIn\";\r\n            AnimationEvent.FADE_OUT = \"fadeOut\";\r\n            AnimationEvent.START = \"start\";\r\n            AnimationEvent.COMPLETE = \"complete\";\r\n            AnimationEvent.LOOP_COMPLETE = \"loopComplete\";\r\n            AnimationEvent.FADE_IN_COMPLETE = \"fadeInComplete\";\r\n            AnimationEvent.FADE_OUT_COMPLETE = \"fadeOutComplete\";\r\n            return AnimationEvent;\r\n        })(Event);\r\n        events.AnimationEvent = AnimationEvent;\r\n\r\n        var ArmatureEvent = (function (_super) {\r\n            __extends(ArmatureEvent, _super);\r\n            function ArmatureEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            ArmatureEvent.Z_ORDER_UPDATED = \"zOrderUpdated\";\r\n            return ArmatureEvent;\r\n        })(Event);\r\n        events.ArmatureEvent = ArmatureEvent;\r\n\r\n        var FrameEvent = (function (_super) {\r\n            __extends(FrameEvent, _super);\r\n            function FrameEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            FrameEvent.ANIMATION_FRAME_EVENT = \"animationFrameEvent\";\r\n            FrameEvent.BONE_FRAME_EVENT = \"boneFrameEvent\";\r\n            return FrameEvent;\r\n        })(Event);\r\n        events.FrameEvent = FrameEvent;\r\n\r\n        var SoundEvent = (function (_super) {\r\n            __extends(SoundEvent, _super);\r\n            function SoundEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            SoundEvent.SOUND = \"sound\";\r\n            SoundEvent.BONE_FRAME_EVENT = \"boneFrameEvent\";\r\n            return SoundEvent;\r\n        })(Event);\r\n        events.SoundEvent = SoundEvent;\r\n\r\n        var EventDispatcher = (function () {\r\n            function EventDispatcher() {\r\n            }\r\n            EventDispatcher.prototype.hasEventListener = function (type) {\r\n                if (this._listenersMap && this._listenersMap[type]) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            EventDispatcher.prototype.addEventListener = function (type, listener) {\r\n                if (type && listener) {\r\n                    if (!this._listenersMap) {\r\n                        this._listenersMap = {};\r\n                    }\r\n                    var listeners = this._listenersMap[type];\r\n                    if (listeners) {\r\n                        this.removeEventListener(type, listener);\r\n                    }\r\n                    if (listeners) {\r\n                        listeners.push(listener);\r\n                    } else {\r\n                        this._listenersMap[type] = [listener];\r\n                    }\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.removeEventListener = function (type, listener) {\r\n                if (!this._listenersMap || !type || !listener) {\r\n                    return;\r\n                }\r\n                var listeners = this._listenersMap[type];\r\n                if (listeners) {\r\n                    var length = listeners.length;\r\n                    for (var i = 0; i < length; i++) {\r\n                        if (listeners[i] == listener) {\r\n                            if (length == 1) {\r\n                                listeners.length = 0;\r\n                                delete this._listenersMap[type];\r\n                            } else {\r\n                                listeners.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.removeAllEventListeners = function (type) {\r\n                if (type) {\r\n                    delete this._listenersMap[type];\r\n                } else {\r\n                    this._listenersMap = null;\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.dispatchEvent = function (event) {\r\n                if (event) {\r\n                    var listeners = this._listenersMap[event.type];\r\n                    if (listeners) {\r\n                        event.target = this;\r\n                        var listenersCopy = listeners.concat();\r\n                        var length = listeners.length;\r\n                        for (var i = 0; i < length; i++) {\r\n                            listenersCopy[i](event);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            return EventDispatcher;\r\n        })();\r\n        events.EventDispatcher = EventDispatcher;\r\n\r\n        var SoundEventManager = (function (_super) {\r\n            __extends(SoundEventManager, _super);\r\n            function SoundEventManager() {\r\n                _super.call(this);\r\n                if (SoundEventManager._instance) {\r\n                    throw new Error(\"Singleton already constructed!\");\r\n                }\r\n            }\r\n            SoundEventManager.getInstance = function () {\r\n                if (!SoundEventManager._instance) {\r\n                    SoundEventManager._instance = new SoundEventManager();\r\n                }\r\n                return SoundEventManager._instance;\r\n            };\r\n            return SoundEventManager;\r\n        })(EventDispatcher);\r\n        events.SoundEventManager = SoundEventManager;\r\n    })(dragonBones.events || (dragonBones.events = {}));\r\n    var events = dragonBones.events;\r\n\r\n    (function (animation) {\r\n        var WorldClock = (function () {\r\n            function WorldClock() {\r\n                this.timeScale = 1;\r\n                this.time = new Date().getTime() * 0.001;\r\n                this._animatableList = [];\r\n            }\r\n            WorldClock.prototype.contains = function (animatable) {\r\n                return this._animatableList.indexOf(animatable) >= 0;\r\n            };\r\n\r\n            WorldClock.prototype.add = function (animatable) {\r\n                if (animatable && this._animatableList.indexOf(animatable) == -1) {\r\n                    this._animatableList.push(animatable);\r\n                }\r\n            };\r\n\r\n            WorldClock.prototype.remove = function (animatable) {\r\n                var index = this._animatableList.indexOf(animatable);\r\n                if (index >= 0) {\r\n                    this._animatableList[index] = null;\r\n                }\r\n            };\r\n\r\n            WorldClock.prototype.clear = function () {\r\n                this._animatableList.length = 0;\r\n            };\r\n\r\n            WorldClock.prototype.advanceTime = function (passedTime) {\r\n                if (passedTime < 0) {\r\n                    var currentTime = new Date().getTime() * 0.001;\r\n                    passedTime = currentTime - this.time;\r\n                    this.time = currentTime;\r\n                }\r\n\r\n                passedTime *= this.timeScale;\r\n\r\n                var length = this._animatableList.length;\r\n                if (length == 0) {\r\n                    return;\r\n                }\r\n                var currentIndex = 0;\r\n\r\n                for (var i = 0; i < length; i++) {\r\n                    var animatable = this._animatableList[i];\r\n                    if (animatable) {\r\n                        if (currentIndex != i) {\r\n                            this._animatableList[currentIndex] = animatable;\r\n                            this._animatableList[i] = null;\r\n                        }\r\n                        animatable.advanceTime(passedTime);\r\n                        currentIndex++;\r\n                    }\r\n                }\r\n\r\n                if (currentIndex != i) {\r\n                    length = this._animatableList.length;\r\n                    while (i < length) {\r\n                        this._animatableList[currentIndex++] = this._animatableList[i++];\r\n                    }\r\n                    this._animatableList.length = currentIndex;\r\n                }\r\n            };\r\n            WorldClock.clock = new WorldClock();\r\n            return WorldClock;\r\n        })();\r\n        animation.WorldClock = WorldClock;\r\n\r\n        var TimelineState = (function () {\r\n            function TimelineState() {\r\n                this.transform = new objects.DBTransform();\r\n                this.pivot = new geom.Point();\r\n\r\n                this._durationTransform = new objects.DBTransform();\r\n                this._durationPivot = new geom.Point();\r\n                this._durationColor = new geom.ColorTransform();\r\n            }\r\n            TimelineState._borrowObject = function () {\r\n                if (TimelineState._pool.length == 0) {\r\n                    return new TimelineState();\r\n                }\r\n                return TimelineState._pool.pop();\r\n            };\r\n\r\n            TimelineState._returnObject = function (timeline) {\r\n                if (TimelineState._pool.indexOf(timeline) < 0) {\r\n                    TimelineState._pool[TimelineState._pool.length] = timeline;\r\n                }\r\n\r\n                timeline.clear();\r\n            };\r\n\r\n            TimelineState._clear = function () {\r\n                var i = TimelineState._pool.length;\r\n                while (i--) {\r\n                    TimelineState._pool[i].clear();\r\n                }\r\n                TimelineState._pool.length = 0;\r\n            };\r\n\r\n            TimelineState.getEaseValue = function (value, easing) {\r\n                if (easing > 1) {\r\n                    var valueEase = 0.5 * (1 - Math.cos(value * Math.PI)) - value;\r\n                    easing -= 1;\r\n                } else if (easing > 0) {\r\n                    valueEase = Math.sin(value * TimelineState.HALF_PI) - value;\r\n                } else if (easing < 0) {\r\n                    valueEase = 1 - Math.cos(value * TimelineState.HALF_PI) - value;\r\n                    easing *= -1;\r\n                }\r\n                return valueEase * easing + value;\r\n            };\r\n\r\n            TimelineState.prototype.fadeIn = function (bone, animationState, timeline) {\r\n                this._bone = bone;\r\n                this._animationState = animationState;\r\n                this._timeline = timeline;\r\n\r\n                this._originTransform = this._timeline.originTransform;\r\n                this._originPivot = this._timeline.originPivot;\r\n\r\n                this._tweenTransform = false;\r\n                this._tweenColor = false;\r\n\r\n                this._totalTime = this._animationState.totalTime;\r\n\r\n                this.transform.x = 0;\r\n                this.transform.y = 0;\r\n                this.transform.scaleX = 0;\r\n                this.transform.scaleY = 0;\r\n                this.transform.skewX = 0;\r\n                this.transform.skewY = 0;\r\n                this.pivot.x = 0;\r\n                this.pivot.y = 0;\r\n\r\n                this._durationTransform.x = 0;\r\n                this._durationTransform.y = 0;\r\n                this._durationTransform.scaleX = 0;\r\n                this._durationTransform.scaleY = 0;\r\n                this._durationTransform.skewX = 0;\r\n                this._durationTransform.skewY = 0;\r\n                this._durationPivot.x = 0;\r\n                this._durationPivot.y = 0;\r\n\r\n                this._currentFrame = null;\r\n\r\n                switch (this._timeline.getFrameList().length) {\r\n                    case 0:\r\n                        this._bone._arriveAtFrame(null, this, this._animationState, false);\r\n                        this._updateState = 0;\r\n                        break;\r\n                    case 1:\r\n                        this._updateState = -1;\r\n                        break;\r\n                    default:\r\n                        this._updateState = 1;\r\n                        break;\r\n                }\r\n            };\r\n\r\n            TimelineState.prototype.fadeOut = function () {\r\n                this.transform.skewX = utils.TransformUtil.formatRadian(this.transform.skewX);\r\n                this.transform.skewY = utils.TransformUtil.formatRadian(this.transform.skewY);\r\n            };\r\n\r\n            TimelineState.prototype.update = function (progress) {\r\n                if (this._updateState) {\r\n                    if (this._updateState > 0) {\r\n                        if (this._timeline.scale == 0) {\r\n                            progress = 1;\r\n                        } else {\r\n                            progress /= this._timeline.scale;\r\n                        }\r\n\r\n                        if (progress == 1) {\r\n                            progress = 0.99999999;\r\n                        }\r\n\r\n                        progress += this._timeline.offset;\r\n                        var loopCount = Math.floor(progress);\r\n                        progress -= loopCount;\r\n\r\n                        var playedTime = this._totalTime * progress;\r\n                        var isArrivedFrame = false;\r\n                        var frameIndex;\r\n                        while (!this._currentFrame || playedTime > this._currentFramePosition + this._currentFrameDuration || playedTime < this._currentFramePosition) {\r\n                            if (isArrivedFrame) {\r\n                                this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, true);\r\n                            }\r\n                            isArrivedFrame = true;\r\n                            if (this._currentFrame) {\r\n                                frameIndex = this._timeline.getFrameList().indexOf(this._currentFrame) + 1;\r\n                                if (frameIndex >= this._timeline.getFrameList().length) {\r\n                                    frameIndex = 0;\r\n                                }\r\n                                this._currentFrame = this._timeline.getFrameList()[frameIndex];\r\n                            } else {\r\n                                frameIndex = 0;\r\n                                this._currentFrame = this._timeline.getFrameList()[0];\r\n                            }\r\n                            this._currentFrameDuration = this._currentFrame.duration;\r\n                            this._currentFramePosition = this._currentFrame.position;\r\n                        }\r\n\r\n                        if (isArrivedFrame) {\r\n                            this.tweenActive = this._currentFrame.displayIndex >= 0;\r\n                            frameIndex++;\r\n                            if (frameIndex >= this._timeline.getFrameList().length) {\r\n                                frameIndex = 0;\r\n                            }\r\n                            var nextFrame = this._timeline.getFrameList()[frameIndex];\r\n\r\n                            if (frameIndex == 0 && this._animationState.loop && this._animationState.loopCount >= Math.abs(this._animationState.loop) - 1 && ((this._currentFramePosition + this._currentFrameDuration) / this._totalTime + loopCount - this._timeline.offset) * this._timeline.scale > 0.99999999) {\r\n                                this._updateState = 0;\r\n                                this._tweenEasing = NaN;\r\n                            } else if (this._currentFrame.displayIndex < 0 || nextFrame.displayIndex < 0 || !this._animationState.tweenEnabled) {\r\n                                this._tweenEasing = NaN;\r\n                            } else if (isNaN(this._animationState.clip.tweenEasing)) {\r\n                                this._tweenEasing = this._currentFrame.tweenEasing;\r\n                            } else {\r\n                                this._tweenEasing = this._animationState.clip.tweenEasing;\r\n                            }\r\n\r\n                            if (isNaN(this._tweenEasing)) {\r\n                                this._tweenTransform = false;\r\n                                this._tweenColor = false;\r\n                            } else {\r\n                                this._durationTransform.x = nextFrame.transform.x - this._currentFrame.transform.x;\r\n                                this._durationTransform.y = nextFrame.transform.y - this._currentFrame.transform.y;\r\n                                this._durationTransform.skewX = nextFrame.transform.skewX - this._currentFrame.transform.skewX;\r\n                                this._durationTransform.skewY = nextFrame.transform.skewY - this._currentFrame.transform.skewY;\r\n                                this._durationTransform.scaleX = nextFrame.transform.scaleX - this._currentFrame.transform.scaleX;\r\n                                this._durationTransform.scaleY = nextFrame.transform.scaleY - this._currentFrame.transform.scaleY;\r\n\r\n                                if (frameIndex == 0) {\r\n                                    this._durationTransform.skewX = utils.TransformUtil.formatRadian(this._durationTransform.skewX);\r\n                                    this._durationTransform.skewY = utils.TransformUtil.formatRadian(this._durationTransform.skewY);\r\n                                }\r\n\r\n                                this._durationPivot.x = nextFrame.pivot.x - this._currentFrame.pivot.x;\r\n                                this._durationPivot.y = nextFrame.pivot.y - this._currentFrame.pivot.y;\r\n\r\n                                if (this._durationTransform.x != 0 || this._durationTransform.y != 0 || this._durationTransform.skewX != 0 || this._durationTransform.skewY != 0 || this._durationTransform.scaleX != 0 || this._durationTransform.scaleY != 0 || this._durationPivot.x != 0 || this._durationPivot.y != 0) {\r\n                                    this._tweenTransform = true;\r\n                                } else {\r\n                                    this._tweenTransform = false;\r\n                                }\r\n\r\n                                if (this._currentFrame.color && nextFrame.color) {\r\n                                    this._durationColor.alphaOffset = nextFrame.color.alphaOffset - this._currentFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = nextFrame.color.redOffset - this._currentFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = nextFrame.color.greenOffset - this._currentFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = nextFrame.color.blueOffset - this._currentFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = nextFrame.color.alphaMultiplier - this._currentFrame.color.alphaMultiplier;\r\n                                    this._durationColor.redMultiplier = nextFrame.color.redMultiplier - this._currentFrame.color.redMultiplier;\r\n                                    this._durationColor.greenMultiplier = nextFrame.color.greenMultiplier - this._currentFrame.color.greenMultiplier;\r\n                                    this._durationColor.blueMultiplier = nextFrame.color.blueMultiplier - this._currentFrame.color.blueMultiplier;\r\n\r\n                                    if (this._durationColor.alphaOffset != 0 || this._durationColor.redOffset != 0 || this._durationColor.greenOffset != 0 || this._durationColor.blueOffset != 0 || this._durationColor.alphaMultiplier != 0 || this._durationColor.redMultiplier != 0 || this._durationColor.greenMultiplier != 0 || this._durationColor.blueMultiplier != 0) {\r\n                                        this._tweenColor = true;\r\n                                    } else {\r\n                                        this._tweenColor = false;\r\n                                    }\r\n                                } else if (this._currentFrame.color) {\r\n                                    this._tweenColor = true;\r\n                                    this._durationColor.alphaOffset = -this._currentFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = -this._currentFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = -this._currentFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = -this._currentFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = 1 - this._currentFrame.color.alphaMultiplier;\r\n                                    this._durationColor.redMultiplier = 1 - this._currentFrame.color.redMultiplier;\r\n                                    this._durationColor.greenMultiplier = 1 - this._currentFrame.color.greenMultiplier;\r\n                                    this._durationColor.blueMultiplier = 1 - this._currentFrame.color.blueMultiplier;\r\n                                } else if (nextFrame.color) {\r\n                                    this._tweenColor = true;\r\n                                    this._durationColor.alphaOffset = nextFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = nextFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = nextFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = nextFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = nextFrame.color.alphaMultiplier - 1;\r\n                                    this._durationColor.redMultiplier = nextFrame.color.redMultiplier - 1;\r\n                                    this._durationColor.greenMultiplier = nextFrame.color.greenMultiplier - 1;\r\n                                    this._durationColor.blueMultiplier = nextFrame.color.blueMultiplier - 1;\r\n                                } else {\r\n                                    this._tweenColor = false;\r\n                                }\r\n                            }\r\n\r\n                            if (!this._tweenTransform) {\r\n                                if (this._animationState.blend) {\r\n                                    this.transform.x = this._originTransform.x + this._currentFrame.transform.x;\r\n                                    this.transform.y = this._originTransform.y + this._currentFrame.transform.y;\r\n                                    this.transform.skewX = this._originTransform.skewX + this._currentFrame.transform.skewX;\r\n                                    this.transform.skewY = this._originTransform.skewY + this._currentFrame.transform.skewY;\r\n                                    this.transform.scaleX = this._originTransform.scaleX + this._currentFrame.transform.scaleX;\r\n                                    this.transform.scaleY = this._originTransform.scaleY + this._currentFrame.transform.scaleY;\r\n\r\n                                    this.pivot.x = this._originPivot.x + this._currentFrame.pivot.x;\r\n                                    this.pivot.y = this._originPivot.y + this._currentFrame.pivot.y;\r\n                                } else {\r\n                                    this.transform.x = this._currentFrame.transform.x;\r\n                                    this.transform.y = this._currentFrame.transform.y;\r\n                                    this.transform.skewX = this._currentFrame.transform.skewX;\r\n                                    this.transform.skewY = this._currentFrame.transform.skewY;\r\n                                    this.transform.scaleX = this._currentFrame.transform.scaleX;\r\n                                    this.transform.scaleY = this._currentFrame.transform.scaleY;\r\n\r\n                                    this.pivot.x = this._currentFrame.pivot.x;\r\n                                    this.pivot.y = this._currentFrame.pivot.y;\r\n                                }\r\n                            }\r\n\r\n                            if (!this._tweenColor) {\r\n                                if (this._currentFrame.color) {\r\n                                    this._bone._updateColor(this._currentFrame.color.alphaOffset, this._currentFrame.color.redOffset, this._currentFrame.color.greenOffset, this._currentFrame.color.blueOffset, this._currentFrame.color.alphaMultiplier, this._currentFrame.color.redMultiplier, this._currentFrame.color.greenMultiplier, this._currentFrame.color.blueMultiplier, true);\r\n                                } else if (this._bone._isColorChanged) {\r\n                                    this._bone._updateColor(0, 0, 0, 0, 1, 1, 1, 1, false);\r\n                                }\r\n                            }\r\n                            this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, false);\r\n                        }\r\n\r\n                        if (this._tweenTransform || this._tweenColor) {\r\n                            progress = (playedTime - this._currentFramePosition) / this._currentFrameDuration;\r\n                            if (this._tweenEasing) {\r\n                                progress = TimelineState.getEaseValue(progress, this._tweenEasing);\r\n                            }\r\n                        }\r\n\r\n                        if (this._tweenTransform) {\r\n                            var currentTransform = this._currentFrame.transform;\r\n                            var currentPivot = this._currentFrame.pivot;\r\n                            if (this._animationState.blend) {\r\n                                this.transform.x = this._originTransform.x + currentTransform.x + this._durationTransform.x * progress;\r\n                                this.transform.y = this._originTransform.y + currentTransform.y + this._durationTransform.y * progress;\r\n                                this.transform.skewX = this._originTransform.skewX + currentTransform.skewX + this._durationTransform.skewX * progress;\r\n                                this.transform.skewY = this._originTransform.skewY + currentTransform.skewY + this._durationTransform.skewY * progress;\r\n                                this.transform.scaleX = this._originTransform.scaleX + currentTransform.scaleX + this._durationTransform.scaleX * progress;\r\n                                this.transform.scaleY = this._originTransform.scaleY + currentTransform.scaleY + this._durationTransform.scaleY * progress;\r\n\r\n                                this.pivot.x = this._originPivot.x + currentPivot.x + this._durationPivot.x * progress;\r\n                                this.pivot.y = this._originPivot.y + currentPivot.y + this._durationPivot.y * progress;\r\n                            } else {\r\n                                this.transform.x = currentTransform.x + this._durationTransform.x * progress;\r\n                                this.transform.y = currentTransform.y + this._durationTransform.y * progress;\r\n                                this.transform.skewX = currentTransform.skewX + this._durationTransform.skewX * progress;\r\n                                this.transform.skewY = currentTransform.skewY + this._durationTransform.skewY * progress;\r\n                                this.transform.scaleX = currentTransform.scaleX + this._durationTransform.scaleX * progress;\r\n                                this.transform.scaleY = currentTransform.scaleY + this._durationTransform.scaleY * progress;\r\n\r\n                                this.pivot.x = currentPivot.x + this._durationPivot.x * progress;\r\n                                this.pivot.y = currentPivot.y + this._durationPivot.y * progress;\r\n                            }\r\n                        }\r\n\r\n                        if (this._tweenColor) {\r\n                            if (this._currentFrame.color) {\r\n                                this._bone._updateColor(this._currentFrame.color.alphaOffset + this._durationColor.alphaOffset * progress, this._currentFrame.color.redOffset + this._durationColor.redOffset * progress, this._currentFrame.color.greenOffset + this._durationColor.greenOffset * progress, this._currentFrame.color.blueOffset + this._durationColor.blueOffset * progress, this._currentFrame.color.alphaMultiplier + this._durationColor.alphaMultiplier * progress, this._currentFrame.color.redMultiplier + this._durationColor.redMultiplier * progress, this._currentFrame.color.greenMultiplier + this._durationColor.greenMultiplier * progress, this._currentFrame.color.blueMultiplier + this._durationColor.blueMultiplier * progress, true);\r\n                            } else {\r\n                                this._bone._updateColor(this._durationColor.alphaOffset * progress, this._durationColor.redOffset * progress, this._durationColor.greenOffset * progress, this._durationColor.blueOffset * progress, 1 + this._durationColor.alphaMultiplier * progress, 1 + this._durationColor.redMultiplier * progress, 1 + this._durationColor.greenMultiplier * progress, 1 + this._durationColor.blueMultiplier * progress, true);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this._updateState = 0;\r\n                        if (this._animationState.blend) {\r\n                            this.transform.copy(this._originTransform);\r\n\r\n                            this.pivot.x = this._originPivot.x;\r\n                            this.pivot.y = this._originPivot.y;\r\n                        } else {\r\n                            this.transform.x = this.transform.y = this.transform.skewX = this.transform.skewY = this.transform.scaleX = this.transform.scaleY = 0;\r\n\r\n                            this.pivot.x = 0;\r\n                            this.pivot.y = 0;\r\n                        }\r\n\r\n                        this._currentFrame = this._timeline.getFrameList()[0];\r\n\r\n                        this.tweenActive = this._currentFrame.displayIndex >= 0;\r\n\r\n                        if (this._currentFrame.color) {\r\n                            this._bone._updateColor(this._currentFrame.color.alphaOffset, this._currentFrame.color.redOffset, this._currentFrame.color.greenOffset, this._currentFrame.color.blueOffset, this._currentFrame.color.alphaMultiplier, this._currentFrame.color.redMultiplier, this._currentFrame.color.greenMultiplier, this._currentFrame.color.blueMultiplier, true);\r\n                        } else {\r\n                            this._bone._updateColor(0, 0, 0, 0, 1, 1, 1, 1, false);\r\n                        }\r\n\r\n                        this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, false);\r\n                    }\r\n                }\r\n            };\r\n\r\n            TimelineState.prototype.clear = function () {\r\n                this._updateState = 0;\r\n                this._bone = null;\r\n                this._animationState = null;\r\n                this._timeline = null;\r\n                this._currentFrame = null;\r\n                this._originTransform = null;\r\n                this._originPivot = null;\r\n            };\r\n            TimelineState.HALF_PI = Math.PI * 0.5;\r\n\r\n            TimelineState._pool = [];\r\n            return TimelineState;\r\n        })();\r\n        animation.TimelineState = TimelineState;\r\n\r\n        var AnimationState = (function () {\r\n            function AnimationState() {\r\n                this.loop = 0;\r\n                this.layer = 0;\r\n                this._timelineStates = {};\r\n            }\r\n            AnimationState._borrowObject = function () {\r\n                if (AnimationState._pool.length == 0) {\r\n                    return new AnimationState();\r\n                }\r\n                return AnimationState._pool.pop();\r\n            };\r\n\r\n            AnimationState._returnObject = function (animationState) {\r\n                if (AnimationState._pool.indexOf(animationState) < 0) {\r\n                    AnimationState._pool[AnimationState._pool.length] = animationState;\r\n                }\r\n\r\n                animationState.clear();\r\n            };\r\n\r\n            AnimationState._clear = function () {\r\n                var i = AnimationState._pool.length;\r\n                while (i--) {\r\n                    AnimationState._pool[i].clear();\r\n                }\r\n                AnimationState._pool.length = 0;\r\n            };\r\n\r\n            AnimationState.prototype.fadeIn = function (armature, clip, fadeInTime, timeScale, loop, layer, displayControl, pauseBeforeFadeInComplete) {\r\n                this.layer = layer;\r\n                this.clip = clip;\r\n                this.name = this.clip.name;\r\n                this.totalTime = this.clip.duration;\r\n\r\n                this._armature = armature;\r\n\r\n                if (Math.round(this.clip.duration * this.clip.frameRate) < 2 || timeScale == Infinity) {\r\n                    this.timeScale = 1;\r\n                    this.currentTime = this.totalTime;\r\n                    if (this.loop >= 0) {\r\n                        this.loop = 1;\r\n                    } else {\r\n                        this.loop = -1;\r\n                    }\r\n                } else {\r\n                    this.timeScale = timeScale;\r\n                    this.currentTime = 0;\r\n                    this.loop = loop;\r\n                }\r\n\r\n                this._pauseBeforeFadeInComplete = pauseBeforeFadeInComplete;\r\n\r\n                this._fadeInTime = fadeInTime * this.timeScale;\r\n                this._fadeState = 1;\r\n                this._fadeOutBeginTime = 0;\r\n                this._fadeOutWeight = -1;\r\n                this._fadeWeight = 0;\r\n                this._fadeIn = true;\r\n                this._fadeOut = false;\r\n\r\n                this.loopCount = -1;\r\n                this.displayControl = displayControl;\r\n                this.isPlaying = true;\r\n                this.isComplete = false;\r\n\r\n                this.weight = 1;\r\n                this.blend = true;\r\n                this.enabled = true;\r\n                this.tweenEnabled = true;\r\n\r\n                this.updateTimelineStates();\r\n            };\r\n\r\n            AnimationState.prototype.fadeOut = function (fadeOutTime, pause) {\r\n                if (typeof pause === \"undefined\") { pause = false; }\r\n                if (!this._armature || this._fadeOutWeight >= 0) {\r\n                    return;\r\n                }\r\n                this._fadeState = -1;\r\n                this._fadeOutWeight = this._fadeWeight;\r\n                this._fadeOutTime = fadeOutTime * this.timeScale;\r\n                this._fadeOutBeginTime = this.currentTime;\r\n                this._fadeOut = true;\r\n\r\n                this.isPlaying = !pause;\r\n                this.displayControl = false;\r\n\r\n                for (var index in this._timelineStates) {\r\n                    (this._timelineStates[index]).fadeOut();\r\n                }\r\n\r\n                this.enabled = true;\r\n            };\r\n\r\n            AnimationState.prototype.play = function () {\r\n                this.isPlaying = true;\r\n            };\r\n\r\n            AnimationState.prototype.stop = function () {\r\n                this.isPlaying = false;\r\n            };\r\n\r\n            AnimationState.prototype.getMixingTransform = function (timelineName) {\r\n                if (this._mixingTransforms) {\r\n                    return Number(this._mixingTransforms[timelineName]);\r\n                }\r\n                return -1;\r\n            };\r\n\r\n            AnimationState.prototype.addMixingTransform = function (timelineName, type, recursive) {\r\n                if (typeof type === \"undefined\") { type = 2; }\r\n                if (typeof recursive === \"undefined\") { recursive = true; }\r\n                if (this.clip && this.clip.getTimeline(timelineName)) {\r\n                    if (!this._mixingTransforms) {\r\n                        this._mixingTransforms = {};\r\n                    }\r\n                    if (recursive) {\r\n                        var i = this._armature._boneList.length;\r\n                        var bone;\r\n                        var currentBone;\r\n                        while (i--) {\r\n                            bone = this._armature._boneList[i];\r\n                            if (bone.name == timelineName) {\r\n                                currentBone = bone;\r\n                            }\r\n                            if (currentBone && (currentBone == bone || currentBone.contains(bone))) {\r\n                                this._mixingTransforms[bone.name] = type;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this._mixingTransforms[timelineName] = type;\r\n                    }\r\n\r\n                    this.updateTimelineStates();\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.removeMixingTransform = function (timelineName, recursive) {\r\n                if (typeof timelineName === \"undefined\") { timelineName = null; }\r\n                if (typeof recursive === \"undefined\") { recursive = true; }\r\n                if (timelineName) {\r\n                    if (recursive) {\r\n                        var i = this._armature._boneList.length;\r\n                        var bone;\r\n                        var currentBone;\r\n                        while (i--) {\r\n                            bone = this._armature._boneList[i];\r\n                            if (bone.name == timelineName) {\r\n                                currentBone = bone;\r\n                            }\r\n                            if (currentBone && (currentBone == bone || currentBone.contains(bone))) {\r\n                                delete this._mixingTransforms[bone.name];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        delete this._mixingTransforms[timelineName];\r\n                    }\r\n\r\n                    for (var index in this._mixingTransforms) {\r\n                        var hasMixing = true;\r\n                        break;\r\n                    }\r\n                    if (!hasMixing) {\r\n                        this._mixingTransforms = null;\r\n                    }\r\n                } else {\r\n                    this._mixingTransforms = null;\r\n                }\r\n\r\n                this.updateTimelineStates();\r\n            };\r\n\r\n            AnimationState.prototype.advanceTime = function (passedTime) {\r\n                if (!this.enabled) {\r\n                    return false;\r\n                }\r\n                var event;\r\n                var isComplete;\r\n\r\n                if (this._fadeIn) {\r\n                    this._fadeIn = false;\r\n                    if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN)) {\r\n                        event = new events.AnimationEvent(events.AnimationEvent.FADE_IN);\r\n                        event.animationState = this;\r\n                        this._armature._eventList.push(event);\r\n                    }\r\n                }\r\n\r\n                if (this._fadeOut) {\r\n                    this._fadeOut = false;\r\n                    if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT)) {\r\n                        event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT);\r\n                        event.animationState = this;\r\n                        this._armature._eventList.push(event);\r\n                    }\r\n                }\r\n\r\n                this.currentTime += passedTime * this.timeScale;\r\n\r\n                if (this.isPlaying && !this.isComplete) {\r\n                    var progress;\r\n                    var currentLoopCount;\r\n                    if (this._pauseBeforeFadeInComplete) {\r\n                        this._pauseBeforeFadeInComplete = false;\r\n                        this.isPlaying = false;\r\n                        progress = 0;\r\n                        currentLoopCount = Math.floor(progress);\r\n                    } else {\r\n                        progress = this.currentTime / this.totalTime;\r\n\r\n                        currentLoopCount = Math.floor(progress);\r\n                        if (currentLoopCount != this.loopCount) {\r\n                            if (this.loopCount == -1) {\r\n                                if (this._armature.hasEventListener(events.AnimationEvent.START)) {\r\n                                    event = new events.AnimationEvent(events.AnimationEvent.START);\r\n                                    event.animationState = this;\r\n                                    this._armature._eventList.push(event);\r\n                                }\r\n                            }\r\n                            this.loopCount = currentLoopCount;\r\n                            if (this.loopCount) {\r\n                                if (this.loop && this.loopCount * this.loopCount >= this.loop * this.loop - 1) {\r\n                                    isComplete = true;\r\n                                    progress = 1;\r\n                                    currentLoopCount = 0;\r\n                                    if (this._armature.hasEventListener(events.AnimationEvent.COMPLETE)) {\r\n                                        event = new events.AnimationEvent(events.AnimationEvent.COMPLETE);\r\n                                        event.animationState = this;\r\n                                        this._armature._eventList.push(event);\r\n                                    }\r\n                                } else {\r\n                                    if (this._armature.hasEventListener(events.AnimationEvent.LOOP_COMPLETE)) {\r\n                                        event = new events.AnimationEvent(events.AnimationEvent.LOOP_COMPLETE);\r\n                                        event.animationState = this;\r\n                                        this._armature._eventList.push(event);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (var index in this._timelineStates) {\r\n                        (this._timelineStates[index]).update(progress);\r\n                    }\r\n                    var frameList = this.clip.getFrameList();\r\n                    if (frameList.length > 0) {\r\n                        var playedTime = this.totalTime * (progress - currentLoopCount);\r\n                        var isArrivedFrame = false;\r\n                        var frameIndex;\r\n                        while (!this._currentFrame || playedTime > this._currentFrame.position + this._currentFrame.duration || playedTime < this._currentFrame.position) {\r\n                            if (isArrivedFrame) {\r\n                                this._armature._arriveAtFrame(this._currentFrame, null, this, true);\r\n                            }\r\n                            isArrivedFrame = true;\r\n                            if (this._currentFrame) {\r\n                                frameIndex = frameList.indexOf(this._currentFrame);\r\n                                frameIndex++;\r\n                                if (frameIndex >= frameList.length) {\r\n                                    frameIndex = 0;\r\n                                }\r\n                                this._currentFrame = frameList[frameIndex];\r\n                            } else {\r\n                                this._currentFrame = frameList[0];\r\n                            }\r\n                        }\r\n\r\n                        if (isArrivedFrame) {\r\n                            this._armature._arriveAtFrame(this._currentFrame, null, this, false);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this._fadeState > 0) {\r\n                    if (this._fadeInTime == 0) {\r\n                        this._fadeWeight = 1;\r\n                        this._fadeState = 0;\r\n                        this.isPlaying = true;\r\n                        if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN_COMPLETE)) {\r\n                            event = new events.AnimationEvent(events.AnimationEvent.FADE_IN_COMPLETE);\r\n                            event.animationState = this;\r\n                            this._armature._eventList.push(event);\r\n                        }\r\n                    } else {\r\n                        this._fadeWeight = this.currentTime / this._fadeInTime;\r\n                        if (this._fadeWeight >= 1) {\r\n                            this._fadeWeight = 1;\r\n                            this._fadeState = 0;\r\n                            if (!this.isPlaying) {\r\n                                this.currentTime -= this._fadeInTime;\r\n                            }\r\n                            this.isPlaying = true;\r\n                            if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN_COMPLETE)) {\r\n                                event = new events.AnimationEvent(events.AnimationEvent.FADE_IN_COMPLETE);\r\n                                event.animationState = this;\r\n                                this._armature._eventList.push(event);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (this._fadeState < 0) {\r\n                    if (this._fadeOutTime == 0) {\r\n                        this._fadeWeight = 0;\r\n                        this._fadeState = 0;\r\n                        if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT_COMPLETE)) {\r\n                            event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT_COMPLETE);\r\n                            event.animationState = this;\r\n                            this._armature._eventList.push(event);\r\n                        }\r\n                        return true;\r\n                    } else {\r\n                        this._fadeWeight = (1 - (this.currentTime - this._fadeOutBeginTime) / this._fadeOutTime) * this._fadeOutWeight;\r\n                        if (this._fadeWeight <= 0) {\r\n                            this._fadeWeight = 0;\r\n                            this._fadeState = 0;\r\n                            if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT_COMPLETE)) {\r\n                                event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT_COMPLETE);\r\n                                event.animationState = this;\r\n                                this._armature._eventList.push(event);\r\n                            }\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isComplete) {\r\n                    this.isComplete = true;\r\n                    if (this.loop < 0) {\r\n                        this.fadeOut((this._fadeOutWeight || this._fadeInTime) / this.timeScale, true);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            AnimationState.prototype.updateTimelineStates = function () {\r\n                if (this._mixingTransforms) {\r\n                    for (var timelineName in this._timelineStates) {\r\n                        if (this._mixingTransforms[timelineName] == null) {\r\n                            this.removeTimelineState(timelineName);\r\n                        }\r\n                    }\r\n\r\n                    for (timelineName in this._mixingTransforms) {\r\n                        if (!this._timelineStates[timelineName]) {\r\n                            this.addTimelineState(timelineName);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (timelineName in this.clip.getTimelines()) {\r\n                        if (!this._timelineStates[timelineName]) {\r\n                            this.addTimelineState(timelineName);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.addTimelineState = function (timelineName) {\r\n                var bone = this._armature.getBone(timelineName);\r\n                if (bone) {\r\n                    var timelineState = TimelineState._borrowObject();\r\n                    var timeline = this.clip.getTimeline(timelineName);\r\n                    timelineState.fadeIn(bone, this, timeline);\r\n                    this._timelineStates[timelineName] = timelineState;\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.removeTimelineState = function (timelineName) {\r\n                TimelineState._returnObject(this._timelineStates[timelineName]);\r\n                delete this._timelineStates[timelineName];\r\n            };\r\n\r\n            AnimationState.prototype.clear = function () {\r\n                this.clip = null;\r\n                this.enabled = false;\r\n\r\n                this._armature = null;\r\n                this._currentFrame = null;\r\n                this._mixingTransforms = null;\r\n\r\n                for (var timelineName in this._timelineStates) {\r\n                    this.removeTimelineState(timelineName);\r\n                }\r\n            };\r\n            AnimationState._pool = [];\r\n            return AnimationState;\r\n        })();\r\n        animation.AnimationState = AnimationState;\r\n\r\n        var Animation = (function () {\r\n            function Animation(armature) {\r\n                this._armature = armature;\r\n                this._animationLayer = [];\r\n                this._isPlaying = false;\r\n\r\n                this.animationNameList = [];\r\n                this.tweenEnabled = true;\r\n                this.timeScale = 1;\r\n            }\r\n            Animation.prototype.getLastAnimationName = function () {\r\n                return this._lastAnimationState ? this._lastAnimationState.name : null;\r\n            };\r\n\r\n            Animation.prototype.getLastAnimationState = function () {\r\n                return this._lastAnimationState;\r\n            };\r\n\r\n            Animation.prototype.getAnimationDataList = function () {\r\n                return this._animationDataList;\r\n            };\r\n            Animation.prototype.setAnimationDataList = function (value) {\r\n                this._animationDataList = value;\r\n                this.animationNameList.length = 0;\r\n                for (var index in this._animationDataList) {\r\n                    this.animationNameList[this.animationNameList.length] = this._animationDataList[index].name;\r\n                }\r\n            };\r\n\r\n            Animation.prototype.getIsPlaying = function () {\r\n                return this._isPlaying && !this.getIsComplete();\r\n            };\r\n\r\n            Animation.prototype.getIsComplete = function () {\r\n                if (this._lastAnimationState) {\r\n                    if (!this._lastAnimationState.isComplete) {\r\n                        return false;\r\n                    }\r\n                    var j = this._animationLayer.length;\r\n                    while (j--) {\r\n                        var animationStateList = this._animationLayer[j];\r\n                        var i = animationStateList.length;\r\n                        while (i--) {\r\n                            if (!animationStateList[i].isComplete) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            Animation.prototype.dispose = function () {\r\n                if (!this._armature) {\r\n                    return;\r\n                }\r\n                this.stop();\r\n                var i = this._animationLayer.length;\r\n                while (i--) {\r\n                    var animationStateList = this._animationLayer[i];\r\n                    var j = animationStateList.length;\r\n                    while (j--) {\r\n                        AnimationState._returnObject(animationStateList[j]);\r\n                    }\r\n                    animationStateList.length = 0;\r\n                }\r\n                this._animationLayer.length = 0;\r\n                this.animationNameList.length = 0;\r\n\r\n                this._armature = null;\r\n                this._animationLayer = null;\r\n                this._animationDataList = null;\r\n                this.animationNameList = null;\r\n            };\r\n\r\n            Animation.prototype.gotoAndPlay = function (animationName, fadeInTime, duration, loop, layer, group, fadeOutMode, displayControl, pauseFadeOut, pauseFadeIn) {\r\n                if (typeof fadeInTime === \"undefined\") { fadeInTime = -1; }\r\n                if (typeof duration === \"undefined\") { duration = -1; }\r\n                if (typeof loop === \"undefined\") { loop = NaN; }\r\n                if (typeof layer === \"undefined\") { layer = 0; }\r\n                if (typeof group === \"undefined\") { group = null; }\r\n                if (typeof fadeOutMode === \"undefined\") { fadeOutMode = Animation.SAME_LAYER_AND_GROUP; }\r\n                if (typeof displayControl === \"undefined\") { displayControl = true; }\r\n                if (typeof pauseFadeOut === \"undefined\") { pauseFadeOut = true; }\r\n                if (typeof pauseFadeIn === \"undefined\") { pauseFadeIn = true; }\r\n                if (!this._animationDataList) {\r\n                    return null;\r\n                }\r\n                var i = this._animationDataList.length;\r\n                var animationData;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        animationData = this._animationDataList[i];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!animationData) {\r\n                    return null;\r\n                }\r\n\r\n                this._isPlaying = true;\r\n\r\n                fadeInTime = fadeInTime < 0 ? (animationData.fadeInTime < 0 ? 0.3 : animationData.fadeInTime) : fadeInTime;\r\n\r\n                var durationScale;\r\n                if (duration < 0) {\r\n                    durationScale = animationData.scale < 0 ? 1 : animationData.scale;\r\n                } else {\r\n                    durationScale = duration / animationData.duration;\r\n                }\r\n\r\n                loop = isNaN(loop) ? animationData.loop : loop;\r\n                layer = this.addLayer(layer);\r\n\r\n                var animationState;\r\n                var animationStateList;\r\n                switch (fadeOutMode) {\r\n                    case Animation.NONE:\r\n                        break;\r\n                    case Animation.SAME_LAYER:\r\n                        animationStateList = this._animationLayer[layer];\r\n                        i = animationStateList.length;\r\n                        while (i--) {\r\n                            animationState = animationStateList[i];\r\n                            animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                        }\r\n                        break;\r\n                    case Animation.SAME_GROUP:\r\n                        j = this._animationLayer.length;\r\n                        while (j--) {\r\n                            animationStateList = this._animationLayer[j];\r\n                            i = animationStateList.length;\r\n                            while (i--) {\r\n                                animationState = animationStateList[i];\r\n                                if (animationState.group == group) {\r\n                                    animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case Animation.ALL:\r\n                        var j = this._animationLayer.length;\r\n                        while (j--) {\r\n                            animationStateList = this._animationLayer[j];\r\n                            i = animationStateList.length;\r\n                            while (i--) {\r\n                                animationState = animationStateList[i];\r\n                                animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case Animation.SAME_LAYER_AND_GROUP:\r\n                    default:\r\n                        animationStateList = this._animationLayer[layer];\r\n                        i = animationStateList.length;\r\n                        while (i--) {\r\n                            animationState = animationStateList[i];\r\n                            if (animationState.group == group) {\r\n                                animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                this._lastAnimationState = AnimationState._borrowObject();\r\n                this._lastAnimationState.group = group;\r\n                this._lastAnimationState.tweenEnabled = this.tweenEnabled;\r\n                this._lastAnimationState.fadeIn(this._armature, animationData, fadeInTime, 1 / durationScale, loop, layer, displayControl, pauseFadeIn);\r\n\r\n                this.addState(this._lastAnimationState);\r\n\r\n                var slotList = this._armature._slotList;\r\n                var slot;\r\n                var childArmature;\r\n                i = slotList.length;\r\n                while (i--) {\r\n                    slot = slotList[i];\r\n                    childArmature = slot.getChildArmature();\r\n                    if (childArmature) {\r\n                        childArmature.animation.gotoAndPlay(animationName, fadeInTime);\r\n                    }\r\n                }\r\n\r\n                return this._lastAnimationState;\r\n            };\r\n\r\n            Animation.prototype.play = function () {\r\n                if (!this._animationDataList || this._animationDataList.length == 0) {\r\n                    return;\r\n                }\r\n                if (!this._lastAnimationState) {\r\n                    this.gotoAndPlay(this._animationDataList[0].name);\r\n                } else if (!this._isPlaying) {\r\n                    this._isPlaying = true;\r\n                } else {\r\n                    this.gotoAndPlay(this._lastAnimationState.name);\r\n                }\r\n            };\r\n\r\n            Animation.prototype.stop = function () {\r\n                this._isPlaying = false;\r\n            };\r\n\r\n            Animation.prototype.getState = function (name, layer) {\r\n                if (typeof layer === \"undefined\") { layer = 0; }\r\n                var l = this._animationLayer.length;\r\n                if (l == 0) {\r\n                    return null;\r\n                } else if (layer >= l) {\r\n                    layer = l - 1;\r\n                }\r\n\r\n                var animationStateList = this._animationLayer[layer];\r\n                if (!animationStateList) {\r\n                    return null;\r\n                }\r\n                var i = animationStateList.length;\r\n                while (i--) {\r\n                    if (animationStateList[i].name == name) {\r\n                        return animationStateList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            Animation.prototype.hasAnimation = function (animationName) {\r\n                var i = this._animationDataList.length;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            Animation.prototype.advanceTime = function (passedTime) {\r\n                if (!this._isPlaying) {\r\n                    return;\r\n                }\r\n                passedTime *= this.timeScale;\r\n\r\n                var l = this._armature._boneList.length;\r\n                var i;\r\n                var j;\r\n                var k = l;\r\n                var stateListLength;\r\n                var bone;\r\n                var boneName;\r\n                var weigthLeft;\r\n\r\n                var x;\r\n                var y;\r\n                var skewX;\r\n                var skewY;\r\n                var scaleX;\r\n                var scaleY;\r\n                var pivotX;\r\n                var pivotY;\r\n\r\n                var layerTotalWeight;\r\n                var animationStateList;\r\n                var animationState;\r\n                var timelineState;\r\n                var weight;\r\n                var transform;\r\n                var pivot;\r\n\r\n                l--;\r\n                while (k--) {\r\n                    bone = this._armature._boneList[k];\r\n                    boneName = bone.name;\r\n                    weigthLeft = 1;\r\n\r\n                    x = 0;\r\n                    y = 0;\r\n                    skewX = 0;\r\n                    skewY = 0;\r\n                    scaleX = 0;\r\n                    scaleY = 0;\r\n                    pivotX = 0;\r\n                    pivotY = 0;\r\n\r\n                    i = this._animationLayer.length;\r\n                    while (i--) {\r\n                        layerTotalWeight = 0;\r\n                        animationStateList = this._animationLayer[i];\r\n                        stateListLength = animationStateList.length;\r\n                        for (j = 0; j < stateListLength; j++) {\r\n                            animationState = animationStateList[j];\r\n                            if (k == l) {\r\n                                if (animationState.advanceTime(passedTime)) {\r\n                                    this.removeState(animationState);\r\n                                    j--;\r\n                                    stateListLength--;\r\n                                    continue;\r\n                                }\r\n                            }\r\n\r\n                            timelineState = animationState._timelineStates[boneName];\r\n                            if (timelineState && timelineState.tweenActive) {\r\n                                weight = animationState._fadeWeight * animationState.weight * weigthLeft;\r\n                                transform = timelineState.transform;\r\n                                pivot = timelineState.pivot;\r\n                                x += transform.x * weight;\r\n                                y += transform.y * weight;\r\n                                skewX += transform.skewX * weight;\r\n                                skewY += transform.skewY * weight;\r\n                                scaleX += transform.scaleX * weight;\r\n                                scaleY += transform.scaleY * weight;\r\n                                pivotX += pivot.x * weight;\r\n                                pivotY += pivot.y * weight;\r\n\r\n                                layerTotalWeight += weight;\r\n                            }\r\n                        }\r\n\r\n                        if (layerTotalWeight >= weigthLeft) {\r\n                            break;\r\n                        } else {\r\n                            weigthLeft -= layerTotalWeight;\r\n                        }\r\n                    }\r\n                    transform = bone.tween;\r\n                    pivot = bone._tweenPivot;\r\n\r\n                    transform.x = x;\r\n                    transform.y = y;\r\n                    transform.skewX = skewX;\r\n                    transform.skewY = skewY;\r\n                    transform.scaleX = scaleX;\r\n                    transform.scaleY = scaleY;\r\n                    pivot.x = pivotX;\r\n                    pivot.y = pivotY;\r\n                }\r\n            };\r\n\r\n            Animation.prototype.addLayer = function (layer) {\r\n                if (layer >= this._animationLayer.length) {\r\n                    layer = this._animationLayer.length;\r\n                    this._animationLayer[layer] = [];\r\n                }\r\n                return layer;\r\n            };\r\n\r\n            Animation.prototype.addState = function (animationState) {\r\n                var animationStateList = this._animationLayer[animationState.layer];\r\n                animationStateList.push(animationState);\r\n            };\r\n\r\n            Animation.prototype.removeState = function (animationState) {\r\n                var layer = animationState.layer;\r\n                var animationStateList = this._animationLayer[layer];\r\n                animationStateList.splice(animationStateList.indexOf(animationState), 1);\r\n\r\n                AnimationState._returnObject(animationState);\r\n\r\n                if (animationStateList.length == 0 && layer == this._animationLayer.length - 1) {\r\n                    this._animationLayer.length--;\r\n                }\r\n            };\r\n            Animation.NONE = \"none\";\r\n            Animation.SAME_LAYER = \"sameLayer\";\r\n            Animation.SAME_GROUP = \"sameGroup\";\r\n            Animation.SAME_LAYER_AND_GROUP = \"sameLayerAndGroup\";\r\n            Animation.ALL = \"all\";\r\n            return Animation;\r\n        })();\r\n        animation.Animation = Animation;\r\n    })(dragonBones.animation || (dragonBones.animation = {}));\r\n    var animation = dragonBones.animation;\r\n\r\n    (function (objects) {\r\n        var DBTransform = (function () {\r\n            function DBTransform() {\r\n                this.x = 0;\r\n                this.y = 0;\r\n                this.skewX = 0;\r\n                this.skewY = 0;\r\n                this.scaleX = 1;\r\n                this.scaleY = 1;\r\n            }\r\n            DBTransform.prototype.getRotation = function () {\r\n                return this.skewX;\r\n            };\r\n            DBTransform.prototype.setRotation = function (value) {\r\n                this.skewX = this.skewY = value;\r\n            };\r\n\r\n            DBTransform.prototype.copy = function (transform) {\r\n                this.x = transform.x;\r\n                this.y = transform.y;\r\n                this.skewX = transform.skewX;\r\n                this.skewY = transform.skewY;\r\n                this.scaleX = transform.scaleX;\r\n                this.scaleY = transform.scaleY;\r\n            };\r\n\r\n            DBTransform.prototype.toString = function () {\r\n                return \"[DBTransform (x=\" + this.x + \" y=\" + this.y + \" skewX=\" + this.skewX + \" skewY=\" + this.skewY + \" scaleX=\" + this.scaleX + \" scaleY=\" + this.scaleY + \")]\";\r\n            };\r\n            return DBTransform;\r\n        })();\r\n        objects.DBTransform = DBTransform;\r\n\r\n        var Frame = (function () {\r\n            function Frame() {\r\n                this.position = 0;\r\n                this.duration = 0;\r\n            }\r\n            Frame.prototype.dispose = function () {\r\n            };\r\n            return Frame;\r\n        })();\r\n        objects.Frame = Frame;\r\n\r\n        var TransformFrame = (function (_super) {\r\n            __extends(TransformFrame, _super);\r\n            function TransformFrame() {\r\n                _super.call(this);\r\n\r\n                this.tweenEasing = 0;\r\n                this.tweenRotate = 0;\r\n                this.displayIndex = 0;\r\n                this.zOrder = NaN;\r\n                this.visible = true;\r\n\r\n                this.global = new DBTransform();\r\n                this.transform = new DBTransform();\r\n                this.pivot = new geom.Point();\r\n            }\r\n            TransformFrame.prototype.dispose = function () {\r\n                _super.prototype.dispose.call(this);\r\n                this.global = null;\r\n                this.transform = null;\r\n\r\n                this.pivot = null;\r\n                this.color = null;\r\n            };\r\n            return TransformFrame;\r\n        })(Frame);\r\n        objects.TransformFrame = TransformFrame;\r\n\r\n        var Timeline = (function () {\r\n            function Timeline() {\r\n                this._frameList = [];\r\n                this.duration = 0;\r\n                this.scale = 1;\r\n            }\r\n            Timeline.prototype.getFrameList = function () {\r\n                return this._frameList;\r\n            };\r\n\r\n            Timeline.prototype.dispose = function () {\r\n                var i = this._frameList.length;\r\n                while (i--) {\r\n                    this._frameList[i].dispose();\r\n                }\r\n                this._frameList.length = 0;\r\n                this._frameList = null;\r\n            };\r\n\r\n            Timeline.prototype.addFrame = function (frame) {\r\n                if (!frame) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._frameList.indexOf(frame) < 0) {\r\n                    this._frameList[this._frameList.length] = frame;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n            return Timeline;\r\n        })();\r\n        objects.Timeline = Timeline;\r\n\r\n        var TransformTimeline = (function (_super) {\r\n            __extends(TransformTimeline, _super);\r\n            function TransformTimeline() {\r\n                _super.call(this);\r\n                this.originTransform = new DBTransform();\r\n                this.originPivot = new geom.Point();\r\n                this.offset = 0;\r\n                this.transformed = false;\r\n            }\r\n            TransformTimeline.prototype.dispose = function () {\r\n                if (this == TransformTimeline.HIDE_TIMELINE) {\r\n                    return;\r\n                }\r\n                _super.prototype.dispose.call(this);\r\n                this.originTransform = null;\r\n                this.originPivot = null;\r\n            };\r\n            TransformTimeline.HIDE_TIMELINE = new TransformTimeline();\r\n            return TransformTimeline;\r\n        })(Timeline);\r\n        objects.TransformTimeline = TransformTimeline;\r\n\r\n        var AnimationData = (function (_super) {\r\n            __extends(AnimationData, _super);\r\n            function AnimationData() {\r\n                _super.call(this);\r\n                this.frameRate = 0;\r\n                this.loop = 0;\r\n                this.tweenEasing = NaN;\r\n                this.fadeInTime = 0;\r\n\r\n                this._timelines = {};\r\n            }\r\n            AnimationData.prototype.getTimelines = function () {\r\n                return this._timelines;\r\n            };\r\n\r\n            AnimationData.prototype.dispose = function () {\r\n                _super.prototype.dispose.call(this);\r\n\r\n                for (var timelineName in this._timelines) {\r\n                    (this._timelines[timelineName]).dispose();\r\n                }\r\n                this._timelines = null;\r\n            };\r\n\r\n            AnimationData.prototype.getTimeline = function (timelineName) {\r\n                return this._timelines[timelineName];\r\n            };\r\n\r\n            AnimationData.prototype.addTimeline = function (timeline, timelineName) {\r\n                if (!timeline) {\r\n                    throw new Error();\r\n                }\r\n\r\n                this._timelines[timelineName] = timeline;\r\n            };\r\n            return AnimationData;\r\n        })(Timeline);\r\n        objects.AnimationData = AnimationData;\r\n\r\n        var DisplayData = (function () {\r\n            function DisplayData() {\r\n                this.transform = new DBTransform();\r\n            }\r\n            DisplayData.prototype.dispose = function () {\r\n                this.transform = null;\r\n                this.pivot = null;\r\n            };\r\n            DisplayData.ARMATURE = \"armature\";\r\n            DisplayData.IMAGE = \"image\";\r\n            return DisplayData;\r\n        })();\r\n        objects.DisplayData = DisplayData;\r\n\r\n        var SlotData = (function () {\r\n            function SlotData() {\r\n                this._displayDataList = [];\r\n                this.zOrder = 0;\r\n            }\r\n            SlotData.prototype.getDisplayDataList = function () {\r\n                return this._displayDataList;\r\n            };\r\n\r\n            SlotData.prototype.dispose = function () {\r\n                var i = this._displayDataList.length;\r\n                while (i--) {\r\n                    this._displayDataList[i].dispose();\r\n                }\r\n                this._displayDataList.length = 0;\r\n                this._displayDataList = null;\r\n            };\r\n\r\n            SlotData.prototype.addDisplayData = function (displayData) {\r\n                if (!displayData) {\r\n                    throw new Error();\r\n                }\r\n                if (this._displayDataList.indexOf(displayData) < 0) {\r\n                    this._displayDataList[this._displayDataList.length] = displayData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            SlotData.prototype.getDisplayData = function (displayName) {\r\n                var i = this._displayDataList.length;\r\n                while (i--) {\r\n                    if (this._displayDataList[i].name == displayName) {\r\n                        return this._displayDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n            return SlotData;\r\n        })();\r\n        objects.SlotData = SlotData;\r\n\r\n        var BoneData = (function () {\r\n            function BoneData() {\r\n                this.length = 0;\r\n                this.global = new DBTransform();\r\n                this.transform = new DBTransform();\r\n            }\r\n            BoneData.prototype.dispose = function () {\r\n                this.global = null;\r\n                this.transform = null;\r\n            };\r\n            return BoneData;\r\n        })();\r\n        objects.BoneData = BoneData;\r\n\r\n        var SkinData = (function () {\r\n            function SkinData() {\r\n                this._slotDataList = [];\r\n            }\r\n            SkinData.prototype.getSlotDataList = function () {\r\n                return this._slotDataList;\r\n            };\r\n\r\n            SkinData.prototype.dispose = function () {\r\n                var i = this._slotDataList.length;\r\n                while (i--) {\r\n                    this._slotDataList[i].dispose();\r\n                }\r\n                this._slotDataList.length = 0;\r\n                this._slotDataList = null;\r\n            };\r\n\r\n            SkinData.prototype.getSlotData = function (slotName) {\r\n                var i = this._slotDataList.length;\r\n                while (i--) {\r\n                    if (this._slotDataList[i].name == slotName) {\r\n                        return this._slotDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            SkinData.prototype.addSlotData = function (slotData) {\r\n                if (!slotData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._slotDataList.indexOf(slotData) < 0) {\r\n                    this._slotDataList[this._slotDataList.length] = slotData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n            return SkinData;\r\n        })();\r\n        objects.SkinData = SkinData;\r\n\r\n        var ArmatureData = (function () {\r\n            function ArmatureData() {\r\n                this._boneDataList = [];\r\n                this._skinDataList = [];\r\n                this._animationDataList = [];\r\n            }\r\n            ArmatureData.prototype.getBoneDataList = function () {\r\n                return this._boneDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.getSkinDataList = function () {\r\n                return this._skinDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.getAnimationDataList = function () {\r\n                return this._animationDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.dispose = function () {\r\n                var i = this._boneDataList.length;\r\n                while (i--) {\r\n                    this._boneDataList[i].dispose();\r\n                }\r\n                i = this._skinDataList.length;\r\n                while (i--) {\r\n                    this._skinDataList[i].dispose();\r\n                }\r\n                i = this._animationDataList.length;\r\n                while (i--) {\r\n                    this._animationDataList[i].dispose();\r\n                }\r\n                this._boneDataList.length = 0;\r\n                this._skinDataList.length = 0;\r\n                this._animationDataList.length = 0;\r\n                this._boneDataList = null;\r\n                this._skinDataList = null;\r\n                this._animationDataList = null;\r\n            };\r\n\r\n            ArmatureData.prototype.getBoneData = function (boneName) {\r\n                var i = this._boneDataList.length;\r\n                while (i--) {\r\n                    if (this._boneDataList[i].name == boneName) {\r\n                        return this._boneDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.getSkinData = function (skinName) {\r\n                if (!skinName) {\r\n                    return this._skinDataList[0];\r\n                }\r\n                var i = this._skinDataList.length;\r\n                while (i--) {\r\n                    if (this._skinDataList[i].name == skinName) {\r\n                        return this._skinDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.getAnimationData = function (animationName) {\r\n                var i = this._animationDataList.length;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        return this._animationDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.addBoneData = function (boneData) {\r\n                if (!boneData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._boneDataList.indexOf(boneData) < 0) {\r\n                    this._boneDataList[this._boneDataList.length] = boneData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.addSkinData = function (skinData) {\r\n                if (!skinData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._skinDataList.indexOf(skinData) < 0) {\r\n                    this._skinDataList[this._skinDataList.length] = skinData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.addAnimationData = function (animationData) {\r\n                if (!animationData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._animationDataList.indexOf(animationData) < 0) {\r\n                    this._animationDataList[this._animationDataList.length] = animationData;\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.sortBoneDataList = function () {\r\n                var i = this._boneDataList.length;\r\n                if (i == 0) {\r\n                    return;\r\n                }\r\n\r\n                var helpArray = [];\r\n                while (i--) {\r\n                    var boneData = this._boneDataList[i];\r\n                    var level = 0;\r\n                    var parentData = boneData;\r\n                    while (parentData && parentData.parent) {\r\n                        level++;\r\n                        parentData = this.getBoneData(parentData.parent);\r\n                    }\r\n                    helpArray[i] = { level: level, boneData: boneData };\r\n                }\r\n\r\n                helpArray.sort(this.sortBoneData);\r\n\r\n                i = helpArray.length;\r\n                while (i--) {\r\n                    this._boneDataList[i] = helpArray[i].boneData;\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.sortBoneData = function (object1, object2) {\r\n                return object1.level > object2.level ? 1 : -1;\r\n            };\r\n            return ArmatureData;\r\n        })();\r\n        objects.ArmatureData = ArmatureData;\r\n\r\n        var SkeletonData = (function () {\r\n            function SkeletonData() {\r\n                this._armatureDataList = [];\r\n                this._subTexturePivots = {};\r\n            }\r\n            SkeletonData.prototype.getArmatureNames = function () {\r\n                var nameList = [];\r\n                for (var armatureDataIndex in this._armatureDataList) {\r\n                    nameList[nameList.length] = this._armatureDataList[armatureDataIndex].name;\r\n                }\r\n                return nameList;\r\n            };\r\n\r\n            SkeletonData.prototype.getArmatureDataList = function () {\r\n                return this._armatureDataList;\r\n            };\r\n\r\n            SkeletonData.prototype.dispose = function () {\r\n                for (var armatureDataIndex in this._armatureDataList) {\r\n                    this._armatureDataList[armatureDataIndex].dispose();\r\n                }\r\n                this._armatureDataList.length = 0;\r\n\r\n                this._armatureDataList = null;\r\n                this._subTexturePivots = null;\r\n            };\r\n\r\n            SkeletonData.prototype.getArmatureData = function (armatureName) {\r\n                var i = this._armatureDataList.length;\r\n                while (i--) {\r\n                    if (this._armatureDataList[i].name == armatureName) {\r\n                        return this._armatureDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            SkeletonData.prototype.addArmatureData = function (armatureData) {\r\n                if (!armatureData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._armatureDataList.indexOf(armatureData) < 0) {\r\n                    this._armatureDataList[this._armatureDataList.length] = armatureData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.removeArmatureData = function (armatureData) {\r\n                var index = this._armatureDataList.indexOf(armatureData);\r\n                if (index >= 0) {\r\n                    this._armatureDataList.splice(index, 1);\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.removeArmatureDataByName = function (armatureName) {\r\n                var i = this._armatureDataList.length;\r\n                while (i--) {\r\n                    if (this._armatureDataList[i].name == armatureName) {\r\n                        this._armatureDataList.splice(i, 1);\r\n                    }\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.getSubTexturePivot = function (subTextureName) {\r\n                return this._subTexturePivots[subTextureName];\r\n            };\r\n\r\n            SkeletonData.prototype.addSubTexturePivot = function (x, y, subTextureName) {\r\n                var point = this._subTexturePivots[subTextureName];\r\n                if (point) {\r\n                    point.x = x;\r\n                    point.y = y;\r\n                } else {\r\n                    this._subTexturePivots[subTextureName] = point = new geom.Point(x, y);\r\n                }\r\n\r\n                return point;\r\n            };\r\n\r\n            SkeletonData.prototype.removeSubTexturePivot = function (subTextureName) {\r\n                if (subTextureName) {\r\n                    delete this._subTexturePivots[subTextureName];\r\n                } else {\r\n                    for (subTextureName in this._subTexturePivots) {\r\n                        delete this._subTexturePivots[subTextureName];\r\n                    }\r\n                }\r\n            };\r\n            return SkeletonData;\r\n        })();\r\n        objects.SkeletonData = SkeletonData;\r\n\r\n        var DataParser = (function () {\r\n            function DataParser() {\r\n            }\r\n            DataParser.parseTextureAtlasData = function (rawData, scale) {\r\n                if (typeof scale === \"undefined\") { scale = 1; }\r\n                if (!rawData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var textureAtlasData = {};\r\n                textureAtlasData.__name = rawData[utils.ConstValues.A_NAME];\r\n                var subTextureList = rawData[utils.ConstValues.SUB_TEXTURE];\r\n                for (var index in subTextureList) {\r\n                    var subTextureObject = subTextureList[index];\r\n                    var subTextureName = subTextureObject[utils.ConstValues.A_NAME];\r\n                    var subTextureData = new geom.Rectangle(Number(subTextureObject[utils.ConstValues.A_X]) / scale, Number(subTextureObject[utils.ConstValues.A_Y]) / scale, Number(subTextureObject[utils.ConstValues.A_WIDTH]) / scale, Number(subTextureObject[utils.ConstValues.A_HEIGHT]) / scale);\r\n                    textureAtlasData[subTextureName] = subTextureData;\r\n                }\r\n\r\n                return textureAtlasData;\r\n            };\r\n\r\n            DataParser.parseSkeletonData = function (rawData) {\r\n                if (!rawData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var frameRate = Number(rawData[utils.ConstValues.A_FRAME_RATE]);\r\n                var data = new SkeletonData();\r\n                data.name = rawData[utils.ConstValues.A_NAME];\r\n\r\n                var armatureObjectList = rawData[utils.ConstValues.ARMATURE];\r\n                for (var index in armatureObjectList) {\r\n                    var armatureObject = armatureObjectList[index];\r\n                    data.addArmatureData(DataParser.parseArmatureData(armatureObject, data, frameRate));\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n            DataParser.parseArmatureData = function (armatureObject, data, frameRate) {\r\n                var armatureData = new ArmatureData();\r\n                armatureData.name = armatureObject[utils.ConstValues.A_NAME];\r\n\r\n                var boneObjectList = armatureObject[utils.ConstValues.BONE];\r\n                for (var index in boneObjectList) {\r\n                    var boneObject = boneObjectList[index];\r\n                    armatureData.addBoneData(DataParser.parseBoneData(boneObject));\r\n                }\r\n\r\n                var skinObjectList = armatureObject[utils.ConstValues.SKIN];\r\n                for (var index in skinObjectList) {\r\n                    var skinObject = skinObjectList[index];\r\n                    armatureData.addSkinData(DataParser.parseSkinData(skinObject, data));\r\n                }\r\n\r\n                utils.DBDataUtil.transformArmatureData(armatureData);\r\n                armatureData.sortBoneDataList();\r\n\r\n                var animationObjectList = armatureObject[utils.ConstValues.ANIMATION];\r\n\r\n                for (var index in animationObjectList) {\r\n                    var animationObject = animationObjectList[index];\r\n                    armatureData.addAnimationData(DataParser.parseAnimationData(animationObject, armatureData, frameRate));\r\n                }\r\n\r\n                return armatureData;\r\n            };\r\n\r\n            DataParser.parseBoneData = function (boneObject) {\r\n                var boneData = new BoneData();\r\n                boneData.name = boneObject[utils.ConstValues.A_NAME];\r\n                boneData.parent = boneObject[utils.ConstValues.A_PARENT];\r\n                boneData.length = Number(boneObject[utils.ConstValues.A_LENGTH]) || 0;\r\n\r\n                DataParser.parseTransform(boneObject[utils.ConstValues.TRANSFORM], boneData.global);\r\n                boneData.transform.copy(boneData.global);\r\n\r\n                return boneData;\r\n            };\r\n\r\n            DataParser.parseSkinData = function (skinObject, data) {\r\n                var skinData = new SkinData();\r\n                skinData.name = skinObject[utils.ConstValues.A_NAME];\r\n                var slotObjectList = skinObject[utils.ConstValues.SLOT];\r\n                for (var index in slotObjectList) {\r\n                    var slotObject = slotObjectList[index];\r\n                    skinData.addSlotData(DataParser.parseSlotData(slotObject, data));\r\n                }\r\n\r\n                return skinData;\r\n            };\r\n\r\n            DataParser.parseSlotData = function (slotObject, data) {\r\n                var slotData = new SlotData();\r\n                slotData.name = slotObject[utils.ConstValues.A_NAME];\r\n                slotData.parent = slotObject[utils.ConstValues.A_PARENT];\r\n                slotData.zOrder = Number(slotObject[utils.ConstValues.A_Z_ORDER]);\r\n\r\n                var displayObjectList = slotObject[utils.ConstValues.DISPLAY];\r\n                for (var index in displayObjectList) {\r\n                    var displayObject = displayObjectList[index];\r\n                    slotData.addDisplayData(DataParser.parseDisplayData(displayObject, data));\r\n                }\r\n\r\n                return slotData;\r\n            };\r\n\r\n            DataParser.parseDisplayData = function (displayObject, data) {\r\n                var displayData = new DisplayData();\r\n                displayData.name = displayObject[utils.ConstValues.A_NAME];\r\n                displayData.type = displayObject[utils.ConstValues.A_TYPE];\r\n\r\n                displayData.pivot = data.addSubTexturePivot(0, 0, displayData.name);\r\n\r\n                DataParser.parseTransform(displayObject[utils.ConstValues.TRANSFORM], displayData.transform, displayData.pivot);\r\n\r\n                return displayData;\r\n            };\r\n\r\n            DataParser.parseAnimationData = function (animationObject, armatureData, frameRate) {\r\n                var animationData = new AnimationData();\r\n                animationData.name = animationObject[utils.ConstValues.A_NAME];\r\n                animationData.frameRate = frameRate;\r\n                animationData.loop = Number(animationObject[utils.ConstValues.A_LOOP]) || 0;\r\n                animationData.fadeInTime = Number(animationObject[utils.ConstValues.A_FADE_IN_TIME]);\r\n                animationData.duration = Number(animationObject[utils.ConstValues.A_DURATION]) / frameRate;\r\n                animationData.scale = Number(animationObject[utils.ConstValues.A_SCALE]);\r\n\r\n                if (animationObject.hasOwnProperty(utils.ConstValues.A_TWEEN_EASING)) {\r\n                    var tweenEase = animationObject[utils.ConstValues.A_TWEEN_EASING];\r\n                    if (tweenEase == undefined || tweenEase == null) {\r\n                        animationData.tweenEasing = NaN;\r\n                    } else {\r\n                        animationData.tweenEasing = Number(tweenEase);\r\n                    }\r\n                } else {\r\n                    animationData.tweenEasing = NaN;\r\n                }\r\n\r\n                DataParser.parseTimeline(animationObject, animationData, DataParser.parseMainFrame, frameRate);\r\n\r\n                var timeline;\r\n                var timelineName;\r\n                var timelineObjectList = animationObject[utils.ConstValues.TIMELINE];\r\n                for (var index in timelineObjectList) {\r\n                    var timelineObject = timelineObjectList[index];\r\n                    timeline = DataParser.parseTransformTimeline(timelineObject, animationData.duration, frameRate);\r\n                    timelineName = timelineObject[utils.ConstValues.A_NAME];\r\n                    animationData.addTimeline(timeline, timelineName);\r\n                }\r\n\r\n                utils.DBDataUtil.addHideTimeline(animationData, armatureData);\r\n                utils.DBDataUtil.transformAnimationData(animationData, armatureData);\r\n\r\n                return animationData;\r\n            };\r\n\r\n            DataParser.parseTimeline = function (timelineObject, timeline, frameParser, frameRate) {\r\n                var position = 0;\r\n                var frame;\r\n                var frameObjectList = timelineObject[utils.ConstValues.FRAME];\r\n                for (var index in frameObjectList) {\r\n                    var frameObject = frameObjectList[index];\r\n                    frame = frameParser(frameObject, frameRate);\r\n                    frame.position = position;\r\n                    timeline.addFrame(frame);\r\n                    position += frame.duration;\r\n                }\r\n                if (frame) {\r\n                    frame.duration = timeline.duration - frame.position;\r\n                }\r\n            };\r\n\r\n            DataParser.parseTransformTimeline = function (timelineObject, duration, frameRate) {\r\n                var timeline = new TransformTimeline();\r\n                timeline.duration = duration;\r\n\r\n                DataParser.parseTimeline(timelineObject, timeline, DataParser.parseTransformFrame, frameRate);\r\n\r\n                timeline.scale = Number(timelineObject[utils.ConstValues.A_SCALE]);\r\n                timeline.offset = Number(timelineObject[utils.ConstValues.A_OFFSET]);\r\n\r\n                return timeline;\r\n            };\r\n\r\n            DataParser.parseFrame = function (frameObject, frame, frameRate) {\r\n                frame.duration = Number(frameObject[utils.ConstValues.A_DURATION]) / frameRate;\r\n                frame.action = frameObject[utils.ConstValues.A_ACTION];\r\n                frame.event = frameObject[utils.ConstValues.A_EVENT];\r\n                frame.sound = frameObject[utils.ConstValues.A_SOUND];\r\n            };\r\n\r\n            DataParser.parseMainFrame = function (frameObject, frameRate) {\r\n                var frame = new Frame();\r\n                DataParser.parseFrame(frameObject, frame, frameRate);\r\n                return frame;\r\n            };\r\n\r\n            DataParser.parseTransformFrame = function (frameObject, frameRate) {\r\n                var frame = new TransformFrame();\r\n                DataParser.parseFrame(frameObject, frame, frameRate);\r\n\r\n                frame.visible = Number(frameObject[utils.ConstValues.A_HIDE]) != 1;\r\n\r\n                if (frameObject.hasOwnProperty(utils.ConstValues.A_TWEEN_EASING)) {\r\n                    var tweenEase = frameObject[utils.ConstValues.A_TWEEN_EASING];\r\n                    if (tweenEase == undefined || tweenEase == null) {\r\n                        frame.tweenEasing = NaN;\r\n                    } else {\r\n                        frame.tweenEasing = Number(tweenEase);\r\n                    }\r\n                } else {\r\n                    frame.tweenEasing = 0;\r\n                }\r\n\r\n                frame.tweenRotate = Number(frameObject[utils.ConstValues.A_TWEEN_ROTATE]) || 0;\r\n                frame.displayIndex = Number(frameObject[utils.ConstValues.A_DISPLAY_INDEX]) || 0;\r\n\r\n                frame.zOrder = Number(frameObject[utils.ConstValues.A_Z_ORDER]) || 0;\r\n\r\n                DataParser.parseTransform(frameObject[utils.ConstValues.TRANSFORM], frame.global, frame.pivot);\r\n                frame.transform.copy(frame.global);\r\n\r\n                var colorTransformObject = frameObject[utils.ConstValues.COLOR_TRANSFORM];\r\n                if (colorTransformObject) {\r\n                    frame.color = new geom.ColorTransform();\r\n                    frame.color.alphaOffset = Number(colorTransformObject[utils.ConstValues.A_ALPHA_OFFSET]);\r\n                    frame.color.redOffset = Number(colorTransformObject[utils.ConstValues.A_RED_OFFSET]);\r\n                    frame.color.greenOffset = Number(colorTransformObject[utils.ConstValues.A_GREEN_OFFSET]);\r\n                    frame.color.blueOffset = Number(colorTransformObject[utils.ConstValues.A_BLUE_OFFSET]);\r\n\r\n                    frame.color.alphaMultiplier = Number(colorTransformObject[utils.ConstValues.A_ALPHA_MULTIPLIER]) * 0.01;\r\n                    frame.color.redMultiplier = Number(colorTransformObject[utils.ConstValues.A_RED_MULTIPLIER]) * 0.01;\r\n                    frame.color.greenMultiplier = Number(colorTransformObject[utils.ConstValues.A_GREEN_MULTIPLIER]) * 0.01;\r\n                    frame.color.blueMultiplier = Number(colorTransformObject[utils.ConstValues.A_BLUE_MULTIPLIER]) * 0.01;\r\n                }\r\n\r\n                return frame;\r\n            };\r\n\r\n            DataParser.parseTransform = function (transformObject, transform, pivot) {\r\n                if (typeof pivot === \"undefined\") { pivot = null; }\r\n                if (transformObject) {\r\n                    if (transform) {\r\n                        transform.x = Number(transformObject[utils.ConstValues.A_X]);\r\n                        transform.y = Number(transformObject[utils.ConstValues.A_Y]);\r\n                        transform.skewX = Number(transformObject[utils.ConstValues.A_SKEW_X]) * utils.ConstValues.ANGLE_TO_RADIAN;\r\n                        transform.skewY = Number(transformObject[utils.ConstValues.A_SKEW_Y]) * utils.ConstValues.ANGLE_TO_RADIAN;\r\n                        transform.scaleX = Number(transformObject[utils.ConstValues.A_SCALE_X]);\r\n                        transform.scaleY = Number(transformObject[utils.ConstValues.A_SCALE_Y]);\r\n                    }\r\n                    if (pivot) {\r\n                        pivot.x = Number(transformObject[utils.ConstValues.A_PIVOT_X]);\r\n                        pivot.y = Number(transformObject[utils.ConstValues.A_PIVOT_Y]);\r\n                    }\r\n                }\r\n            };\r\n            return DataParser;\r\n        })();\r\n        objects.DataParser = DataParser;\r\n    })(dragonBones.objects || (dragonBones.objects = {}));\r\n    var objects = dragonBones.objects;\r\n\r\n    (function (factorys) {\r\n        var BaseFactory = (function (_super) {\r\n            __extends(BaseFactory, _super);\r\n            function BaseFactory() {\r\n                _super.call(this);\r\n\r\n                this._dataDic = {};\r\n                this._textureAtlasDic = {};\r\n                this._textureAtlasLoadingDic = {};\r\n            }\r\n            BaseFactory.prototype.getSkeletonData = function (name) {\r\n                return this._dataDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.addSkeletonData = function (data, name) {\r\n                if (!data) {\r\n                    throw new Error();\r\n                }\r\n                name = name || data.name;\r\n                if (!name) {\r\n                    throw new Error(\"Unnamed data!\");\r\n                }\r\n                if (this._dataDic[name]) {\r\n                }\r\n                this._dataDic[name] = data;\r\n            };\r\n\r\n            BaseFactory.prototype.removeSkeletonData = function (name) {\r\n                delete this._dataDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.getTextureAtlas = function (name) {\r\n                return this._textureAtlasDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.addTextureAtlas = function (textureAtlas, name) {\r\n                if (!textureAtlas) {\r\n                    throw new Error();\r\n                }\r\n\r\n                name = name || textureAtlas.name;\r\n                if (!name) {\r\n                    throw new Error(\"Unnamed data!\");\r\n                }\r\n                if (this._textureAtlasDic[name]) {\r\n                }\r\n                this._textureAtlasDic[name] = textureAtlas;\r\n            };\r\n\r\n            BaseFactory.prototype.removeTextureAtlas = function (name) {\r\n                delete this._textureAtlasDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.dispose = function (disposeData) {\r\n                if (typeof disposeData === \"undefined\") { disposeData = true; }\r\n                if (disposeData) {\r\n                    for (var i in this._dataDic) {\r\n                        this._dataDic[i].dispose();\r\n                    }\r\n                    for (var i in this._textureAtlasDic) {\r\n                        this._textureAtlasDic[i].dispose();\r\n                    }\r\n                }\r\n                this._dataDic = null;\r\n                this._textureAtlasDic = null;\r\n                this._textureAtlasLoadingDic = null;\r\n                this._currentDataName = null;\r\n                this._currentTextureAtlasName = null;\r\n            };\r\n\r\n            BaseFactory.prototype.buildArmature = function (armatureName, animationName, skeletonName, textureAtlasName, skinName) {\r\n                if (skeletonName) {\r\n                    var data = this._dataDic[skeletonName];\r\n                    if (data) {\r\n                        var armatureData = data.getArmatureData(armatureName);\r\n                    }\r\n                } else {\r\n                    for (skeletonName in this._dataDic) {\r\n                        data = this._dataDic[skeletonName];\r\n                        armatureData = data.getArmatureData(armatureName);\r\n                        if (armatureData) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!armatureData) {\r\n                    return null;\r\n                }\r\n\r\n                this._currentDataName = skeletonName;\r\n                this._currentTextureAtlasName = textureAtlasName || skeletonName;\r\n\r\n                var armature = this._generateArmature();\r\n                armature.name = armatureName;\r\n                var bone;\r\n                var boneData;\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                for (var index in boneDataList) {\r\n                    boneData = boneDataList[index];\r\n                    bone = new dragonBones.Bone();\r\n                    bone.name = boneData.name;\r\n                    bone.origin.copy(boneData.transform);\r\n                    if (armatureData.getBoneData(boneData.parent)) {\r\n                        armature.addChild(bone, boneData.parent);\r\n                    } else {\r\n                        armature.addChild(bone, null);\r\n                    }\r\n                }\r\n\r\n                if (animationName && animationName != armatureName) {\r\n                    var animationArmatureData = data.getArmatureData(animationName);\r\n                    if (!animationArmatureData) {\r\n                        for (skeletonName in this._dataDic) {\r\n                            data = this._dataDic[skeletonName];\r\n                            animationArmatureData = data.getArmatureData(animationName);\r\n                            if (animationArmatureData) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (animationArmatureData) {\r\n                    armature.animation.setAnimationDataList(animationArmatureData.getAnimationDataList());\r\n                } else {\r\n                    armature.animation.setAnimationDataList(armatureData.getAnimationDataList());\r\n                }\r\n\r\n                var skinData = armatureData.getSkinData(skinName);\r\n                if (!skinData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var slot;\r\n                var displayData;\r\n                var childArmature;\r\n                var i;\r\n                var helpArray = [];\r\n                var slotData;\r\n                var slotDataList = skinData.getSlotDataList();\r\n                var displayDataList;\r\n                for (var index in slotDataList) {\r\n                    slotData = slotDataList[index];\r\n                    bone = armature.getBone(slotData.parent);\r\n                    if (!bone) {\r\n                        continue;\r\n                    }\r\n                    displayDataList = slotData.getDisplayDataList();\r\n                    slot = this._generateSlot();\r\n                    slot.name = slotData.name;\r\n                    slot._originZOrder = slotData.zOrder;\r\n                    slot._dislayDataList = displayDataList;\r\n\r\n                    helpArray.length = 0;\r\n                    i = displayDataList.length;\r\n                    while (i--) {\r\n                        displayData = displayDataList[i];\r\n                        switch (displayData.type) {\r\n                            case objects.DisplayData.ARMATURE:\r\n                                childArmature = this.buildArmature(displayData.name, null, this._currentDataName, this._currentTextureAtlasName, null);\r\n                                if (childArmature) {\r\n                                    helpArray[i] = childArmature;\r\n                                }\r\n                                break;\r\n                            case objects.DisplayData.IMAGE:\r\n                            default:\r\n                                helpArray[i] = this._generateDisplay(this._textureAtlasDic[this._currentTextureAtlasName], displayData.name, displayData.pivot.x, displayData.pivot.y);\r\n                                break;\r\n                        }\r\n                    }\r\n                    slot.setDisplayList(helpArray);\r\n                    slot._changeDisplay(0);\r\n                    bone.addChild(slot);\r\n                }\r\n\r\n                armature._slotsZOrderChanged = true;\r\n                armature.advanceTime(0);\r\n                return armature;\r\n            };\r\n\r\n            BaseFactory.prototype.getTextureDisplay = function (textureName, textureAtlasName, pivotX, pivotY) {\r\n                if (textureAtlasName) {\r\n                    var textureAtlas = this._textureAtlasDic[textureAtlasName];\r\n                }\r\n                if (!textureAtlas && !textureAtlasName) {\r\n                    for (textureAtlasName in this._textureAtlasDic) {\r\n                        textureAtlas = this._textureAtlasDic[textureAtlasName];\r\n                        if (textureAtlas.getRegion(textureName)) {\r\n                            break;\r\n                        }\r\n                        textureAtlas = null;\r\n                    }\r\n                }\r\n                if (textureAtlas) {\r\n                    if (isNaN(pivotX) || isNaN(pivotY)) {\r\n                        var data = this._dataDic[textureAtlasName];\r\n                        if (data) {\r\n                            var pivot = data.getSubTexturePivot(textureName);\r\n                            if (pivot) {\r\n                                pivotX = pivot.x;\r\n                                pivotY = pivot.y;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return this._generateDisplay(textureAtlas, textureName, pivotX, pivotY);\r\n                }\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateArmature = function () {\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateSlot = function () {\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateDisplay = function (textureAtlas, fullName, pivotX, pivotY) {\r\n                return null;\r\n            };\r\n            return BaseFactory;\r\n        })(events.EventDispatcher);\r\n        factorys.BaseFactory = BaseFactory;\r\n    })(dragonBones.factorys || (dragonBones.factorys = {}));\r\n    var factorys = dragonBones.factorys;\r\n\r\n    (function (utils) {\r\n        var ConstValues = (function () {\r\n            function ConstValues() {\r\n            }\r\n            ConstValues.ANGLE_TO_RADIAN = Math.PI / 180;\r\n\r\n            ConstValues.DRAGON_BONES = \"dragonBones\";\r\n            ConstValues.ARMATURE = \"armature\";\r\n            ConstValues.SKIN = \"skin\";\r\n            ConstValues.BONE = \"bone\";\r\n            ConstValues.SLOT = \"slot\";\r\n            ConstValues.DISPLAY = \"display\";\r\n            ConstValues.ANIMATION = \"animation\";\r\n            ConstValues.TIMELINE = \"timeline\";\r\n            ConstValues.FRAME = \"frame\";\r\n            ConstValues.TRANSFORM = \"transform\";\r\n            ConstValues.COLOR_TRANSFORM = \"colorTransform\";\r\n\r\n            ConstValues.TEXTURE_ATLAS = \"TextureAtlas\";\r\n            ConstValues.SUB_TEXTURE = \"SubTexture\";\r\n\r\n            ConstValues.A_VERSION = \"version\";\r\n            ConstValues.A_IMAGE_PATH = \"imagePath\";\r\n            ConstValues.A_FRAME_RATE = \"frameRate\";\r\n            ConstValues.A_NAME = \"name\";\r\n            ConstValues.A_PARENT = \"parent\";\r\n            ConstValues.A_LENGTH = \"length\";\r\n            ConstValues.A_TYPE = \"type\";\r\n            ConstValues.A_FADE_IN_TIME = \"fadeInTime\";\r\n            ConstValues.A_DURATION = \"duration\";\r\n            ConstValues.A_SCALE = \"scale\";\r\n            ConstValues.A_OFFSET = \"offset\";\r\n            ConstValues.A_LOOP = \"loop\";\r\n            ConstValues.A_EVENT = \"event\";\r\n            ConstValues.A_SOUND = \"sound\";\r\n            ConstValues.A_ACTION = \"action\";\r\n            ConstValues.A_HIDE = \"hide\";\r\n            ConstValues.A_TWEEN_EASING = \"tweenEasing\";\r\n            ConstValues.A_TWEEN_ROTATE = \"tweenRotate\";\r\n            ConstValues.A_DISPLAY_INDEX = \"displayIndex\";\r\n            ConstValues.A_Z_ORDER = \"z\";\r\n            ConstValues.A_WIDTH = \"width\";\r\n            ConstValues.A_HEIGHT = \"height\";\r\n            ConstValues.A_X = \"x\";\r\n            ConstValues.A_Y = \"y\";\r\n            ConstValues.A_SKEW_X = \"skX\";\r\n            ConstValues.A_SKEW_Y = \"skY\";\r\n            ConstValues.A_SCALE_X = \"scX\";\r\n            ConstValues.A_SCALE_Y = \"scY\";\r\n            ConstValues.A_PIVOT_X = \"pX\";\r\n            ConstValues.A_PIVOT_Y = \"pY\";\r\n            ConstValues.A_ALPHA_OFFSET = \"aO\";\r\n            ConstValues.A_RED_OFFSET = \"rO\";\r\n            ConstValues.A_GREEN_OFFSET = \"gO\";\r\n            ConstValues.A_BLUE_OFFSET = \"bO\";\r\n            ConstValues.A_ALPHA_MULTIPLIER = \"aM\";\r\n            ConstValues.A_RED_MULTIPLIER = \"rM\";\r\n            ConstValues.A_GREEN_MULTIPLIER = \"gM\";\r\n            ConstValues.A_BLUE_MULTIPLIER = \"bM\";\r\n            return ConstValues;\r\n        })();\r\n        utils.ConstValues = ConstValues;\r\n\r\n        var TransformUtil = (function () {\r\n            function TransformUtil() {\r\n            }\r\n            TransformUtil.transformPointWithParent = function (transform, parent) {\r\n                var helpMatrix = TransformUtil._helpMatrix;\r\n                TransformUtil.transformToMatrix(parent, helpMatrix);\r\n                helpMatrix.invert();\r\n\r\n                var x = transform.x;\r\n                var y = transform.y;\r\n\r\n                transform.x = helpMatrix.a * x + helpMatrix.c * y + helpMatrix.tx;\r\n                transform.y = helpMatrix.d * y + helpMatrix.b * x + helpMatrix.ty;\r\n\r\n                transform.skewX = TransformUtil.formatRadian(transform.skewX - parent.skewX);\r\n                transform.skewY = TransformUtil.formatRadian(transform.skewY - parent.skewY);\r\n            };\r\n\r\n            TransformUtil.transformToMatrix = function (transform, matrix) {\r\n                matrix.a = transform.scaleX * Math.cos(transform.skewY);\r\n                matrix.b = transform.scaleX * Math.sin(transform.skewY);\r\n                matrix.c = -transform.scaleY * Math.sin(transform.skewX);\r\n                matrix.d = transform.scaleY * Math.cos(transform.skewX);\r\n                matrix.tx = transform.x;\r\n                matrix.ty = transform.y;\r\n            };\r\n\r\n            TransformUtil.formatRadian = function (radian) {\r\n                radian %= TransformUtil.DOUBLE_PI;\r\n                if (radian > Math.PI) {\r\n                    radian -= TransformUtil.DOUBLE_PI;\r\n                }\r\n                if (radian < -Math.PI) {\r\n                    radian += TransformUtil.DOUBLE_PI;\r\n                }\r\n                return radian;\r\n            };\r\n            TransformUtil.DOUBLE_PI = Math.PI * 2;\r\n            TransformUtil._helpMatrix = new geom.Matrix();\r\n            return TransformUtil;\r\n        })();\r\n        utils.TransformUtil = TransformUtil;\r\n\r\n        var DBDataUtil = (function () {\r\n            function DBDataUtil() {\r\n            }\r\n            DBDataUtil.transformArmatureData = function (armatureData) {\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var i = boneDataList.length;\r\n                var boneData;\r\n                var parentBoneData;\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    if (boneData.parent) {\r\n                        parentBoneData = armatureData.getBoneData(boneData.parent);\r\n                        if (parentBoneData) {\r\n                            boneData.transform.copy(boneData.global);\r\n                            TransformUtil.transformPointWithParent(boneData.transform, parentBoneData.global);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            DBDataUtil.transformArmatureDataAnimations = function (armatureData) {\r\n                var animationDataList = armatureData.getAnimationDataList();\r\n                var i = animationDataList.length;\r\n                while (i--) {\r\n                    DBDataUtil.transformAnimationData(animationDataList[i], armatureData);\r\n                }\r\n            };\r\n\r\n            DBDataUtil.transformAnimationData = function (animationData, armatureData) {\r\n                var skinData = armatureData.getSkinData(null);\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var slotDataList = skinData.getSlotDataList();\r\n                var i = boneDataList.length;\r\n\r\n                var boneData;\r\n                var timeline;\r\n                var slotData;\r\n                var displayData;\r\n                var parentTimeline;\r\n                var frameList;\r\n                var originTransform;\r\n                var originPivot;\r\n                var prevFrame;\r\n                var frame;\r\n                var frameListLength;\r\n\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    timeline = animationData.getTimeline(boneData.name);\r\n                    if (!timeline) {\r\n                        continue;\r\n                    }\r\n\r\n                    slotData = null;\r\n\r\n                    for (var slotIndex in slotDataList) {\r\n                        slotData = slotDataList[slotIndex];\r\n                        if (slotData.parent == boneData.name) {\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    parentTimeline = boneData.parent ? animationData.getTimeline(boneData.parent) : null;\r\n\r\n                    frameList = timeline.getFrameList();\r\n\r\n                    originTransform = null;\r\n                    originPivot = null;\r\n                    prevFrame = null;\r\n                    frameListLength = frameList.length;\r\n                    for (var j = 0; j < frameListLength; j++) {\r\n                        frame = frameList[j];\r\n                        if (parentTimeline) {\r\n                            DBDataUtil._helpTransform1.copy(frame.global);\r\n\r\n                            DBDataUtil.getTimelineTransform(parentTimeline, frame.position, DBDataUtil._helpTransform2);\r\n                            TransformUtil.transformPointWithParent(DBDataUtil._helpTransform1, DBDataUtil._helpTransform2);\r\n\r\n                            frame.transform.copy(DBDataUtil._helpTransform1);\r\n                        } else {\r\n                            frame.transform.copy(frame.global);\r\n                        }\r\n\r\n                        frame.transform.x -= boneData.transform.x;\r\n                        frame.transform.y -= boneData.transform.y;\r\n                        frame.transform.skewX -= boneData.transform.skewX;\r\n                        frame.transform.skewY -= boneData.transform.skewY;\r\n                        frame.transform.scaleX -= boneData.transform.scaleX;\r\n                        frame.transform.scaleY -= boneData.transform.scaleY;\r\n\r\n                        if (!timeline.transformed) {\r\n                            if (slotData) {\r\n                                frame.zOrder -= slotData.zOrder;\r\n                            }\r\n                        }\r\n\r\n                        if (!originTransform) {\r\n                            originTransform = timeline.originTransform;\r\n                            originTransform.copy(frame.transform);\r\n                            originTransform.skewX = TransformUtil.formatRadian(originTransform.skewX);\r\n                            originTransform.skewY = TransformUtil.formatRadian(originTransform.skewY);\r\n                            originPivot = timeline.originPivot;\r\n                            originPivot.x = frame.pivot.x;\r\n                            originPivot.y = frame.pivot.y;\r\n                        }\r\n\r\n                        frame.transform.x -= originTransform.x;\r\n                        frame.transform.y -= originTransform.y;\r\n                        frame.transform.skewX = TransformUtil.formatRadian(frame.transform.skewX - originTransform.skewX);\r\n                        frame.transform.skewY = TransformUtil.formatRadian(frame.transform.skewY - originTransform.skewY);\r\n                        frame.transform.scaleX -= originTransform.scaleX;\r\n                        frame.transform.scaleY -= originTransform.scaleY;\r\n\r\n                        if (!timeline.transformed) {\r\n                            frame.pivot.x -= originPivot.x;\r\n                            frame.pivot.y -= originPivot.y;\r\n                        }\r\n\r\n                        if (prevFrame) {\r\n                            var dLX = frame.transform.skewX - prevFrame.transform.skewX;\r\n\r\n                            if (prevFrame.tweenRotate) {\r\n                                if (prevFrame.tweenRotate > 0) {\r\n                                    if (dLX < 0) {\r\n                                        frame.transform.skewX += Math.PI * 2;\r\n                                        frame.transform.skewY += Math.PI * 2;\r\n                                    }\r\n\r\n                                    if (prevFrame.tweenRotate > 1) {\r\n                                        frame.transform.skewX += Math.PI * 2 * (prevFrame.tweenRotate - 1);\r\n                                        frame.transform.skewY += Math.PI * 2 * (prevFrame.tweenRotate - 1);\r\n                                    }\r\n                                } else {\r\n                                    if (dLX > 0) {\r\n                                        frame.transform.skewX -= Math.PI * 2;\r\n                                        frame.transform.skewY -= Math.PI * 2;\r\n                                    }\r\n\r\n                                    if (prevFrame.tweenRotate < 1) {\r\n                                        frame.transform.skewX += Math.PI * 2 * (prevFrame.tweenRotate + 1);\r\n                                        frame.transform.skewY += Math.PI * 2 * (prevFrame.tweenRotate + 1);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                frame.transform.skewX = prevFrame.transform.skewX + TransformUtil.formatRadian(frame.transform.skewX - prevFrame.transform.skewX);\r\n                                frame.transform.skewY = prevFrame.transform.skewY + TransformUtil.formatRadian(frame.transform.skewY - prevFrame.transform.skewY);\r\n                            }\r\n                        }\r\n\r\n                        prevFrame = frame;\r\n                    }\r\n                    timeline.transformed = true;\r\n                }\r\n            };\r\n\r\n            DBDataUtil.getTimelineTransform = function (timeline, position, retult) {\r\n                var frameList = timeline.getFrameList();\r\n                var i = frameList.length;\r\n\r\n                var currentFrame;\r\n                var tweenEasing;\r\n                var progress;\r\n                var nextFrame;\r\n                while (i--) {\r\n                    currentFrame = frameList[i];\r\n                    if (currentFrame.position <= position && currentFrame.position + currentFrame.duration > position) {\r\n                        tweenEasing = currentFrame.tweenEasing;\r\n                        if (i == frameList.length - 1 || isNaN(tweenEasing) || position == currentFrame.position) {\r\n                            retult.copy(currentFrame.global);\r\n                        } else {\r\n                            progress = (position - currentFrame.position) / currentFrame.duration;\r\n                            if (tweenEasing) {\r\n                                progress = animation.TimelineState.getEaseValue(progress, tweenEasing);\r\n                            }\r\n\r\n                            nextFrame = frameList[i + 1];\r\n\r\n                            retult.x = currentFrame.global.x + (nextFrame.global.x - currentFrame.global.x) * progress;\r\n                            retult.y = currentFrame.global.y + (nextFrame.global.y - currentFrame.global.y) * progress;\r\n                            retult.skewX = TransformUtil.formatRadian(currentFrame.global.skewX + (nextFrame.global.skewX - currentFrame.global.skewX) * progress);\r\n                            retult.skewY = TransformUtil.formatRadian(currentFrame.global.skewY + (nextFrame.global.skewY - currentFrame.global.skewY) * progress);\r\n                            retult.scaleX = currentFrame.global.scaleX + (nextFrame.global.scaleX - currentFrame.global.scaleX) * progress;\r\n                            retult.scaleY = currentFrame.global.scaleY + (nextFrame.global.scaleY - currentFrame.global.scaleY) * progress;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            DBDataUtil.addHideTimeline = function (animationData, armatureData) {\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var i = boneDataList.length;\r\n\r\n                var boneData;\r\n                var boneName;\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    boneName = boneData.name;\r\n                    if (!animationData.getTimeline(boneName)) {\r\n                        animationData.addTimeline(objects.TransformTimeline.HIDE_TIMELINE, boneName);\r\n                    }\r\n                }\r\n            };\r\n            DBDataUtil._helpTransform1 = new objects.DBTransform();\r\n            DBDataUtil._helpTransform2 = new objects.DBTransform();\r\n            return DBDataUtil;\r\n        })();\r\n        utils.DBDataUtil = DBDataUtil;\r\n    })(dragonBones.utils || (dragonBones.utils = {}));\r\n    var utils = dragonBones.utils;\r\n\r\n    var DBObject = (function () {\r\n        function DBObject() {\r\n            this.global = new objects.DBTransform();\r\n            this.origin = new objects.DBTransform();\r\n            this.offset = new objects.DBTransform();\r\n            this.tween = new objects.DBTransform();\r\n            this.tween.scaleX = this.tween.scaleY = 0;\r\n\r\n            this._globalTransformMatrix = new geom.Matrix();\r\n\r\n            this._visible = true;\r\n            this._isColorChanged = false;\r\n            this._isDisplayOnStage = false;\r\n            this._scaleType = 0;\r\n\r\n            this.fixedRotation = false;\r\n        }\r\n        DBObject.prototype.getVisible = function () {\r\n            return this._visible;\r\n        };\r\n        DBObject.prototype.setVisible = function (value) {\r\n            this._visible = value;\r\n        };\r\n\r\n        DBObject.prototype._setParent = function (value) {\r\n            this.parent = value;\r\n        };\r\n\r\n        DBObject.prototype._setArmature = function (value) {\r\n            if (this.armature) {\r\n                this.armature._removeDBObject(this);\r\n            }\r\n            this.armature = value;\r\n            if (this.armature) {\r\n                this.armature._addDBObject(this);\r\n            }\r\n        };\r\n\r\n        DBObject.prototype.dispose = function () {\r\n            this.parent = null;\r\n            this.armature = null;\r\n            this.global = null;\r\n            this.origin = null;\r\n            this.offset = null;\r\n            this.tween = null;\r\n            this._globalTransformMatrix = null;\r\n        };\r\n\r\n        DBObject.prototype._update = function () {\r\n            this.global.scaleX = (this.origin.scaleX + this.tween.scaleX) * this.offset.scaleX;\r\n            this.global.scaleY = (this.origin.scaleY + this.tween.scaleY) * this.offset.scaleY;\r\n\r\n            if (this.parent) {\r\n                var x = this.origin.x + this.offset.x + this.tween.x;\r\n                var y = this.origin.y + this.offset.y + this.tween.y;\r\n                var parentMatrix = this.parent._globalTransformMatrix;\r\n\r\n                this._globalTransformMatrix.tx = this.global.x = parentMatrix.a * x + parentMatrix.c * y + parentMatrix.tx;\r\n                this._globalTransformMatrix.ty = this.global.y = parentMatrix.d * y + parentMatrix.b * x + parentMatrix.ty;\r\n\r\n                if (this.fixedRotation) {\r\n                    this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX;\r\n                    this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY;\r\n                } else {\r\n                    this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX + this.parent.global.skewX;\r\n                    this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY + this.parent.global.skewY;\r\n                }\r\n\r\n                if (this.parent.scaleMode >= this._scaleType) {\r\n                    this.global.scaleX *= this.parent.global.scaleX;\r\n                    this.global.scaleY *= this.parent.global.scaleY;\r\n                }\r\n            } else {\r\n                this._globalTransformMatrix.tx = this.global.x = this.origin.x + this.offset.x + this.tween.x;\r\n                this._globalTransformMatrix.ty = this.global.y = this.origin.y + this.offset.y + this.tween.y;\r\n\r\n                this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX;\r\n                this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY;\r\n            }\r\n            this._globalTransformMatrix.a = this.global.scaleX * Math.cos(this.global.skewY);\r\n            this._globalTransformMatrix.b = this.global.scaleX * Math.sin(this.global.skewY);\r\n            this._globalTransformMatrix.c = -this.global.scaleY * Math.sin(this.global.skewX);\r\n            this._globalTransformMatrix.d = this.global.scaleY * Math.cos(this.global.skewX);\r\n        };\r\n        return DBObject;\r\n    })();\r\n    dragonBones.DBObject = DBObject;\r\n\r\n    var Slot = (function (_super) {\r\n        __extends(Slot, _super);\r\n        function Slot(displayBrideg) {\r\n            _super.call(this);\r\n            this._displayBridge = displayBrideg;\r\n            this._displayList = [];\r\n            this._displayIndex = -1;\r\n            this._scaleType = 1;\r\n\r\n            this._originZOrder = 0;\r\n            this._tweenZorder = 0;\r\n            this._offsetZOrder = 0;\r\n\r\n            this._isDisplayOnStage = false;\r\n            this._isHideDisplay = false;\r\n        }\r\n        Slot.prototype.getZOrder = function () {\r\n            return this._originZOrder + this._tweenZorder + this._offsetZOrder;\r\n        };\r\n\r\n        Slot.prototype.setZOrder = function (value) {\r\n            if (this.getZOrder() != value) {\r\n                this._offsetZOrder = value - this._originZOrder - this._tweenZorder;\r\n                if (this.armature) {\r\n                    this.armature._slotsZOrderChanged = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        Slot.prototype.getDisplay = function () {\r\n            var display = this._displayList[this._displayIndex];\r\n            if (display instanceof Armature) {\r\n                return (display).getDisplay();\r\n            }\r\n            return display;\r\n        };\r\n        Slot.prototype.setDisplay = function (value) {\r\n            this._displayList[this._displayIndex] = value;\r\n            this._setDisplay(value);\r\n        };\r\n\r\n        Slot.prototype.getChildArmature = function () {\r\n            var display = this._displayList[this._displayIndex];\r\n            if (display instanceof Armature) {\r\n                return display;\r\n            }\r\n            return null;\r\n        };\r\n        Slot.prototype.setChildArmature = function (value) {\r\n            this._displayList[this._displayIndex] = value;\r\n            if (value) {\r\n                this._setDisplay(value.getDisplay());\r\n            }\r\n        };\r\n\r\n        Slot.prototype.getDisplayList = function () {\r\n            return this._displayList;\r\n        };\r\n        Slot.prototype.setDisplayList = function (value) {\r\n            if (!value) {\r\n                throw new Error();\r\n            }\r\n            var i = this._displayList.length = value.length;\r\n            while (i--) {\r\n                this._displayList[i] = value[i];\r\n            }\r\n            if (this._displayIndex >= 0) {\r\n                var displayIndexBackup = this._displayIndex;\r\n                this._displayIndex = -1;\r\n                this._changeDisplay(displayIndexBackup);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._setDisplay = function (display) {\r\n            if (this._displayBridge.getDisplay()) {\r\n                this._displayBridge.setDisplay(display);\r\n            } else {\r\n                this._displayBridge.setDisplay(display);\r\n                if (this.armature) {\r\n                    this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n                    this.armature._slotsZOrderChanged = true;\r\n                }\r\n            }\r\n\r\n            this.updateChildArmatureAnimation();\r\n\r\n            if (!this._isHideDisplay && this._displayBridge.getDisplay()) {\r\n                this._isDisplayOnStage = true;\r\n            } else {\r\n                this._isDisplayOnStage = false;\r\n            }\r\n        };\r\n\r\n        Slot.prototype._changeDisplay = function (displayIndex) {\r\n            if (displayIndex < 0) {\r\n                if (!this._isHideDisplay) {\r\n                    this._isHideDisplay = true;\r\n                    this._displayBridge.removeDisplay();\r\n                    this.updateChildArmatureAnimation();\r\n                }\r\n            } else {\r\n                if (this._isHideDisplay) {\r\n                    this._isHideDisplay = false;\r\n                    var changeShowState = true;\r\n                    if (this.armature) {\r\n                        this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n                        this.armature._slotsZOrderChanged = true;\r\n                    }\r\n                }\r\n\r\n                var length = this._displayList.length;\r\n                if (displayIndex >= length && length > 0) {\r\n                    displayIndex = length - 1;\r\n                }\r\n                if (this._displayIndex != displayIndex) {\r\n                    this._displayIndex = displayIndex;\r\n\r\n                    var display = this._displayList[this._displayIndex];\r\n                    if (display instanceof Armature) {\r\n                        this._setDisplay((display).getDisplay());\r\n                    } else {\r\n                        this._setDisplay(display);\r\n                    }\r\n\r\n                    if (this._dislayDataList && this._displayIndex <= this._dislayDataList.length) {\r\n                        this.origin.copy(this._dislayDataList[this._displayIndex].transform);\r\n                    }\r\n                } else if (changeShowState) {\r\n                    this.updateChildArmatureAnimation();\r\n                }\r\n            }\r\n\r\n            if (!this._isHideDisplay && this._displayBridge.getDisplay()) {\r\n                this._isDisplayOnStage = true;\r\n            } else {\r\n                this._isDisplayOnStage = false;\r\n            }\r\n        };\r\n\r\n        Slot.prototype.setVisible = function (value) {\r\n            if (value != this._visible) {\r\n                this._visible = value;\r\n                this._updateVisible(this._visible);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._setArmature = function (value) {\r\n            _super.prototype._setArmature.call(this, value);\r\n            if (this.armature) {\r\n                this.armature._slotsZOrderChanged = true;\r\n                this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n            } else {\r\n                this._displayBridge.removeDisplay();\r\n            }\r\n        };\r\n\r\n        Slot.prototype.dispose = function () {\r\n            if (!this._displayBridge) {\r\n                return;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n\r\n            this._displayBridge.dispose();\r\n            this._displayList.length = 0;\r\n\r\n            this._displayBridge = null;\r\n            this._displayList = null;\r\n            this._dislayDataList = null;\r\n        };\r\n\r\n        Slot.prototype._update = function () {\r\n            _super.prototype._update.call(this);\r\n            if (this._isDisplayOnStage) {\r\n                var pivotX = this.parent._tweenPivot.x;\r\n                var pivotY = this.parent._tweenPivot.y;\r\n                if (pivotX || pivotY) {\r\n                    var parentMatrix = this.parent._globalTransformMatrix;\r\n                    this._globalTransformMatrix.tx += parentMatrix.a * pivotX + parentMatrix.c * pivotY;\r\n                    this._globalTransformMatrix.ty += parentMatrix.b * pivotX + parentMatrix.d * pivotY;\r\n                }\r\n\r\n                this._displayBridge.updateTransform(this._globalTransformMatrix, this.global);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._updateVisible = function (value) {\r\n            this._displayBridge.setVisible(this.parent.getVisible() && this._visible && value);\r\n        };\r\n\r\n        Slot.prototype.updateChildArmatureAnimation = function () {\r\n            var childArmature = this.getChildArmature();\r\n\r\n            if (childArmature) {\r\n                if (this._isHideDisplay) {\r\n                    childArmature.animation.stop();\r\n                    childArmature.animation._lastAnimationState = null;\r\n                } else {\r\n                    var lastAnimationName = this.armature ? this.armature.animation.getLastAnimationName() : null;\r\n                    if (lastAnimationName && childArmature.animation.hasAnimation(lastAnimationName)) {\r\n                        childArmature.animation.gotoAndPlay(lastAnimationName);\r\n                    } else {\r\n                        childArmature.animation.play();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return Slot;\r\n    })(DBObject);\r\n    dragonBones.Slot = Slot;\r\n\r\n    var Bone = (function (_super) {\r\n        __extends(Bone, _super);\r\n        function Bone() {\r\n            _super.call(this);\r\n            this._children = [];\r\n            this._scaleType = 2;\r\n\r\n            this._tweenPivot = new geom.Point();\r\n\r\n            this.scaleMode = 1;\r\n        }\r\n        Bone.prototype.setVisible = function (value) {\r\n            if (this._visible != value) {\r\n                this._visible = value;\r\n                var i = this._children.length;\r\n                while (i--) {\r\n                    var child = this._children[i];\r\n                    if (child instanceof Slot) {\r\n                        (child)._updateVisible(this._visible);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        Bone.prototype._setArmature = function (value) {\r\n            _super.prototype._setArmature.call(this, value);\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                this._children[i]._setArmature(this.armature);\r\n            }\r\n        };\r\n\r\n        Bone.prototype.dispose = function () {\r\n            if (!this._children) {\r\n                return;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                this._children[i].dispose();\r\n            }\r\n            this._children.length = 0;\r\n\r\n            this._children = null;\r\n            this._tweenPivot = null;\r\n\r\n            this.slot = null;\r\n        };\r\n\r\n        Bone.prototype.contains = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n            if (child == this) {\r\n                return false;\r\n            }\r\n            var ancestor = child;\r\n            while (!(ancestor == this || ancestor == null)) {\r\n                ancestor = ancestor.parent;\r\n            }\r\n            return ancestor == this;\r\n        };\r\n\r\n        Bone.prototype.addChild = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (child == this || (child instanceof Bone && (child).contains(this))) {\r\n                throw new Error(\"An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)\");\r\n            }\r\n\r\n            if (child.parent) {\r\n                child.parent.removeChild(child);\r\n            }\r\n            this._children[this._children.length] = child;\r\n            child._setParent(this);\r\n            child._setArmature(this.armature);\r\n\r\n            if (!this.slot && child instanceof Slot) {\r\n                this.slot = child;\r\n            }\r\n        };\r\n\r\n        Bone.prototype.removeChild = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n\r\n            var index = this._children.indexOf(child);\r\n            if (index >= 0) {\r\n                this._children.splice(index, 1);\r\n                child._setParent(null);\r\n                child._setArmature(null);\r\n\r\n                if (child == this.slot) {\r\n                    this.slot = null;\r\n                }\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Bone.prototype.getSlots = function () {\r\n            var slotList = [];\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                if (this._children[i] instanceof Slot) {\r\n                    slotList.unshift(this._children[i]);\r\n                }\r\n            }\r\n            return slotList;\r\n        };\r\n\r\n        Bone.prototype._arriveAtFrame = function (frame, timelineState, animationState, isCross) {\r\n            if (frame) {\r\n                var mixingType = animationState.getMixingTransform(name);\r\n                if (animationState.displayControl && (mixingType == 2 || mixingType == -1)) {\r\n                    if (!this.displayController || this.displayController == animationState.name) {\r\n                        var tansformFrame = frame;\r\n                        if (this.slot) {\r\n                            var displayIndex = tansformFrame.displayIndex;\r\n                            if (displayIndex >= 0) {\r\n                                if (!isNaN(tansformFrame.zOrder) && tansformFrame.zOrder != this.slot._tweenZorder) {\r\n                                    this.slot._tweenZorder = tansformFrame.zOrder;\r\n                                    this.armature._slotsZOrderChanged = true;\r\n                                }\r\n                            }\r\n                            this.slot._changeDisplay(displayIndex);\r\n                            this.slot._updateVisible(tansformFrame.visible);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (frame.event && this.armature.hasEventListener(events.FrameEvent.BONE_FRAME_EVENT)) {\r\n                    var frameEvent = new events.FrameEvent(events.FrameEvent.BONE_FRAME_EVENT);\r\n                    frameEvent.bone = this;\r\n                    frameEvent.animationState = animationState;\r\n                    frameEvent.frameLabel = frame.event;\r\n                    this.armature._eventList.push(frameEvent);\r\n                }\r\n\r\n                if (frame.sound && Bone._soundManager.hasEventListener(events.SoundEvent.SOUND)) {\r\n                    var soundEvent = new events.SoundEvent(events.SoundEvent.SOUND);\r\n                    soundEvent.armature = this.armature;\r\n                    soundEvent.animationState = animationState;\r\n                    soundEvent.sound = frame.sound;\r\n                    Bone._soundManager.dispatchEvent(soundEvent);\r\n                }\r\n\r\n                if (frame.action) {\r\n                    for (var index in this._children) {\r\n                        if (this._children[index] instanceof Slot) {\r\n                            var childArmature = (this._children[index]).getChildArmature();\r\n                            if (childArmature) {\r\n                                childArmature.animation.gotoAndPlay(frame.action);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.slot) {\r\n                    this.slot._changeDisplay(-1);\r\n                }\r\n            }\r\n        };\r\n\r\n        Bone.prototype._updateColor = function (aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier, isColorChanged) {\r\n            if (isColorChanged || this._isColorChanged) {\r\n                this.slot._displayBridge.updateColor(aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier);\r\n            }\r\n            this._isColorChanged = isColorChanged;\r\n        };\r\n        Bone._soundManager = events.SoundEventManager.getInstance();\r\n        return Bone;\r\n    })(DBObject);\r\n    dragonBones.Bone = Bone;\r\n\r\n    var Armature = (function (_super) {\r\n        __extends(Armature, _super);\r\n        function Armature(display) {\r\n            _super.call(this);\r\n\r\n            this.animation = new animation.Animation(this);\r\n\r\n            this._display = display;\r\n            this._slotsZOrderChanged = false;\r\n            this._slotList = [];\r\n            this._boneList = [];\r\n            this._eventList = [];\r\n        }\r\n        Armature.prototype.getDisplay = function () {\r\n            return this._display;\r\n        };\r\n\r\n        Armature.prototype.dispose = function () {\r\n            if (!this.animation) {\r\n                return;\r\n            }\r\n\r\n            this.animation.dispose();\r\n\r\n            var i = this._slotList.length;\r\n            while (i--) {\r\n                this._slotList[i].dispose();\r\n            }\r\n\r\n            i = this._boneList.length;\r\n            while (i--) {\r\n                this._boneList[i].dispose();\r\n            }\r\n\r\n            this._slotList.length = 0;\r\n            this._boneList.length = 0;\r\n            this._eventList.length = 0;\r\n\r\n            this._slotList = null;\r\n            this._boneList = null;\r\n            this._eventList = null;\r\n            this._display = null;\r\n\r\n            this.animation = null;\r\n        };\r\n\r\n        Armature.prototype.advanceTime = function (passedTime) {\r\n            this.animation.advanceTime(passedTime);\r\n            passedTime *= this.animation.timeScale;\r\n\r\n            var i = this._boneList.length;\r\n            while (i--) {\r\n                this._boneList[i]._update();\r\n            }\r\n            i = this._slotList.length;\r\n            var slot;\r\n            while (i--) {\r\n                slot = this._slotList[i];\r\n                slot._update();\r\n                if (slot._isDisplayOnStage) {\r\n                    var childArmature = slot.getChildArmature();\r\n                    if (childArmature) {\r\n                        childArmature.advanceTime(passedTime);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._slotsZOrderChanged) {\r\n                this.updateSlotsZOrder();\r\n                if (this.hasEventListener(events.ArmatureEvent.Z_ORDER_UPDATED)) {\r\n                    this.dispatchEvent(new events.ArmatureEvent(events.ArmatureEvent.Z_ORDER_UPDATED));\r\n                }\r\n            }\r\n\r\n            if (this._eventList.length) {\r\n                var length = this._eventList.length;\r\n                for (i = 0; i < length; i++) {\r\n                    this.dispatchEvent(this._eventList[i]);\r\n                }\r\n                this._eventList.length = 0;\r\n            }\r\n        };\r\n\r\n        Armature.prototype.getSlots = function (returnCopy) {\r\n            if (typeof returnCopy === \"undefined\") { returnCopy = true; }\r\n            return returnCopy ? this._slotList.concat() : this._slotList;\r\n        };\r\n\r\n        Armature.prototype.getBones = function (returnCopy) {\r\n            if (typeof returnCopy === \"undefined\") { returnCopy = true; }\r\n            return returnCopy ? this._boneList.concat() : this._boneList;\r\n        };\r\n\r\n        Armature.prototype.getSlot = function (slotName) {\r\n            var i = this._slotList.length;\r\n            while (i--) {\r\n                if (this._slotList[i].name == slotName) {\r\n                    return this._slotList[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.getSlotByDisplay = function (display) {\r\n            if (display) {\r\n                var i = this._slotList.length;\r\n                while (i--) {\r\n                    if (this._slotList[i].getDisplay() == display) {\r\n                        return this._slotList[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.removeSlot = function (slot) {\r\n            if (!slot) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (this._slotList.indexOf(slot) >= 0) {\r\n                slot.parent.removeChild(slot);\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Armature.prototype.removeSlotByName = function (slotName) {\r\n            if (!slotName) {\r\n                return;\r\n            }\r\n\r\n            var slot = this.getSlot(slotName);\r\n            if (slot) {\r\n                this.removeSlot(slot);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.getBone = function (boneName) {\r\n            var i = this._boneList.length;\r\n            while (i--) {\r\n                if (this._boneList[i].name == boneName) {\r\n                    return this._boneList[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.getBoneByDisplay = function (display) {\r\n            var slot = this.getSlotByDisplay(display);\r\n            return slot ? slot.parent : null;\r\n        };\r\n\r\n        Armature.prototype.removeBone = function (bone) {\r\n            if (!bone) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (this._boneList.indexOf(bone) >= 0) {\r\n                if (bone.parent) {\r\n                    bone.parent.removeChild(bone);\r\n                } else {\r\n                    bone._setArmature(null);\r\n                }\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Armature.prototype.removeBoneByName = function (boneName) {\r\n            if (!boneName) {\r\n                return;\r\n            }\r\n\r\n            var bone = this.getBone(boneName);\r\n            if (bone) {\r\n                this.removeBone(bone);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.addChild = function (object, parentName) {\r\n            if (!object) {\r\n                throw new Error();\r\n            }\r\n            if (parentName) {\r\n                var boneParent = this.getBone(parentName);\r\n                if (boneParent) {\r\n                    boneParent.addChild(object);\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            } else {\r\n                if (object.parent) {\r\n                    object.parent.removeChild(object);\r\n                }\r\n                object._setArmature(this);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.updateSlotsZOrder = function () {\r\n            this._slotList.sort(this.sortSlot);\r\n            var i = this._slotList.length;\r\n            var slot;\r\n            while (i--) {\r\n                slot = this._slotList[i];\r\n                if (slot._isDisplayOnStage) {\r\n                    slot._displayBridge.addDisplay(this._display, -1);\r\n                }\r\n            }\r\n\r\n            this._slotsZOrderChanged = false;\r\n        };\r\n\r\n        Armature.prototype._addDBObject = function (object) {\r\n            if (object instanceof Slot) {\r\n                var slot = object;\r\n                if (this._slotList.indexOf(slot) < 0) {\r\n                    this._slotList[this._slotList.length] = slot;\r\n                }\r\n            } else if (object instanceof Bone) {\r\n                var bone = object;\r\n                if (this._boneList.indexOf(bone) < 0) {\r\n                    this._boneList[this._boneList.length] = bone;\r\n                    this._sortBoneList();\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype._removeDBObject = function (object) {\r\n            if (object instanceof Slot) {\r\n                var slot = object;\r\n                var index = this._slotList.indexOf(slot);\r\n                if (index >= 0) {\r\n                    this._slotList.splice(index, 1);\r\n                }\r\n            } else if (object instanceof Bone) {\r\n                var bone = object;\r\n                index = this._boneList.indexOf(bone);\r\n                if (index >= 0) {\r\n                    this._boneList.splice(index, 1);\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype._sortBoneList = function () {\r\n            var i = this._boneList.length;\r\n            if (i == 0) {\r\n                return;\r\n            }\r\n            var helpArray = [];\r\n            var level;\r\n            var bone;\r\n            var boneParent;\r\n            while (i--) {\r\n                level = 0;\r\n                bone = this._boneList[i];\r\n                boneParent = bone;\r\n                while (boneParent) {\r\n                    level++;\r\n                    boneParent = boneParent.parent;\r\n                }\r\n                helpArray[i] = { level: level, bone: bone };\r\n            }\r\n\r\n            helpArray.sort(this.sortBone);\r\n\r\n            i = helpArray.length;\r\n            while (i--) {\r\n                this._boneList[i] = helpArray[i].bone;\r\n            }\r\n        };\r\n\r\n        Armature.prototype._arriveAtFrame = function (frame, timelineState, animationState, isCross) {\r\n            if (frame.event && this.hasEventListener(events.FrameEvent.ANIMATION_FRAME_EVENT)) {\r\n                var frameEvent = new events.FrameEvent(events.FrameEvent.ANIMATION_FRAME_EVENT);\r\n                frameEvent.animationState = animationState;\r\n                frameEvent.frameLabel = frame.event;\r\n                this._eventList.push(frameEvent);\r\n            }\r\n\r\n            if (frame.sound && Armature._soundManager.hasEventListener(events.SoundEvent.SOUND)) {\r\n                var soundEvent = new events.SoundEvent(events.SoundEvent.SOUND);\r\n                soundEvent.armature = this;\r\n                soundEvent.animationState = animationState;\r\n                soundEvent.sound = frame.sound;\r\n                Armature._soundManager.dispatchEvent(soundEvent);\r\n            }\r\n\r\n            if (frame.action) {\r\n                if (animationState.isPlaying) {\r\n                    this.animation.gotoAndPlay(frame.action);\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype.sortSlot = function (slot1, slot2) {\r\n            return slot1.getZOrder() < slot2.getZOrder() ? 1 : -1;\r\n        };\r\n\r\n        Armature.prototype.sortBone = function (object1, object2) {\r\n            return object1.level < object2.level ? 1 : -1;\r\n        };\r\n        Armature._soundManager = events.SoundEventManager.getInstance();\r\n        return Armature;\r\n    })(events.EventDispatcher);\r\n    dragonBones.Armature = Armature;\r\n})(dragonBones || (dragonBones = {}));\r\n\r\nmodule.exports = dragonBones;","var DisplayBridge = (function () {\r\n    function DisplayBridge() {\r\n    }\r\n\r\n    DisplayBridge.prototype.getVisible = function () {\r\n        return this._display ? this._display.visible : false;\r\n    };\r\n\r\n    DisplayBridge.prototype.setVisible = function (value) {\r\n        if (this._display) {\r\n            this._display.visible = value;\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.getDisplay = function () {\r\n        return this._display;\r\n    };\r\n\r\n    DisplayBridge.prototype.setDisplay = function (value) {\r\n        if (this._display == value) {\r\n            return;\r\n        }\r\n\r\n        var index = -1;\r\n        if (this._display) {\r\n            var parent = this._display.parent;\r\n            if (parent) {\r\n                index = this._display.parent.children.indexOf(this._display);\r\n            }\r\n            this.removeDisplay();\r\n        }\r\n        this._display = value;\r\n        this.addDisplay(parent, index);\r\n    };\r\n\r\n    DisplayBridge.prototype.dispose = function () {\r\n        this._display = null;\r\n    };\r\n\r\n    DisplayBridge.prototype.updateTransform = function (matrix, transform) {\r\n        this._display.x = matrix.tx;\r\n        this._display.y = matrix.ty;\r\n        this._display.rotation = transform.skewX;\r\n        this._display.scale.x = transform.scaleX;\r\n        this._display.scale.y = transform.scaleY;\r\n    };\r\n\r\n    DisplayBridge.prototype.updateColor = function (aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier) {\r\n        if (this._display) {\r\n            this._display.alpha = aMultiplier;\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.addDisplay = function (container, index) {\r\n        var parent = container;\r\n        if (parent && this._display) {\r\n            if (index < 0) {\r\n                parent.addChild(this._display);\r\n            } else {\r\n                parent.addChildAt(this._display, Math.min(index, parent.children.length));\r\n            }\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.removeDisplay = function () {\r\n        if (this._display && this._display.parent) {\r\n            this._display.parent.removeChild(this._display);\r\n        }\r\n    };\r\n\r\n    DisplayBridge.RADIAN_TO_ANGLE = 180 / Math.PI;\r\n    return DisplayBridge;\r\n})();\r\n\r\nmodule.exports = DisplayBridge;\r\n","var DragonbonesRuntime = require('../../DragonbonesRuntime/dragonBones'),\r\n    DisplayBridge  = require('../display/DisplayBridge');\r\n\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar Factory = (function (_super) {\r\n    __extends(Factory, _super);\r\n\r\n    function Factory() {\r\n        _super.call(this);\r\n    };\r\n\r\n    Factory.prototype._generateArmature = function() {\r\n        var armature = new DragonbonesRuntime.Armature(new PIXI.DisplayObjectContainer());\r\n        return armature;\r\n    };\r\n\r\n    Factory.prototype._generateSlot = function() {\r\n        var slot = new DragonbonesRuntime.Slot(new DisplayBridge());\r\n        return slot;\r\n    };\r\n\r\n    Factory.prototype._generateDisplay = function(textureAtlas, fullName, pivotX, pivotY) {\r\n        var texture = PIXI.Texture.fromFrame(fullName);\r\n\r\n        var image = new PIXI.Sprite(texture);\r\n        image.pivot.x = pivotX;\r\n        image.pivot.y = pivotY;\r\n\r\n        return image;\r\n    };\r\n\r\n    return Factory;\r\n})(DragonbonesRuntime.factorys.BaseFactory);\r\n\r\nmodule.exports = Factory;","var DragonbonesRuntime = require('../DragonbonesRuntime/dragonBones');\r\n\r\n\r\nmodule.exports = {\r\n    display: {\r\n        DisplayBridge: require('./display/DisplayBridge')\r\n    },\r\n    factory: {\r\n        Factory: require('./factories/Factory')\r\n    },\r\n    textures: {\r\n        TextureAtlas: require('./texture/TextureAtlas')\r\n    }\r\n};","var DragonbonesRuntime = require('../../DragonbonesRuntime/dragonBones');\r\n\r\nvar TextureAtlas = (function () {\r\n    function TextureAtlas(image, textureAtlasRawData, scale) {\r\n        if(typeof scale === \"undefined\") {\r\n            scale = 1;\r\n        }\r\n        this._regions = {};\r\n\r\n        this.image = image;\r\n        this.scale = scale;\r\n\r\n        this.parseData(textureAtlasRawData);\r\n    };\r\n\r\n    TextureAtlas.prototype.dispose = function() {\r\n        this.image = null;\r\n        this._regions = null;\r\n    };\r\n\r\n    TextureAtlas.prototype.getRegion = function(subTextureName) {\r\n        return this._regions[subTextureName];\r\n    };\r\n\r\n    TextureAtlas.prototype.parseData = function(textureAtlasRawData) {\r\n        var textureAtlasData = DragonbonesRuntime.objects.DataParser.parseTextureAtlasData(textureAtlasRawData, this.scale);\r\n        this.name = textureAtlasData.__name;\r\n        delete textureAtlasData.__name;\r\n\r\n        for(var subTextureName in textureAtlasData) {\r\n            this._regions[subTextureName] = textureAtlasData[subTextureName];\r\n        }\r\n    };\r\n    return TextureAtlas;\r\n})();\r\n\r\nmodule.exports = TextureAtlas;\r\n"],"sourceRoot":"./"}