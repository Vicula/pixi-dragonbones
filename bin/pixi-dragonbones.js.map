{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","src/DragonbonesRuntime/dragonBones.js","src/Dragonbones/display/DisplayBridge.js","src/Dragonbones/display/DisplayObjectContainer.js","src/Dragonbones/display/Sprite.js","src/Dragonbones/factories/Factory.js","src/Dragonbones/index.js","src/Dragonbones/texture/TextureAtlas.js","src/Pixi/display/Skeleton.js","src/Pixi/index.js","src/Pixi/loaders/skeletonParser.js","src/loaders/AtlasParser.js"],"names":[],"mappingsj9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-dragonbones.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = PIXI.dragonbones = require('./Pixi');\r\n","var __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar dragonBones;\r\n(function (dragonBones) {\r\n    (function (geom) {\r\n        var Point = (function () {\r\n            function Point(x, y) {\r\n                if (typeof x === \"undefined\") { x = 0; }\r\n                if (typeof y === \"undefined\") { y = 0; }\r\n                this.x = x;\r\n                this.y = y;\r\n            }\r\n            Point.prototype.toString = function () {\r\n                return \"[Point (x=\" + this.x + \" y=\" + this.y + \")]\";\r\n            };\r\n            return Point;\r\n        })();\r\n        geom.Point = Point;\r\n\r\n        var Rectangle = (function () {\r\n            function Rectangle(x, y, width, height) {\r\n                if (typeof x === \"undefined\") { x = 0; }\r\n                if (typeof y === \"undefined\") { y = 0; }\r\n                if (typeof width === \"undefined\") { width = 0; }\r\n                if (typeof height === \"undefined\") { height = 0; }\r\n                this.x = x;\r\n                this.y = y;\r\n                this.width = width;\r\n                this.height = height;\r\n            }\r\n            return Rectangle;\r\n        })();\r\n        geom.Rectangle = Rectangle;\r\n\r\n        var Matrix = (function () {\r\n            function Matrix() {\r\n                this.a = 1;\r\n                this.b = 0;\r\n                this.c = 0;\r\n                this.d = 1;\r\n                this.tx = 0;\r\n                this.ty = 0;\r\n            }\r\n            Matrix.prototype.invert = function () {\r\n                var a1 = this.a;\r\n                var b1 = this.b;\r\n                var c1 = this.c;\r\n                var d1 = this.d;\r\n                var tx1 = this.tx;\r\n                var n = a1 * d1 - b1 * c1;\r\n\r\n                this.a = d1 / n;\r\n                this.b = -b1 / n;\r\n                this.c = -c1 / n;\r\n                this.d = a1 / n;\r\n                this.tx = (c1 * this.ty - d1 * tx1) / n;\r\n                this.ty = -(a1 * this.ty - b1 * tx1) / n;\r\n            };\r\n            return Matrix;\r\n        })();\r\n        geom.Matrix = Matrix;\r\n\r\n        var ColorTransform = (function () {\r\n            function ColorTransform() {\r\n                this.alphaMultiplier = 0;\r\n                this.alphaOffset = 0;\r\n                this.blueMultiplier = 0;\r\n                this.blueOffset = 0;\r\n                this.greenMultiplier = 0;\r\n                this.greenOffset = 0;\r\n                this.redMultiplier = 0;\r\n                this.redOffset = 0;\r\n            }\r\n            return ColorTransform;\r\n        })();\r\n        geom.ColorTransform = ColorTransform;\r\n    })(dragonBones.geom || (dragonBones.geom = {}));\r\n    var geom = dragonBones.geom;\r\n\r\n    (function (events) {\r\n        var Event = (function () {\r\n            function Event(type) {\r\n                this.type = type;\r\n            }\r\n            return Event;\r\n        })();\r\n        events.Event = Event;\r\n\r\n        var AnimationEvent = (function (_super) {\r\n            __extends(AnimationEvent, _super);\r\n            function AnimationEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            AnimationEvent.FADE_IN = \"fadeIn\";\r\n            AnimationEvent.FADE_OUT = \"fadeOut\";\r\n            AnimationEvent.START = \"start\";\r\n            AnimationEvent.COMPLETE = \"complete\";\r\n            AnimationEvent.LOOP_COMPLETE = \"loopComplete\";\r\n            AnimationEvent.FADE_IN_COMPLETE = \"fadeInComplete\";\r\n            AnimationEvent.FADE_OUT_COMPLETE = \"fadeOutComplete\";\r\n            return AnimationEvent;\r\n        })(Event);\r\n        events.AnimationEvent = AnimationEvent;\r\n\r\n        var ArmatureEvent = (function (_super) {\r\n            __extends(ArmatureEvent, _super);\r\n            function ArmatureEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            ArmatureEvent.Z_ORDER_UPDATED = \"zOrderUpdated\";\r\n            return ArmatureEvent;\r\n        })(Event);\r\n        events.ArmatureEvent = ArmatureEvent;\r\n\r\n        var FrameEvent = (function (_super) {\r\n            __extends(FrameEvent, _super);\r\n            function FrameEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            FrameEvent.ANIMATION_FRAME_EVENT = \"animationFrameEvent\";\r\n            FrameEvent.BONE_FRAME_EVENT = \"boneFrameEvent\";\r\n            return FrameEvent;\r\n        })(Event);\r\n        events.FrameEvent = FrameEvent;\r\n\r\n        var SoundEvent = (function (_super) {\r\n            __extends(SoundEvent, _super);\r\n            function SoundEvent(type) {\r\n                _super.call(this, type);\r\n            }\r\n            SoundEvent.SOUND = \"sound\";\r\n            SoundEvent.BONE_FRAME_EVENT = \"boneFrameEvent\";\r\n            return SoundEvent;\r\n        })(Event);\r\n        events.SoundEvent = SoundEvent;\r\n\r\n        var EventDispatcher = (function () {\r\n            function EventDispatcher() {\r\n            }\r\n            EventDispatcher.prototype.hasEventListener = function (type) {\r\n                if (this._listenersMap && this._listenersMap[type]) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            EventDispatcher.prototype.addEventListener = function (type, listener) {\r\n                if (type && listener) {\r\n                    if (!this._listenersMap) {\r\n                        this._listenersMap = {};\r\n                    }\r\n                    var listeners = this._listenersMap[type];\r\n                    if (listeners) {\r\n                        this.removeEventListener(type, listener);\r\n                    }\r\n                    if (listeners) {\r\n                        listeners.push(listener);\r\n                    } else {\r\n                        this._listenersMap[type] = [listener];\r\n                    }\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.removeEventListener = function (type, listener) {\r\n                if (!this._listenersMap || !type || !listener) {\r\n                    return;\r\n                }\r\n                var listeners = this._listenersMap[type];\r\n                if (listeners) {\r\n                    var length = listeners.length;\r\n                    for (var i = 0; i < length; i++) {\r\n                        if (listeners[i] == listener) {\r\n                            if (length == 1) {\r\n                                listeners.length = 0;\r\n                                delete this._listenersMap[type];\r\n                            } else {\r\n                                listeners.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.removeAllEventListeners = function (type) {\r\n                if (type) {\r\n                    delete this._listenersMap[type];\r\n                } else {\r\n                    this._listenersMap = null;\r\n                }\r\n            };\r\n\r\n            EventDispatcher.prototype.dispatchEvent = function (event) {\r\n                if (event) {\r\n                    var listeners = this._listenersMap[event.type];\r\n                    if (listeners) {\r\n                        event.target = this;\r\n                        var listenersCopy = listeners.concat();\r\n                        var length = listeners.length;\r\n                        for (var i = 0; i < length; i++) {\r\n                            listenersCopy[i](event);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            return EventDispatcher;\r\n        })();\r\n        events.EventDispatcher = EventDispatcher;\r\n\r\n        var SoundEventManager = (function (_super) {\r\n            __extends(SoundEventManager, _super);\r\n            function SoundEventManager() {\r\n                _super.call(this);\r\n                if (SoundEventManager._instance) {\r\n                    throw new Error(\"Singleton already constructed!\");\r\n                }\r\n            }\r\n            SoundEventManager.getInstance = function () {\r\n                if (!SoundEventManager._instance) {\r\n                    SoundEventManager._instance = new SoundEventManager();\r\n                }\r\n                return SoundEventManager._instance;\r\n            };\r\n            return SoundEventManager;\r\n        })(EventDispatcher);\r\n        events.SoundEventManager = SoundEventManager;\r\n    })(dragonBones.events || (dragonBones.events = {}));\r\n    var events = dragonBones.events;\r\n\r\n    (function (animation) {\r\n        var WorldClock = (function () {\r\n            function WorldClock() {\r\n                this.timeScale = 1;\r\n                this.time = new Date().getTime() * 0.001;\r\n                this._animatableList = [];\r\n            }\r\n            WorldClock.prototype.contains = function (animatable) {\r\n                return this._animatableList.indexOf(animatable) >= 0;\r\n            };\r\n\r\n            WorldClock.prototype.add = function (animatable) {\r\n                if (animatable && this._animatableList.indexOf(animatable) == -1) {\r\n                    this._animatableList.push(animatable);\r\n                }\r\n            };\r\n\r\n            WorldClock.prototype.remove = function (animatable) {\r\n                var index = this._animatableList.indexOf(animatable);\r\n                if (index >= 0) {\r\n                    this._animatableList[index] = null;\r\n                }\r\n            };\r\n\r\n            WorldClock.prototype.clear = function () {\r\n                this._animatableList.length = 0;\r\n            };\r\n\r\n            WorldClock.prototype.advanceTime = function (passedTime) {\r\n                if (passedTime < 0) {\r\n                    var currentTime = new Date().getTime() * 0.001;\r\n                    passedTime = currentTime - this.time;\r\n                    this.time = currentTime;\r\n                }\r\n\r\n                passedTime *= this.timeScale;\r\n\r\n                var length = this._animatableList.length;\r\n                if (length == 0) {\r\n                    return;\r\n                }\r\n                var currentIndex = 0;\r\n\r\n                for (var i = 0; i < length; i++) {\r\n                    var animatable = this._animatableList[i];\r\n                    if (animatable) {\r\n                        if (currentIndex != i) {\r\n                            this._animatableList[currentIndex] = animatable;\r\n                            this._animatableList[i] = null;\r\n                        }\r\n                        animatable.advanceTime(passedTime);\r\n                        currentIndex++;\r\n                    }\r\n                }\r\n\r\n                if (currentIndex != i) {\r\n                    length = this._animatableList.length;\r\n                    while (i < length) {\r\n                        this._animatableList[currentIndex++] = this._animatableList[i++];\r\n                    }\r\n                    this._animatableList.length = currentIndex;\r\n                }\r\n            };\r\n            WorldClock.clock = new WorldClock();\r\n            return WorldClock;\r\n        })();\r\n        animation.WorldClock = WorldClock;\r\n\r\n        var TimelineState = (function () {\r\n            function TimelineState() {\r\n                this.transform = new objects.DBTransform();\r\n                this.pivot = new geom.Point();\r\n\r\n                this._durationTransform = new objects.DBTransform();\r\n                this._durationPivot = new geom.Point();\r\n                this._durationColor = new geom.ColorTransform();\r\n            }\r\n            TimelineState._borrowObject = function () {\r\n                if (TimelineState._pool.length == 0) {\r\n                    return new TimelineState();\r\n                }\r\n                return TimelineState._pool.pop();\r\n            };\r\n\r\n            TimelineState._returnObject = function (timeline) {\r\n                if (TimelineState._pool.indexOf(timeline) < 0) {\r\n                    TimelineState._pool[TimelineState._pool.length] = timeline;\r\n                }\r\n\r\n                timeline.clear();\r\n            };\r\n\r\n            TimelineState._clear = function () {\r\n                var i = TimelineState._pool.length;\r\n                while (i--) {\r\n                    TimelineState._pool[i].clear();\r\n                }\r\n                TimelineState._pool.length = 0;\r\n            };\r\n\r\n            TimelineState.getEaseValue = function (value, easing) {\r\n                if (easing > 1) {\r\n                    var valueEase = 0.5 * (1 - Math.cos(value * Math.PI)) - value;\r\n                    easing -= 1;\r\n                } else if (easing > 0) {\r\n                    valueEase = Math.sin(value * TimelineState.HALF_PI) - value;\r\n                } else if (easing < 0) {\r\n                    valueEase = 1 - Math.cos(value * TimelineState.HALF_PI) - value;\r\n                    easing *= -1;\r\n                }\r\n                return valueEase * easing + value;\r\n            };\r\n\r\n            TimelineState.prototype.fadeIn = function (bone, animationState, timeline) {\r\n                this._bone = bone;\r\n                this._animationState = animationState;\r\n                this._timeline = timeline;\r\n\r\n                this._originTransform = this._timeline.originTransform;\r\n                this._originPivot = this._timeline.originPivot;\r\n\r\n                this._tweenTransform = false;\r\n                this._tweenColor = false;\r\n\r\n                this._totalTime = this._animationState.totalTime;\r\n\r\n                this.transform.x = 0;\r\n                this.transform.y = 0;\r\n                this.transform.scaleX = 0;\r\n                this.transform.scaleY = 0;\r\n                this.transform.skewX = 0;\r\n                this.transform.skewY = 0;\r\n                this.pivot.x = 0;\r\n                this.pivot.y = 0;\r\n\r\n                this._durationTransform.x = 0;\r\n                this._durationTransform.y = 0;\r\n                this._durationTransform.scaleX = 0;\r\n                this._durationTransform.scaleY = 0;\r\n                this._durationTransform.skewX = 0;\r\n                this._durationTransform.skewY = 0;\r\n                this._durationPivot.x = 0;\r\n                this._durationPivot.y = 0;\r\n\r\n                this._currentFrame = null;\r\n\r\n                switch (this._timeline.getFrameList().length) {\r\n                    case 0:\r\n                        this._bone._arriveAtFrame(null, this, this._animationState, false);\r\n                        this._updateState = 0;\r\n                        break;\r\n                    case 1:\r\n                        this._updateState = -1;\r\n                        break;\r\n                    default:\r\n                        this._updateState = 1;\r\n                        break;\r\n                }\r\n            };\r\n\r\n            TimelineState.prototype.fadeOut = function () {\r\n                this.transform.skewX = utils.TransformUtil.formatRadian(this.transform.skewX);\r\n                this.transform.skewY = utils.TransformUtil.formatRadian(this.transform.skewY);\r\n            };\r\n\r\n            TimelineState.prototype.update = function (progress) {\r\n                if (this._updateState) {\r\n                    if (this._updateState > 0) {\r\n                        if (this._timeline.scale == 0) {\r\n                            progress = 1;\r\n                        } else {\r\n                            progress /= this._timeline.scale;\r\n                        }\r\n\r\n                        if (progress == 1) {\r\n                            progress = 0.99999999;\r\n                        }\r\n\r\n                        progress += this._timeline.offset;\r\n                        var loopCount = Math.floor(progress);\r\n                        progress -= loopCount;\r\n\r\n                        var playedTime = this._totalTime * progress;\r\n                        var isArrivedFrame = false;\r\n                        var frameIndex;\r\n                        while (!this._currentFrame || playedTime > this._currentFramePosition + this._currentFrameDuration || playedTime < this._currentFramePosition) {\r\n                            if (isArrivedFrame) {\r\n                                this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, true);\r\n                            }\r\n                            isArrivedFrame = true;\r\n                            if (this._currentFrame) {\r\n                                frameIndex = this._timeline.getFrameList().indexOf(this._currentFrame) + 1;\r\n                                if (frameIndex >= this._timeline.getFrameList().length) {\r\n                                    frameIndex = 0;\r\n                                }\r\n                                this._currentFrame = this._timeline.getFrameList()[frameIndex];\r\n                            } else {\r\n                                frameIndex = 0;\r\n                                this._currentFrame = this._timeline.getFrameList()[0];\r\n                            }\r\n                            this._currentFrameDuration = this._currentFrame.duration;\r\n                            this._currentFramePosition = this._currentFrame.position;\r\n                        }\r\n\r\n                        if (isArrivedFrame) {\r\n                            this.tweenActive = this._currentFrame.displayIndex >= 0;\r\n                            frameIndex++;\r\n                            if (frameIndex >= this._timeline.getFrameList().length) {\r\n                                frameIndex = 0;\r\n                            }\r\n                            var nextFrame = this._timeline.getFrameList()[frameIndex];\r\n\r\n                            if (frameIndex == 0 && this._animationState.loop && this._animationState.loopCount >= Math.abs(this._animationState.loop) - 1 && ((this._currentFramePosition + this._currentFrameDuration) / this._totalTime + loopCount - this._timeline.offset) * this._timeline.scale > 0.99999999) {\r\n                                this._updateState = 0;\r\n                                this._tweenEasing = NaN;\r\n                            } else if (this._currentFrame.displayIndex < 0 || nextFrame.displayIndex < 0 || !this._animationState.tweenEnabled) {\r\n                                this._tweenEasing = NaN;\r\n                            } else if (isNaN(this._animationState.clip.tweenEasing)) {\r\n                                this._tweenEasing = this._currentFrame.tweenEasing;\r\n                            } else {\r\n                                this._tweenEasing = this._animationState.clip.tweenEasing;\r\n                            }\r\n\r\n                            if (isNaN(this._tweenEasing)) {\r\n                                this._tweenTransform = false;\r\n                                this._tweenColor = false;\r\n                            } else {\r\n                                this._durationTransform.x = nextFrame.transform.x - this._currentFrame.transform.x;\r\n                                this._durationTransform.y = nextFrame.transform.y - this._currentFrame.transform.y;\r\n                                this._durationTransform.skewX = nextFrame.transform.skewX - this._currentFrame.transform.skewX;\r\n                                this._durationTransform.skewY = nextFrame.transform.skewY - this._currentFrame.transform.skewY;\r\n                                this._durationTransform.scaleX = nextFrame.transform.scaleX - this._currentFrame.transform.scaleX;\r\n                                this._durationTransform.scaleY = nextFrame.transform.scaleY - this._currentFrame.transform.scaleY;\r\n\r\n                                if (frameIndex == 0) {\r\n                                    this._durationTransform.skewX = utils.TransformUtil.formatRadian(this._durationTransform.skewX);\r\n                                    this._durationTransform.skewY = utils.TransformUtil.formatRadian(this._durationTransform.skewY);\r\n                                }\r\n\r\n                                this._durationPivot.x = nextFrame.pivot.x - this._currentFrame.pivot.x;\r\n                                this._durationPivot.y = nextFrame.pivot.y - this._currentFrame.pivot.y;\r\n\r\n                                if (this._durationTransform.x != 0 || this._durationTransform.y != 0 || this._durationTransform.skewX != 0 || this._durationTransform.skewY != 0 || this._durationTransform.scaleX != 0 || this._durationTransform.scaleY != 0 || this._durationPivot.x != 0 || this._durationPivot.y != 0) {\r\n                                    this._tweenTransform = true;\r\n                                } else {\r\n                                    this._tweenTransform = false;\r\n                                }\r\n\r\n                                if (this._currentFrame.color && nextFrame.color) {\r\n                                    this._durationColor.alphaOffset = nextFrame.color.alphaOffset - this._currentFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = nextFrame.color.redOffset - this._currentFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = nextFrame.color.greenOffset - this._currentFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = nextFrame.color.blueOffset - this._currentFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = nextFrame.color.alphaMultiplier - this._currentFrame.color.alphaMultiplier;\r\n                                    this._durationColor.redMultiplier = nextFrame.color.redMultiplier - this._currentFrame.color.redMultiplier;\r\n                                    this._durationColor.greenMultiplier = nextFrame.color.greenMultiplier - this._currentFrame.color.greenMultiplier;\r\n                                    this._durationColor.blueMultiplier = nextFrame.color.blueMultiplier - this._currentFrame.color.blueMultiplier;\r\n\r\n                                    if (this._durationColor.alphaOffset != 0 || this._durationColor.redOffset != 0 || this._durationColor.greenOffset != 0 || this._durationColor.blueOffset != 0 || this._durationColor.alphaMultiplier != 0 || this._durationColor.redMultiplier != 0 || this._durationColor.greenMultiplier != 0 || this._durationColor.blueMultiplier != 0) {\r\n                                        this._tweenColor = true;\r\n                                    } else {\r\n                                        this._tweenColor = false;\r\n                                    }\r\n                                } else if (this._currentFrame.color) {\r\n                                    this._tweenColor = true;\r\n                                    this._durationColor.alphaOffset = -this._currentFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = -this._currentFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = -this._currentFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = -this._currentFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = 1 - this._currentFrame.color.alphaMultiplier;\r\n                                    this._durationColor.redMultiplier = 1 - this._currentFrame.color.redMultiplier;\r\n                                    this._durationColor.greenMultiplier = 1 - this._currentFrame.color.greenMultiplier;\r\n                                    this._durationColor.blueMultiplier = 1 - this._currentFrame.color.blueMultiplier;\r\n                                } else if (nextFrame.color) {\r\n                                    this._tweenColor = true;\r\n                                    this._durationColor.alphaOffset = nextFrame.color.alphaOffset;\r\n                                    this._durationColor.redOffset = nextFrame.color.redOffset;\r\n                                    this._durationColor.greenOffset = nextFrame.color.greenOffset;\r\n                                    this._durationColor.blueOffset = nextFrame.color.blueOffset;\r\n\r\n                                    this._durationColor.alphaMultiplier = nextFrame.color.alphaMultiplier - 1;\r\n                                    this._durationColor.redMultiplier = nextFrame.color.redMultiplier - 1;\r\n                                    this._durationColor.greenMultiplier = nextFrame.color.greenMultiplier - 1;\r\n                                    this._durationColor.blueMultiplier = nextFrame.color.blueMultiplier - 1;\r\n                                } else {\r\n                                    this._tweenColor = false;\r\n                                }\r\n                            }\r\n\r\n                            if (!this._tweenTransform) {\r\n                                if (this._animationState.blend) {\r\n                                    this.transform.x = this._originTransform.x + this._currentFrame.transform.x;\r\n                                    this.transform.y = this._originTransform.y + this._currentFrame.transform.y;\r\n                                    this.transform.skewX = this._originTransform.skewX + this._currentFrame.transform.skewX;\r\n                                    this.transform.skewY = this._originTransform.skewY + this._currentFrame.transform.skewY;\r\n                                    this.transform.scaleX = this._originTransform.scaleX + this._currentFrame.transform.scaleX;\r\n                                    this.transform.scaleY = this._originTransform.scaleY + this._currentFrame.transform.scaleY;\r\n\r\n                                    this.pivot.x = this._originPivot.x + this._currentFrame.pivot.x;\r\n                                    this.pivot.y = this._originPivot.y + this._currentFrame.pivot.y;\r\n                                } else {\r\n                                    this.transform.x = this._currentFrame.transform.x;\r\n                                    this.transform.y = this._currentFrame.transform.y;\r\n                                    this.transform.skewX = this._currentFrame.transform.skewX;\r\n                                    this.transform.skewY = this._currentFrame.transform.skewY;\r\n                                    this.transform.scaleX = this._currentFrame.transform.scaleX;\r\n                                    this.transform.scaleY = this._currentFrame.transform.scaleY;\r\n\r\n                                    this.pivot.x = this._currentFrame.pivot.x;\r\n                                    this.pivot.y = this._currentFrame.pivot.y;\r\n                                }\r\n                            }\r\n\r\n                            if (!this._tweenColor) {\r\n                                if (this._currentFrame.color) {\r\n                                    this._bone._updateColor(this._currentFrame.color.alphaOffset, this._currentFrame.color.redOffset, this._currentFrame.color.greenOffset, this._currentFrame.color.blueOffset, this._currentFrame.color.alphaMultiplier, this._currentFrame.color.redMultiplier, this._currentFrame.color.greenMultiplier, this._currentFrame.color.blueMultiplier, true);\r\n                                } else if (this._bone._isColorChanged) {\r\n                                    this._bone._updateColor(0, 0, 0, 0, 1, 1, 1, 1, false);\r\n                                }\r\n                            }\r\n                            this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, false);\r\n                        }\r\n\r\n                        if (this._tweenTransform || this._tweenColor) {\r\n                            progress = (playedTime - this._currentFramePosition) / this._currentFrameDuration;\r\n                            if (this._tweenEasing) {\r\n                                progress = TimelineState.getEaseValue(progress, this._tweenEasing);\r\n                            }\r\n                        }\r\n\r\n                        if (this._tweenTransform) {\r\n                            var currentTransform = this._currentFrame.transform;\r\n                            var currentPivot = this._currentFrame.pivot;\r\n                            if (this._animationState.blend) {\r\n                                this.transform.x = this._originTransform.x + currentTransform.x + this._durationTransform.x * progress;\r\n                                this.transform.y = this._originTransform.y + currentTransform.y + this._durationTransform.y * progress;\r\n                                this.transform.skewX = this._originTransform.skewX + currentTransform.skewX + this._durationTransform.skewX * progress;\r\n                                this.transform.skewY = this._originTransform.skewY + currentTransform.skewY + this._durationTransform.skewY * progress;\r\n                                this.transform.scaleX = this._originTransform.scaleX + currentTransform.scaleX + this._durationTransform.scaleX * progress;\r\n                                this.transform.scaleY = this._originTransform.scaleY + currentTransform.scaleY + this._durationTransform.scaleY * progress;\r\n\r\n                                this.pivot.x = this._originPivot.x + currentPivot.x + this._durationPivot.x * progress;\r\n                                this.pivot.y = this._originPivot.y + currentPivot.y + this._durationPivot.y * progress;\r\n                            } else {\r\n                                this.transform.x = currentTransform.x + this._durationTransform.x * progress;\r\n                                this.transform.y = currentTransform.y + this._durationTransform.y * progress;\r\n                                this.transform.skewX = currentTransform.skewX + this._durationTransform.skewX * progress;\r\n                                this.transform.skewY = currentTransform.skewY + this._durationTransform.skewY * progress;\r\n                                this.transform.scaleX = currentTransform.scaleX + this._durationTransform.scaleX * progress;\r\n                                this.transform.scaleY = currentTransform.scaleY + this._durationTransform.scaleY * progress;\r\n\r\n                                this.pivot.x = currentPivot.x + this._durationPivot.x * progress;\r\n                                this.pivot.y = currentPivot.y + this._durationPivot.y * progress;\r\n                            }\r\n                        }\r\n\r\n                        if (this._tweenColor) {\r\n                            if (this._currentFrame.color) {\r\n                                this._bone._updateColor(this._currentFrame.color.alphaOffset + this._durationColor.alphaOffset * progress, this._currentFrame.color.redOffset + this._durationColor.redOffset * progress, this._currentFrame.color.greenOffset + this._durationColor.greenOffset * progress, this._currentFrame.color.blueOffset + this._durationColor.blueOffset * progress, this._currentFrame.color.alphaMultiplier + this._durationColor.alphaMultiplier * progress, this._currentFrame.color.redMultiplier + this._durationColor.redMultiplier * progress, this._currentFrame.color.greenMultiplier + this._durationColor.greenMultiplier * progress, this._currentFrame.color.blueMultiplier + this._durationColor.blueMultiplier * progress, true);\r\n                            } else {\r\n                                this._bone._updateColor(this._durationColor.alphaOffset * progress, this._durationColor.redOffset * progress, this._durationColor.greenOffset * progress, this._durationColor.blueOffset * progress, 1 + this._durationColor.alphaMultiplier * progress, 1 + this._durationColor.redMultiplier * progress, 1 + this._durationColor.greenMultiplier * progress, 1 + this._durationColor.blueMultiplier * progress, true);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this._updateState = 0;\r\n                        if (this._animationState.blend) {\r\n                            this.transform.copy(this._originTransform);\r\n\r\n                            this.pivot.x = this._originPivot.x;\r\n                            this.pivot.y = this._originPivot.y;\r\n                        } else {\r\n                            this.transform.x = this.transform.y = this.transform.skewX = this.transform.skewY = this.transform.scaleX = this.transform.scaleY = 0;\r\n\r\n                            this.pivot.x = 0;\r\n                            this.pivot.y = 0;\r\n                        }\r\n\r\n                        this._currentFrame = this._timeline.getFrameList()[0];\r\n\r\n                        this.tweenActive = this._currentFrame.displayIndex >= 0;\r\n\r\n                        if (this._currentFrame.color) {\r\n                            this._bone._updateColor(this._currentFrame.color.alphaOffset, this._currentFrame.color.redOffset, this._currentFrame.color.greenOffset, this._currentFrame.color.blueOffset, this._currentFrame.color.alphaMultiplier, this._currentFrame.color.redMultiplier, this._currentFrame.color.greenMultiplier, this._currentFrame.color.blueMultiplier, true);\r\n                        } else {\r\n                            this._bone._updateColor(0, 0, 0, 0, 1, 1, 1, 1, false);\r\n                        }\r\n\r\n                        this._bone._arriveAtFrame(this._currentFrame, this, this._animationState, false);\r\n                    }\r\n                }\r\n            };\r\n\r\n            TimelineState.prototype.clear = function () {\r\n                this._updateState = 0;\r\n                this._bone = null;\r\n                this._animationState = null;\r\n                this._timeline = null;\r\n                this._currentFrame = null;\r\n                this._originTransform = null;\r\n                this._originPivot = null;\r\n            };\r\n            TimelineState.HALF_PI = Math.PI * 0.5;\r\n\r\n            TimelineState._pool = [];\r\n            return TimelineState;\r\n        })();\r\n        animation.TimelineState = TimelineState;\r\n\r\n        var AnimationState = (function () {\r\n            function AnimationState() {\r\n                this.loop = 0;\r\n                this.layer = 0;\r\n                this._timelineStates = {};\r\n            }\r\n            AnimationState._borrowObject = function () {\r\n                if (AnimationState._pool.length == 0) {\r\n                    return new AnimationState();\r\n                }\r\n                return AnimationState._pool.pop();\r\n            };\r\n\r\n            AnimationState._returnObject = function (animationState) {\r\n                if (AnimationState._pool.indexOf(animationState) < 0) {\r\n                    AnimationState._pool[AnimationState._pool.length] = animationState;\r\n                }\r\n\r\n                animationState.clear();\r\n            };\r\n\r\n            AnimationState._clear = function () {\r\n                var i = AnimationState._pool.length;\r\n                while (i--) {\r\n                    AnimationState._pool[i].clear();\r\n                }\r\n                AnimationState._pool.length = 0;\r\n            };\r\n\r\n            AnimationState.prototype.fadeIn = function (armature, clip, fadeInTime, timeScale, loop, layer, displayControl, pauseBeforeFadeInComplete) {\r\n                this.layer = layer;\r\n                this.clip = clip;\r\n                this.name = this.clip.name;\r\n                this.totalTime = this.clip.duration;\r\n\r\n                this._armature = armature;\r\n\r\n                if (Math.round(this.clip.duration * this.clip.frameRate) < 2 || timeScale == Infinity) {\r\n                    this.timeScale = 1;\r\n                    this.currentTime = this.totalTime;\r\n                    if (this.loop >= 0) {\r\n                        this.loop = 1;\r\n                    } else {\r\n                        this.loop = -1;\r\n                    }\r\n                } else {\r\n                    this.timeScale = timeScale;\r\n                    this.currentTime = 0;\r\n                    this.loop = loop;\r\n                }\r\n\r\n                this._pauseBeforeFadeInComplete = pauseBeforeFadeInComplete;\r\n\r\n                this._fadeInTime = fadeInTime * this.timeScale;\r\n                this._fadeState = 1;\r\n                this._fadeOutBeginTime = 0;\r\n                this._fadeOutWeight = -1;\r\n                this._fadeWeight = 0;\r\n                this._fadeIn = true;\r\n                this._fadeOut = false;\r\n\r\n                this.loopCount = -1;\r\n                this.displayControl = displayControl;\r\n                this.isPlaying = true;\r\n                this.isComplete = false;\r\n\r\n                this.weight = 1;\r\n                this.blend = true;\r\n                this.enabled = true;\r\n                this.tweenEnabled = true;\r\n\r\n                this.updateTimelineStates();\r\n            };\r\n\r\n            AnimationState.prototype.fadeOut = function (fadeOutTime, pause) {\r\n                if (typeof pause === \"undefined\") { pause = false; }\r\n                if (!this._armature || this._fadeOutWeight >= 0) {\r\n                    return;\r\n                }\r\n                this._fadeState = -1;\r\n                this._fadeOutWeight = this._fadeWeight;\r\n                this._fadeOutTime = fadeOutTime * this.timeScale;\r\n                this._fadeOutBeginTime = this.currentTime;\r\n                this._fadeOut = true;\r\n\r\n                this.isPlaying = !pause;\r\n                this.displayControl = false;\r\n\r\n                for (var index in this._timelineStates) {\r\n                    (this._timelineStates[index]).fadeOut();\r\n                }\r\n\r\n                this.enabled = true;\r\n            };\r\n\r\n            AnimationState.prototype.play = function () {\r\n                this.isPlaying = true;\r\n            };\r\n\r\n            AnimationState.prototype.stop = function () {\r\n                this.isPlaying = false;\r\n            };\r\n\r\n            AnimationState.prototype.getMixingTransform = function (timelineName) {\r\n                if (this._mixingTransforms) {\r\n                    return Number(this._mixingTransforms[timelineName]);\r\n                }\r\n                return -1;\r\n            };\r\n\r\n            AnimationState.prototype.addMixingTransform = function (timelineName, type, recursive) {\r\n                if (typeof type === \"undefined\") { type = 2; }\r\n                if (typeof recursive === \"undefined\") { recursive = true; }\r\n                if (this.clip && this.clip.getTimeline(timelineName)) {\r\n                    if (!this._mixingTransforms) {\r\n                        this._mixingTransforms = {};\r\n                    }\r\n                    if (recursive) {\r\n                        var i = this._armature._boneList.length;\r\n                        var bone;\r\n                        var currentBone;\r\n                        while (i--) {\r\n                            bone = this._armature._boneList[i];\r\n                            if (bone.name == timelineName) {\r\n                                currentBone = bone;\r\n                            }\r\n                            if (currentBone && (currentBone == bone || currentBone.contains(bone))) {\r\n                                this._mixingTransforms[bone.name] = type;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this._mixingTransforms[timelineName] = type;\r\n                    }\r\n\r\n                    this.updateTimelineStates();\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.removeMixingTransform = function (timelineName, recursive) {\r\n                if (typeof timelineName === \"undefined\") { timelineName = null; }\r\n                if (typeof recursive === \"undefined\") { recursive = true; }\r\n                if (timelineName) {\r\n                    if (recursive) {\r\n                        var i = this._armature._boneList.length;\r\n                        var bone;\r\n                        var currentBone;\r\n                        while (i--) {\r\n                            bone = this._armature._boneList[i];\r\n                            if (bone.name == timelineName) {\r\n                                currentBone = bone;\r\n                            }\r\n                            if (currentBone && (currentBone == bone || currentBone.contains(bone))) {\r\n                                delete this._mixingTransforms[bone.name];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        delete this._mixingTransforms[timelineName];\r\n                    }\r\n\r\n                    for (var index in this._mixingTransforms) {\r\n                        var hasMixing = true;\r\n                        break;\r\n                    }\r\n                    if (!hasMixing) {\r\n                        this._mixingTransforms = null;\r\n                    }\r\n                } else {\r\n                    this._mixingTransforms = null;\r\n                }\r\n\r\n                this.updateTimelineStates();\r\n            };\r\n\r\n            AnimationState.prototype.advanceTime = function (passedTime) {\r\n                if (!this.enabled) {\r\n                    return false;\r\n                }\r\n                var event;\r\n                var isComplete;\r\n\r\n                if (this._fadeIn) {\r\n                    this._fadeIn = false;\r\n                    if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN)) {\r\n                        event = new events.AnimationEvent(events.AnimationEvent.FADE_IN);\r\n                        event.animationState = this;\r\n                        this._armature._eventList.push(event);\r\n                    }\r\n                }\r\n\r\n                if (this._fadeOut) {\r\n                    this._fadeOut = false;\r\n                    if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT)) {\r\n                        event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT);\r\n                        event.animationState = this;\r\n                        this._armature._eventList.push(event);\r\n                    }\r\n                }\r\n\r\n                this.currentTime += passedTime * this.timeScale;\r\n\r\n                if (this.isPlaying && !this.isComplete) {\r\n                    var progress;\r\n                    var currentLoopCount;\r\n                    if (this._pauseBeforeFadeInComplete) {\r\n                        this._pauseBeforeFadeInComplete = false;\r\n                        this.isPlaying = false;\r\n                        progress = 0;\r\n                        currentLoopCount = Math.floor(progress);\r\n                    } else {\r\n                        progress = this.currentTime / this.totalTime;\r\n\r\n                        currentLoopCount = Math.floor(progress);\r\n                        if (currentLoopCount != this.loopCount) {\r\n                            if (this.loopCount == -1) {\r\n                                if (this._armature.hasEventListener(events.AnimationEvent.START)) {\r\n                                    event = new events.AnimationEvent(events.AnimationEvent.START);\r\n                                    event.animationState = this;\r\n                                    this._armature._eventList.push(event);\r\n                                }\r\n                            }\r\n                            this.loopCount = currentLoopCount;\r\n                            if (this.loopCount) {\r\n                                if (this.loop && this.loopCount * this.loopCount >= this.loop * this.loop - 1) {\r\n                                    isComplete = true;\r\n                                    progress = 1;\r\n                                    currentLoopCount = 0;\r\n                                    if (this._armature.hasEventListener(events.AnimationEvent.COMPLETE)) {\r\n                                        event = new events.AnimationEvent(events.AnimationEvent.COMPLETE);\r\n                                        event.animationState = this;\r\n                                        this._armature._eventList.push(event);\r\n                                    }\r\n                                } else {\r\n                                    if (this._armature.hasEventListener(events.AnimationEvent.LOOP_COMPLETE)) {\r\n                                        event = new events.AnimationEvent(events.AnimationEvent.LOOP_COMPLETE);\r\n                                        event.animationState = this;\r\n                                        this._armature._eventList.push(event);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (var index in this._timelineStates) {\r\n                        (this._timelineStates[index]).update(progress);\r\n                    }\r\n                    var frameList = this.clip.getFrameList();\r\n                    if (frameList.length > 0) {\r\n                        var playedTime = this.totalTime * (progress - currentLoopCount);\r\n                        var isArrivedFrame = false;\r\n                        var frameIndex;\r\n                        while (!this._currentFrame || playedTime > this._currentFrame.position + this._currentFrame.duration || playedTime < this._currentFrame.position) {\r\n                            if (isArrivedFrame) {\r\n                                this._armature._arriveAtFrame(this._currentFrame, null, this, true);\r\n                            }\r\n                            isArrivedFrame = true;\r\n                            if (this._currentFrame) {\r\n                                frameIndex = frameList.indexOf(this._currentFrame);\r\n                                frameIndex++;\r\n                                if (frameIndex >= frameList.length) {\r\n                                    frameIndex = 0;\r\n                                }\r\n                                this._currentFrame = frameList[frameIndex];\r\n                            } else {\r\n                                this._currentFrame = frameList[0];\r\n                            }\r\n                        }\r\n\r\n                        if (isArrivedFrame) {\r\n                            this._armature._arriveAtFrame(this._currentFrame, null, this, false);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this._fadeState > 0) {\r\n                    if (this._fadeInTime == 0) {\r\n                        this._fadeWeight = 1;\r\n                        this._fadeState = 0;\r\n                        this.isPlaying = true;\r\n                        if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN_COMPLETE)) {\r\n                            event = new events.AnimationEvent(events.AnimationEvent.FADE_IN_COMPLETE);\r\n                            event.animationState = this;\r\n                            this._armature._eventList.push(event);\r\n                        }\r\n                    } else {\r\n                        this._fadeWeight = this.currentTime / this._fadeInTime;\r\n                        if (this._fadeWeight >= 1) {\r\n                            this._fadeWeight = 1;\r\n                            this._fadeState = 0;\r\n                            if (!this.isPlaying) {\r\n                                this.currentTime -= this._fadeInTime;\r\n                            }\r\n                            this.isPlaying = true;\r\n                            if (this._armature.hasEventListener(events.AnimationEvent.FADE_IN_COMPLETE)) {\r\n                                event = new events.AnimationEvent(events.AnimationEvent.FADE_IN_COMPLETE);\r\n                                event.animationState = this;\r\n                                this._armature._eventList.push(event);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (this._fadeState < 0) {\r\n                    if (this._fadeOutTime == 0) {\r\n                        this._fadeWeight = 0;\r\n                        this._fadeState = 0;\r\n                        if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT_COMPLETE)) {\r\n                            event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT_COMPLETE);\r\n                            event.animationState = this;\r\n                            this._armature._eventList.push(event);\r\n                        }\r\n                        return true;\r\n                    } else {\r\n                        this._fadeWeight = (1 - (this.currentTime - this._fadeOutBeginTime) / this._fadeOutTime) * this._fadeOutWeight;\r\n                        if (this._fadeWeight <= 0) {\r\n                            this._fadeWeight = 0;\r\n                            this._fadeState = 0;\r\n                            if (this._armature.hasEventListener(events.AnimationEvent.FADE_OUT_COMPLETE)) {\r\n                                event = new events.AnimationEvent(events.AnimationEvent.FADE_OUT_COMPLETE);\r\n                                event.animationState = this;\r\n                                this._armature._eventList.push(event);\r\n                            }\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isComplete) {\r\n                    this.isComplete = true;\r\n                    if (this.loop < 0) {\r\n                        this.fadeOut((this._fadeOutWeight || this._fadeInTime) / this.timeScale, true);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            AnimationState.prototype.updateTimelineStates = function () {\r\n                if (this._mixingTransforms) {\r\n                    for (var timelineName in this._timelineStates) {\r\n                        if (this._mixingTransforms[timelineName] == null) {\r\n                            this.removeTimelineState(timelineName);\r\n                        }\r\n                    }\r\n\r\n                    for (timelineName in this._mixingTransforms) {\r\n                        if (!this._timelineStates[timelineName]) {\r\n                            this.addTimelineState(timelineName);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (timelineName in this.clip.getTimelines()) {\r\n                        if (!this._timelineStates[timelineName]) {\r\n                            this.addTimelineState(timelineName);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.addTimelineState = function (timelineName) {\r\n                var bone = this._armature.getBone(timelineName);\r\n                if (bone) {\r\n                    var timelineState = TimelineState._borrowObject();\r\n                    var timeline = this.clip.getTimeline(timelineName);\r\n                    timelineState.fadeIn(bone, this, timeline);\r\n                    this._timelineStates[timelineName] = timelineState;\r\n                }\r\n            };\r\n\r\n            AnimationState.prototype.removeTimelineState = function (timelineName) {\r\n                TimelineState._returnObject(this._timelineStates[timelineName]);\r\n                delete this._timelineStates[timelineName];\r\n            };\r\n\r\n            AnimationState.prototype.clear = function () {\r\n                this.clip = null;\r\n                this.enabled = false;\r\n\r\n                this._armature = null;\r\n                this._currentFrame = null;\r\n                this._mixingTransforms = null;\r\n\r\n                for (var timelineName in this._timelineStates) {\r\n                    this.removeTimelineState(timelineName);\r\n                }\r\n            };\r\n            AnimationState._pool = [];\r\n            return AnimationState;\r\n        })();\r\n        animation.AnimationState = AnimationState;\r\n\r\n        var Animation = (function () {\r\n            function Animation(armature) {\r\n                this._armature = armature;\r\n                this._animationLayer = [];\r\n                this._isPlaying = false;\r\n\r\n                this.animationNameList = [];\r\n                this.tweenEnabled = true;\r\n                this.timeScale = 1;\r\n            }\r\n            Animation.prototype.getLastAnimationName = function () {\r\n                return this._lastAnimationState ? this._lastAnimationState.name : null;\r\n            };\r\n\r\n            Animation.prototype.getLastAnimationState = function () {\r\n                return this._lastAnimationState;\r\n            };\r\n\r\n            Animation.prototype.getAnimationDataList = function () {\r\n                return this._animationDataList;\r\n            };\r\n            Animation.prototype.setAnimationDataList = function (value) {\r\n                this._animationDataList = value;\r\n                this.animationNameList.length = 0;\r\n                for (var index in this._animationDataList) {\r\n                    this.animationNameList[this.animationNameList.length] = this._animationDataList[index].name;\r\n                }\r\n            };\r\n\r\n            Animation.prototype.getIsPlaying = function () {\r\n                return this._isPlaying && !this.getIsComplete();\r\n            };\r\n\r\n            Animation.prototype.getIsComplete = function () {\r\n                if (this._lastAnimationState) {\r\n                    if (!this._lastAnimationState.isComplete) {\r\n                        return false;\r\n                    }\r\n                    var j = this._animationLayer.length;\r\n                    while (j--) {\r\n                        var animationStateList = this._animationLayer[j];\r\n                        var i = animationStateList.length;\r\n                        while (i--) {\r\n                            if (!animationStateList[i].isComplete) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            Animation.prototype.dispose = function () {\r\n                if (!this._armature) {\r\n                    return;\r\n                }\r\n                this.stop();\r\n                var i = this._animationLayer.length;\r\n                while (i--) {\r\n                    var animationStateList = this._animationLayer[i];\r\n                    var j = animationStateList.length;\r\n                    while (j--) {\r\n                        AnimationState._returnObject(animationStateList[j]);\r\n                    }\r\n                    animationStateList.length = 0;\r\n                }\r\n                this._animationLayer.length = 0;\r\n                this.animationNameList.length = 0;\r\n\r\n                this._armature = null;\r\n                this._animationLayer = null;\r\n                this._animationDataList = null;\r\n                this.animationNameList = null;\r\n            };\r\n\r\n            Animation.prototype.gotoAndPlay = function (animationName, fadeInTime, duration, loop, layer, group, fadeOutMode, displayControl, pauseFadeOut, pauseFadeIn) {\r\n                if (typeof fadeInTime === \"undefined\") { fadeInTime = -1; }\r\n                if (typeof duration === \"undefined\") { duration = -1; }\r\n                if (typeof loop === \"undefined\") { loop = NaN; }\r\n                if (typeof layer === \"undefined\") { layer = 0; }\r\n                if (typeof group === \"undefined\") { group = null; }\r\n                if (typeof fadeOutMode === \"undefined\") { fadeOutMode = Animation.SAME_LAYER_AND_GROUP; }\r\n                if (typeof displayControl === \"undefined\") { displayControl = true; }\r\n                if (typeof pauseFadeOut === \"undefined\") { pauseFadeOut = true; }\r\n                if (typeof pauseFadeIn === \"undefined\") { pauseFadeIn = true; }\r\n                if (!this._animationDataList) {\r\n                    return null;\r\n                }\r\n                var i = this._animationDataList.length;\r\n                var animationData;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        animationData = this._animationDataList[i];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!animationData) {\r\n                    return null;\r\n                }\r\n\r\n                this._isPlaying = true;\r\n\r\n                fadeInTime = fadeInTime < 0 ? (animationData.fadeInTime < 0 ? 0.3 : animationData.fadeInTime) : fadeInTime;\r\n\r\n                var durationScale;\r\n                if (duration < 0) {\r\n                    durationScale = animationData.scale < 0 ? 1 : animationData.scale;\r\n                } else {\r\n                    durationScale = duration / animationData.duration;\r\n                }\r\n\r\n                loop = isNaN(loop) ? animationData.loop : loop;\r\n                layer = this.addLayer(layer);\r\n\r\n                var animationState;\r\n                var animationStateList;\r\n                switch (fadeOutMode) {\r\n                    case Animation.NONE:\r\n                        break;\r\n                    case Animation.SAME_LAYER:\r\n                        animationStateList = this._animationLayer[layer];\r\n                        i = animationStateList.length;\r\n                        while (i--) {\r\n                            animationState = animationStateList[i];\r\n                            animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                        }\r\n                        break;\r\n                    case Animation.SAME_GROUP:\r\n                        j = this._animationLayer.length;\r\n                        while (j--) {\r\n                            animationStateList = this._animationLayer[j];\r\n                            i = animationStateList.length;\r\n                            while (i--) {\r\n                                animationState = animationStateList[i];\r\n                                if (animationState.group == group) {\r\n                                    animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case Animation.ALL:\r\n                        var j = this._animationLayer.length;\r\n                        while (j--) {\r\n                            animationStateList = this._animationLayer[j];\r\n                            i = animationStateList.length;\r\n                            while (i--) {\r\n                                animationState = animationStateList[i];\r\n                                animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case Animation.SAME_LAYER_AND_GROUP:\r\n                    default:\r\n                        animationStateList = this._animationLayer[layer];\r\n                        i = animationStateList.length;\r\n                        while (i--) {\r\n                            animationState = animationStateList[i];\r\n                            if (animationState.group == group) {\r\n                                animationState.fadeOut(fadeInTime, pauseFadeOut);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                this._lastAnimationState = AnimationState._borrowObject();\r\n                this._lastAnimationState.group = group;\r\n                this._lastAnimationState.tweenEnabled = this.tweenEnabled;\r\n                this._lastAnimationState.fadeIn(this._armature, animationData, fadeInTime, 1 / durationScale, loop, layer, displayControl, pauseFadeIn);\r\n\r\n                this.addState(this._lastAnimationState);\r\n\r\n                var slotList = this._armature._slotList;\r\n                var slot;\r\n                var childArmature;\r\n                i = slotList.length;\r\n                while (i--) {\r\n                    slot = slotList[i];\r\n                    childArmature = slot.getChildArmature();\r\n                    if (childArmature) {\r\n                        childArmature.animation.gotoAndPlay(animationName, fadeInTime);\r\n                    }\r\n                }\r\n\r\n                return this._lastAnimationState;\r\n            };\r\n\r\n            Animation.prototype.play = function () {\r\n                if (!this._animationDataList || this._animationDataList.length == 0) {\r\n                    return;\r\n                }\r\n                if (!this._lastAnimationState) {\r\n                    this.gotoAndPlay(this._animationDataList[0].name);\r\n                } else if (!this._isPlaying) {\r\n                    this._isPlaying = true;\r\n                } else {\r\n                    this.gotoAndPlay(this._lastAnimationState.name);\r\n                }\r\n            };\r\n\r\n            Animation.prototype.stop = function () {\r\n                this._isPlaying = false;\r\n            };\r\n\r\n            Animation.prototype.getState = function (name, layer) {\r\n                if (typeof layer === \"undefined\") { layer = 0; }\r\n                var l = this._animationLayer.length;\r\n                if (l == 0) {\r\n                    return null;\r\n                } else if (layer >= l) {\r\n                    layer = l - 1;\r\n                }\r\n\r\n                var animationStateList = this._animationLayer[layer];\r\n                if (!animationStateList) {\r\n                    return null;\r\n                }\r\n                var i = animationStateList.length;\r\n                while (i--) {\r\n                    if (animationStateList[i].name == name) {\r\n                        return animationStateList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            Animation.prototype.hasAnimation = function (animationName) {\r\n                var i = this._animationDataList.length;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            Animation.prototype.advanceTime = function (passedTime) {\r\n                if (!this._isPlaying) {\r\n                    return;\r\n                }\r\n                passedTime *= this.timeScale;\r\n\r\n                var l = this._armature._boneList.length;\r\n                var i;\r\n                var j;\r\n                var k = l;\r\n                var stateListLength;\r\n                var bone;\r\n                var boneName;\r\n                var weigthLeft;\r\n\r\n                var x;\r\n                var y;\r\n                var skewX;\r\n                var skewY;\r\n                var scaleX;\r\n                var scaleY;\r\n                var pivotX;\r\n                var pivotY;\r\n\r\n                var layerTotalWeight;\r\n                var animationStateList;\r\n                var animationState;\r\n                var timelineState;\r\n                var weight;\r\n                var transform;\r\n                var pivot;\r\n\r\n                l--;\r\n                while (k--) {\r\n                    bone = this._armature._boneList[k];\r\n                    boneName = bone.name;\r\n                    weigthLeft = 1;\r\n\r\n                    x = 0;\r\n                    y = 0;\r\n                    skewX = 0;\r\n                    skewY = 0;\r\n                    scaleX = 0;\r\n                    scaleY = 0;\r\n                    pivotX = 0;\r\n                    pivotY = 0;\r\n\r\n                    i = this._animationLayer.length;\r\n                    while (i--) {\r\n                        layerTotalWeight = 0;\r\n                        animationStateList = this._animationLayer[i];\r\n                        stateListLength = animationStateList.length;\r\n                        for (j = 0; j < stateListLength; j++) {\r\n                            animationState = animationStateList[j];\r\n                            if (k == l) {\r\n                                if (animationState.advanceTime(passedTime)) {\r\n                                    this.removeState(animationState);\r\n                                    j--;\r\n                                    stateListLength--;\r\n                                    continue;\r\n                                }\r\n                            }\r\n\r\n                            timelineState = animationState._timelineStates[boneName];\r\n                            if (timelineState && timelineState.tweenActive) {\r\n                                weight = animationState._fadeWeight * animationState.weight * weigthLeft;\r\n                                transform = timelineState.transform;\r\n                                pivot = timelineState.pivot;\r\n                                x += transform.x * weight;\r\n                                y += transform.y * weight;\r\n                                skewX += transform.skewX * weight;\r\n                                skewY += transform.skewY * weight;\r\n                                scaleX += transform.scaleX * weight;\r\n                                scaleY += transform.scaleY * weight;\r\n                                pivotX += pivot.x * weight;\r\n                                pivotY += pivot.y * weight;\r\n\r\n                                layerTotalWeight += weight;\r\n                            }\r\n                        }\r\n\r\n                        if (layerTotalWeight >= weigthLeft) {\r\n                            break;\r\n                        } else {\r\n                            weigthLeft -= layerTotalWeight;\r\n                        }\r\n                    }\r\n                    transform = bone.tween;\r\n                    pivot = bone._tweenPivot;\r\n\r\n                    transform.x = x;\r\n                    transform.y = y;\r\n                    transform.skewX = skewX;\r\n                    transform.skewY = skewY;\r\n                    transform.scaleX = scaleX;\r\n                    transform.scaleY = scaleY;\r\n                    pivot.x = pivotX;\r\n                    pivot.y = pivotY;\r\n                }\r\n            };\r\n\r\n            Animation.prototype.addLayer = function (layer) {\r\n                if (layer >= this._animationLayer.length) {\r\n                    layer = this._animationLayer.length;\r\n                    this._animationLayer[layer] = [];\r\n                }\r\n                return layer;\r\n            };\r\n\r\n            Animation.prototype.addState = function (animationState) {\r\n                var animationStateList = this._animationLayer[animationState.layer];\r\n                animationStateList.push(animationState);\r\n            };\r\n\r\n            Animation.prototype.removeState = function (animationState) {\r\n                var layer = animationState.layer;\r\n                var animationStateList = this._animationLayer[layer];\r\n                animationStateList.splice(animationStateList.indexOf(animationState), 1);\r\n\r\n                AnimationState._returnObject(animationState);\r\n\r\n                if (animationStateList.length == 0 && layer == this._animationLayer.length - 1) {\r\n                    this._animationLayer.length--;\r\n                }\r\n            };\r\n            Animation.NONE = \"none\";\r\n            Animation.SAME_LAYER = \"sameLayer\";\r\n            Animation.SAME_GROUP = \"sameGroup\";\r\n            Animation.SAME_LAYER_AND_GROUP = \"sameLayerAndGroup\";\r\n            Animation.ALL = \"all\";\r\n            return Animation;\r\n        })();\r\n        animation.Animation = Animation;\r\n    })(dragonBones.animation || (dragonBones.animation = {}));\r\n    var animation = dragonBones.animation;\r\n\r\n    (function (objects) {\r\n        var DBTransform = (function () {\r\n            function DBTransform() {\r\n                this.x = 0;\r\n                this.y = 0;\r\n                this.skewX = 0;\r\n                this.skewY = 0;\r\n                this.scaleX = 1;\r\n                this.scaleY = 1;\r\n            }\r\n            DBTransform.prototype.getRotation = function () {\r\n                return this.skewX;\r\n            };\r\n            DBTransform.prototype.setRotation = function (value) {\r\n                this.skewX = this.skewY = value;\r\n            };\r\n\r\n            DBTransform.prototype.copy = function (transform) {\r\n                this.x = transform.x;\r\n                this.y = transform.y;\r\n                this.skewX = transform.skewX;\r\n                this.skewY = transform.skewY;\r\n                this.scaleX = transform.scaleX;\r\n                this.scaleY = transform.scaleY;\r\n            };\r\n\r\n            DBTransform.prototype.toString = function () {\r\n                return \"[DBTransform (x=\" + this.x + \" y=\" + this.y + \" skewX=\" + this.skewX + \" skewY=\" + this.skewY + \" scaleX=\" + this.scaleX + \" scaleY=\" + this.scaleY + \")]\";\r\n            };\r\n            return DBTransform;\r\n        })();\r\n        objects.DBTransform = DBTransform;\r\n\r\n        var Frame = (function () {\r\n            function Frame() {\r\n                this.position = 0;\r\n                this.duration = 0;\r\n            }\r\n            Frame.prototype.dispose = function () {\r\n            };\r\n            return Frame;\r\n        })();\r\n        objects.Frame = Frame;\r\n\r\n        var TransformFrame = (function (_super) {\r\n            __extends(TransformFrame, _super);\r\n            function TransformFrame() {\r\n                _super.call(this);\r\n\r\n                this.tweenEasing = 0;\r\n                this.tweenRotate = 0;\r\n                this.displayIndex = 0;\r\n                this.zOrder = NaN;\r\n                this.visible = true;\r\n\r\n                this.global = new DBTransform();\r\n                this.transform = new DBTransform();\r\n                this.pivot = new geom.Point();\r\n            }\r\n            TransformFrame.prototype.dispose = function () {\r\n                _super.prototype.dispose.call(this);\r\n                this.global = null;\r\n                this.transform = null;\r\n\r\n                this.pivot = null;\r\n                this.color = null;\r\n            };\r\n            return TransformFrame;\r\n        })(Frame);\r\n        objects.TransformFrame = TransformFrame;\r\n\r\n        var Timeline = (function () {\r\n            function Timeline() {\r\n                this._frameList = [];\r\n                this.duration = 0;\r\n                this.scale = 1;\r\n            }\r\n            Timeline.prototype.getFrameList = function () {\r\n                return this._frameList;\r\n            };\r\n\r\n            Timeline.prototype.dispose = function () {\r\n                var i = this._frameList.length;\r\n                while (i--) {\r\n                    this._frameList[i].dispose();\r\n                }\r\n                this._frameList.length = 0;\r\n                this._frameList = null;\r\n            };\r\n\r\n            Timeline.prototype.addFrame = function (frame) {\r\n                if (!frame) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._frameList.indexOf(frame) < 0) {\r\n                    this._frameList[this._frameList.length] = frame;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n            return Timeline;\r\n        })();\r\n        objects.Timeline = Timeline;\r\n\r\n        var TransformTimeline = (function (_super) {\r\n            __extends(TransformTimeline, _super);\r\n            function TransformTimeline() {\r\n                _super.call(this);\r\n                this.originTransform = new DBTransform();\r\n                this.originPivot = new geom.Point();\r\n                this.offset = 0;\r\n                this.transformed = false;\r\n            }\r\n            TransformTimeline.prototype.dispose = function () {\r\n                if (this == TransformTimeline.HIDE_TIMELINE) {\r\n                    return;\r\n                }\r\n                _super.prototype.dispose.call(this);\r\n                this.originTransform = null;\r\n                this.originPivot = null;\r\n            };\r\n            TransformTimeline.HIDE_TIMELINE = new TransformTimeline();\r\n            return TransformTimeline;\r\n        })(Timeline);\r\n        objects.TransformTimeline = TransformTimeline;\r\n\r\n        var AnimationData = (function (_super) {\r\n            __extends(AnimationData, _super);\r\n            function AnimationData() {\r\n                _super.call(this);\r\n                this.frameRate = 0;\r\n                this.loop = 0;\r\n                this.tweenEasing = NaN;\r\n                this.fadeInTime = 0;\r\n\r\n                this._timelines = {};\r\n            }\r\n            AnimationData.prototype.getTimelines = function () {\r\n                return this._timelines;\r\n            };\r\n\r\n            AnimationData.prototype.dispose = function () {\r\n                _super.prototype.dispose.call(this);\r\n\r\n                for (var timelineName in this._timelines) {\r\n                    (this._timelines[timelineName]).dispose();\r\n                }\r\n                this._timelines = null;\r\n            };\r\n\r\n            AnimationData.prototype.getTimeline = function (timelineName) {\r\n                return this._timelines[timelineName];\r\n            };\r\n\r\n            AnimationData.prototype.addTimeline = function (timeline, timelineName) {\r\n                if (!timeline) {\r\n                    throw new Error();\r\n                }\r\n\r\n                this._timelines[timelineName] = timeline;\r\n            };\r\n            return AnimationData;\r\n        })(Timeline);\r\n        objects.AnimationData = AnimationData;\r\n\r\n        var DisplayData = (function () {\r\n            function DisplayData() {\r\n                this.transform = new DBTransform();\r\n            }\r\n            DisplayData.prototype.dispose = function () {\r\n                this.transform = null;\r\n                this.pivot = null;\r\n            };\r\n            DisplayData.ARMATURE = \"armature\";\r\n            DisplayData.IMAGE = \"image\";\r\n            return DisplayData;\r\n        })();\r\n        objects.DisplayData = DisplayData;\r\n\r\n        var SlotData = (function () {\r\n            function SlotData() {\r\n                this._displayDataList = [];\r\n                this.zOrder = 0;\r\n            }\r\n            SlotData.prototype.getDisplayDataList = function () {\r\n                return this._displayDataList;\r\n            };\r\n\r\n            SlotData.prototype.dispose = function () {\r\n                var i = this._displayDataList.length;\r\n                while (i--) {\r\n                    this._displayDataList[i].dispose();\r\n                }\r\n                this._displayDataList.length = 0;\r\n                this._displayDataList = null;\r\n            };\r\n\r\n            SlotData.prototype.addDisplayData = function (displayData) {\r\n                if (!displayData) {\r\n                    throw new Error();\r\n                }\r\n                if (this._displayDataList.indexOf(displayData) < 0) {\r\n                    this._displayDataList[this._displayDataList.length] = displayData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            SlotData.prototype.getDisplayData = function (displayName) {\r\n                var i = this._displayDataList.length;\r\n                while (i--) {\r\n                    if (this._displayDataList[i].name == displayName) {\r\n                        return this._displayDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n            return SlotData;\r\n        })();\r\n        objects.SlotData = SlotData;\r\n\r\n        var BoneData = (function () {\r\n            function BoneData() {\r\n                this.length = 0;\r\n                this.global = new DBTransform();\r\n                this.transform = new DBTransform();\r\n            }\r\n            BoneData.prototype.dispose = function () {\r\n                this.global = null;\r\n                this.transform = null;\r\n            };\r\n            return BoneData;\r\n        })();\r\n        objects.BoneData = BoneData;\r\n\r\n        var SkinData = (function () {\r\n            function SkinData() {\r\n                this._slotDataList = [];\r\n            }\r\n            SkinData.prototype.getSlotDataList = function () {\r\n                return this._slotDataList;\r\n            };\r\n\r\n            SkinData.prototype.dispose = function () {\r\n                var i = this._slotDataList.length;\r\n                while (i--) {\r\n                    this._slotDataList[i].dispose();\r\n                }\r\n                this._slotDataList.length = 0;\r\n                this._slotDataList = null;\r\n            };\r\n\r\n            SkinData.prototype.getSlotData = function (slotName) {\r\n                var i = this._slotDataList.length;\r\n                while (i--) {\r\n                    if (this._slotDataList[i].name == slotName) {\r\n                        return this._slotDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            SkinData.prototype.addSlotData = function (slotData) {\r\n                if (!slotData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._slotDataList.indexOf(slotData) < 0) {\r\n                    this._slotDataList[this._slotDataList.length] = slotData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n            return SkinData;\r\n        })();\r\n        objects.SkinData = SkinData;\r\n\r\n        var ArmatureData = (function () {\r\n            function ArmatureData() {\r\n                this._boneDataList = [];\r\n                this._skinDataList = [];\r\n                this._animationDataList = [];\r\n            }\r\n            ArmatureData.prototype.getBoneDataList = function () {\r\n                return this._boneDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.getSkinDataList = function () {\r\n                return this._skinDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.getAnimationDataList = function () {\r\n                return this._animationDataList;\r\n            };\r\n\r\n            ArmatureData.prototype.dispose = function () {\r\n                var i = this._boneDataList.length;\r\n                while (i--) {\r\n                    this._boneDataList[i].dispose();\r\n                }\r\n                i = this._skinDataList.length;\r\n                while (i--) {\r\n                    this._skinDataList[i].dispose();\r\n                }\r\n                i = this._animationDataList.length;\r\n                while (i--) {\r\n                    this._animationDataList[i].dispose();\r\n                }\r\n                this._boneDataList.length = 0;\r\n                this._skinDataList.length = 0;\r\n                this._animationDataList.length = 0;\r\n                this._boneDataList = null;\r\n                this._skinDataList = null;\r\n                this._animationDataList = null;\r\n            };\r\n\r\n            ArmatureData.prototype.getBoneData = function (boneName) {\r\n                var i = this._boneDataList.length;\r\n                while (i--) {\r\n                    if (this._boneDataList[i].name == boneName) {\r\n                        return this._boneDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.getSkinData = function (skinName) {\r\n                if (!skinName) {\r\n                    return this._skinDataList[0];\r\n                }\r\n                var i = this._skinDataList.length;\r\n                while (i--) {\r\n                    if (this._skinDataList[i].name == skinName) {\r\n                        return this._skinDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.getAnimationData = function (animationName) {\r\n                var i = this._animationDataList.length;\r\n                while (i--) {\r\n                    if (this._animationDataList[i].name == animationName) {\r\n                        return this._animationDataList[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            ArmatureData.prototype.addBoneData = function (boneData) {\r\n                if (!boneData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._boneDataList.indexOf(boneData) < 0) {\r\n                    this._boneDataList[this._boneDataList.length] = boneData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.addSkinData = function (skinData) {\r\n                if (!skinData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._skinDataList.indexOf(skinData) < 0) {\r\n                    this._skinDataList[this._skinDataList.length] = skinData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.addAnimationData = function (animationData) {\r\n                if (!animationData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._animationDataList.indexOf(animationData) < 0) {\r\n                    this._animationDataList[this._animationDataList.length] = animationData;\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.sortBoneDataList = function () {\r\n                var i = this._boneDataList.length;\r\n                if (i == 0) {\r\n                    return;\r\n                }\r\n\r\n                var helpArray = [];\r\n                while (i--) {\r\n                    var boneData = this._boneDataList[i];\r\n                    var level = 0;\r\n                    var parentData = boneData;\r\n                    while (parentData && parentData.parent) {\r\n                        level++;\r\n                        parentData = this.getBoneData(parentData.parent);\r\n                    }\r\n                    helpArray[i] = { level: level, boneData: boneData };\r\n                }\r\n\r\n                helpArray.sort(this.sortBoneData);\r\n\r\n                i = helpArray.length;\r\n                while (i--) {\r\n                    this._boneDataList[i] = helpArray[i].boneData;\r\n                }\r\n            };\r\n\r\n            ArmatureData.prototype.sortBoneData = function (object1, object2) {\r\n                return object1.level > object2.level ? 1 : -1;\r\n            };\r\n            return ArmatureData;\r\n        })();\r\n        objects.ArmatureData = ArmatureData;\r\n\r\n        var SkeletonData = (function () {\r\n            function SkeletonData() {\r\n                this._armatureDataList = [];\r\n                this._subTexturePivots = {};\r\n            }\r\n            SkeletonData.prototype.getArmatureNames = function () {\r\n                var nameList = [];\r\n                for (var armatureDataIndex in this._armatureDataList) {\r\n                    nameList[nameList.length] = this._armatureDataList[armatureDataIndex].name;\r\n                }\r\n                return nameList;\r\n            };\r\n\r\n            SkeletonData.prototype.getArmatureDataList = function () {\r\n                return this._armatureDataList;\r\n            };\r\n\r\n            SkeletonData.prototype.dispose = function () {\r\n                for (var armatureDataIndex in this._armatureDataList) {\r\n                    this._armatureDataList[armatureDataIndex].dispose();\r\n                }\r\n                this._armatureDataList.length = 0;\r\n\r\n                this._armatureDataList = null;\r\n                this._subTexturePivots = null;\r\n            };\r\n\r\n            SkeletonData.prototype.getArmatureData = function (armatureName) {\r\n                var i = this._armatureDataList.length;\r\n                while (i--) {\r\n                    if (this._armatureDataList[i].name == armatureName) {\r\n                        return this._armatureDataList[i];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            };\r\n\r\n            SkeletonData.prototype.addArmatureData = function (armatureData) {\r\n                if (!armatureData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                if (this._armatureDataList.indexOf(armatureData) < 0) {\r\n                    this._armatureDataList[this._armatureDataList.length] = armatureData;\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.removeArmatureData = function (armatureData) {\r\n                var index = this._armatureDataList.indexOf(armatureData);\r\n                if (index >= 0) {\r\n                    this._armatureDataList.splice(index, 1);\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.removeArmatureDataByName = function (armatureName) {\r\n                var i = this._armatureDataList.length;\r\n                while (i--) {\r\n                    if (this._armatureDataList[i].name == armatureName) {\r\n                        this._armatureDataList.splice(i, 1);\r\n                    }\r\n                }\r\n            };\r\n\r\n            SkeletonData.prototype.getSubTexturePivot = function (subTextureName) {\r\n                return this._subTexturePivots[subTextureName];\r\n            };\r\n\r\n            SkeletonData.prototype.addSubTexturePivot = function (x, y, subTextureName) {\r\n                var point = this._subTexturePivots[subTextureName];\r\n                if (point) {\r\n                    point.x = x;\r\n                    point.y = y;\r\n                } else {\r\n                    this._subTexturePivots[subTextureName] = point = new geom.Point(x, y);\r\n                }\r\n\r\n                return point;\r\n            };\r\n\r\n            SkeletonData.prototype.removeSubTexturePivot = function (subTextureName) {\r\n                if (subTextureName) {\r\n                    delete this._subTexturePivots[subTextureName];\r\n                } else {\r\n                    for (subTextureName in this._subTexturePivots) {\r\n                        delete this._subTexturePivots[subTextureName];\r\n                    }\r\n                }\r\n            };\r\n            return SkeletonData;\r\n        })();\r\n        objects.SkeletonData = SkeletonData;\r\n\r\n        var DataParser = (function () {\r\n            function DataParser() {\r\n            }\r\n            DataParser.parseTextureAtlasData = function (rawData, scale) {\r\n                if (typeof scale === \"undefined\") { scale = 1; }\r\n                if (!rawData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var textureAtlasData = {};\r\n                textureAtlasData.__name = rawData[utils.ConstValues.A_NAME];\r\n                var subTextureList = rawData[utils.ConstValues.SUB_TEXTURE];\r\n                for (var index in subTextureList) {\r\n                    if (subTextureList.hasOwnProperty(index)) {\r\n                        var subTextureObject = subTextureList[index];\r\n                        var subTextureName = subTextureObject[utils.ConstValues.A_NAME];\r\n                        var subTextureData = new geom.Rectangle(Number(subTextureObject[utils.ConstValues.A_X]) / scale, Number(subTextureObject[utils.ConstValues.A_Y]) / scale, Number(subTextureObject[utils.ConstValues.A_WIDTH]) / scale, Number(subTextureObject[utils.ConstValues.A_HEIGHT]) / scale);\r\n                        textureAtlasData[subTextureName] = subTextureData;\r\n                    }\r\n                }\r\n\r\n                return textureAtlasData;\r\n            };\r\n\r\n            DataParser.parseSkeletonData = function (rawData) {\r\n                if (!rawData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var frameRate = Number(rawData[utils.ConstValues.A_FRAME_RATE]);\r\n                var data = new SkeletonData();\r\n                data.name = rawData[utils.ConstValues.A_NAME];\r\n\r\n                var armatureObjectList = rawData[utils.ConstValues.ARMATURE];\r\n                for (var index in armatureObjectList) {\r\n                    if (armatureObjectList.hasOwnProperty(index)) {\r\n                        var armatureObject = armatureObjectList[index];\r\n                        data.addArmatureData(DataParser.parseArmatureData(armatureObject, data, frameRate));\r\n                    }\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n            DataParser.parseArmatureData = function (armatureObject, data, frameRate) {\r\n                var armatureData = new ArmatureData();\r\n                armatureData.name = armatureObject[utils.ConstValues.A_NAME];\r\n\r\n                var boneObjectList = armatureObject[utils.ConstValues.BONE];\r\n                for (var index in boneObjectList) {\r\n                    if (boneObjectList.hasOwnProperty(index)) {\r\n                        var boneObject = boneObjectList[index];\r\n                        armatureData.addBoneData(DataParser.parseBoneData(boneObject));\r\n                    }\r\n                }\r\n\r\n                var skinObjectList = armatureObject[utils.ConstValues.SKIN];\r\n                for (var index in skinObjectList) {\r\n                    if (skinObjectList.hasOwnProperty(index)) {\r\n                        var skinObject = skinObjectList[index];\r\n                        armatureData.addSkinData(DataParser.parseSkinData(skinObject, data));\r\n                    }\r\n                }\r\n\r\n                utils.DBDataUtil.transformArmatureData(armatureData);\r\n                armatureData.sortBoneDataList();\r\n\r\n                var animationObjectList = armatureObject[utils.ConstValues.ANIMATION];\r\n\r\n                for (var index in animationObjectList) {\r\n                    if (animationObjectList.hasOwnProperty(index)) {\r\n                        var animationObject = animationObjectList[index];\r\n                        armatureData.addAnimationData(DataParser.parseAnimationData(animationObject, armatureData, frameRate));\r\n                    }\r\n                }\r\n\r\n                return armatureData;\r\n            };\r\n\r\n            DataParser.parseBoneData = function (boneObject) {\r\n                var boneData = new BoneData();\r\n                boneData.name = boneObject[utils.ConstValues.A_NAME];\r\n                boneData.parent = boneObject[utils.ConstValues.A_PARENT];\r\n                boneData.length = Number(boneObject[utils.ConstValues.A_LENGTH]) || 0;\r\n\r\n                DataParser.parseTransform(boneObject[utils.ConstValues.TRANSFORM], boneData.global);\r\n                boneData.transform.copy(boneData.global);\r\n\r\n                return boneData;\r\n            };\r\n\r\n            DataParser.parseSkinData = function (skinObject, data) {\r\n                var skinData = new SkinData();\r\n                skinData.name = skinObject[utils.ConstValues.A_NAME];\r\n                var slotObjectList = skinObject[utils.ConstValues.SLOT];\r\n                for (var index in slotObjectList) {\r\n                    if (slotObjectList.hasOwnProperty(index)) {\r\n                        var slotObject = slotObjectList[index];\r\n                        skinData.addSlotData(DataParser.parseSlotData(slotObject, data));\r\n                    }\r\n                }\r\n\r\n                return skinData;\r\n            };\r\n\r\n            DataParser.parseSlotData = function (slotObject, data) {\r\n                var slotData = new SlotData();\r\n                slotData.name = slotObject[utils.ConstValues.A_NAME];\r\n                slotData.parent = slotObject[utils.ConstValues.A_PARENT];\r\n                slotData.zOrder = Number(slotObject[utils.ConstValues.A_Z_ORDER]);\r\n\r\n                var displayObjectList = slotObject[utils.ConstValues.DISPLAY];\r\n                for (var index in displayObjectList) {\r\n                    if (displayObjectList.hasOwnProperty(index)) {\r\n                        var displayObject = displayObjectList[index];\r\n                        slotData.addDisplayData(DataParser.parseDisplayData(displayObject, data));\r\n                    }\r\n                }\r\n\r\n                return slotData;\r\n            };\r\n\r\n            DataParser.parseDisplayData = function (displayObject, data) {\r\n                var displayData = new DisplayData();\r\n                displayData.name = displayObject[utils.ConstValues.A_NAME];\r\n                displayData.type = displayObject[utils.ConstValues.A_TYPE];\r\n\r\n                displayData.pivot = data.addSubTexturePivot(0, 0, displayData.name);\r\n\r\n                DataParser.parseTransform(displayObject[utils.ConstValues.TRANSFORM], displayData.transform, displayData.pivot);\r\n\r\n                return displayData;\r\n            };\r\n\r\n            DataParser.parseAnimationData = function (animationObject, armatureData, frameRate) {\r\n                var animationData = new AnimationData();\r\n                animationData.name = animationObject[utils.ConstValues.A_NAME];\r\n                animationData.frameRate = frameRate;\r\n                animationData.loop = Number(animationObject[utils.ConstValues.A_LOOP]) || 0;\r\n                animationData.fadeInTime = Number(animationObject[utils.ConstValues.A_FADE_IN_TIME]);\r\n                animationData.duration = Number(animationObject[utils.ConstValues.A_DURATION]) / frameRate;\r\n                animationData.scale = Number(animationObject[utils.ConstValues.A_SCALE]);\r\n\r\n                if (animationObject.hasOwnProperty(utils.ConstValues.A_TWEEN_EASING)) {\r\n                    var tweenEase = animationObject[utils.ConstValues.A_TWEEN_EASING];\r\n                    if (tweenEase == undefined || tweenEase == null) {\r\n                        animationData.tweenEasing = NaN;\r\n                    } else {\r\n                        animationData.tweenEasing = Number(tweenEase);\r\n                    }\r\n                } else {\r\n                    animationData.tweenEasing = NaN;\r\n                }\r\n\r\n                DataParser.parseTimeline(animationObject, animationData, DataParser.parseMainFrame, frameRate);\r\n\r\n                var timeline;\r\n                var timelineName;\r\n                var timelineObjectList = animationObject[utils.ConstValues.TIMELINE];\r\n                for (var index in timelineObjectList) {\r\n                    if (timelineObjectList.hasOwnProperty(index)) {\r\n                        var timelineObject = timelineObjectList[index];\r\n                        timeline = DataParser.parseTransformTimeline(timelineObject, animationData.duration, frameRate);\r\n                        timelineName = timelineObject[utils.ConstValues.A_NAME];\r\n                        animationData.addTimeline(timeline, timelineName);\r\n                    }\r\n                }\r\n\r\n                utils.DBDataUtil.addHideTimeline(animationData, armatureData);\r\n                utils.DBDataUtil.transformAnimationData(animationData, armatureData);\r\n\r\n                return animationData;\r\n            };\r\n\r\n            DataParser.parseTimeline = function (timelineObject, timeline, frameParser, frameRate) {\r\n                var position = 0;\r\n                var frame;\r\n                var frameObjectList = timelineObject[utils.ConstValues.FRAME];\r\n                for (var index in frameObjectList) {\r\n                    if (frameObjectList.hasOwnProperty(index)) {\r\n                        var frameObject = frameObjectList[index];\r\n                        frame = frameParser(frameObject, frameRate);\r\n                        frame.position = position;\r\n                        timeline.addFrame(frame);\r\n                        position += frame.duration;\r\n                    }\r\n                }\r\n                if (frame) {\r\n                    frame.duration = timeline.duration - frame.position;\r\n                }\r\n            };\r\n\r\n            DataParser.parseTransformTimeline = function (timelineObject, duration, frameRate) {\r\n                var timeline = new TransformTimeline();\r\n                timeline.duration = duration;\r\n\r\n                DataParser.parseTimeline(timelineObject, timeline, DataParser.parseTransformFrame, frameRate);\r\n\r\n                timeline.scale = Number(timelineObject[utils.ConstValues.A_SCALE]);\r\n                timeline.offset = Number(timelineObject[utils.ConstValues.A_OFFSET]);\r\n\r\n                return timeline;\r\n            };\r\n\r\n            DataParser.parseFrame = function (frameObject, frame, frameRate) {\r\n                frame.duration = Number(frameObject[utils.ConstValues.A_DURATION]) / frameRate;\r\n                frame.action = frameObject[utils.ConstValues.A_ACTION];\r\n                frame.event = frameObject[utils.ConstValues.A_EVENT];\r\n                frame.sound = frameObject[utils.ConstValues.A_SOUND];\r\n            };\r\n\r\n            DataParser.parseMainFrame = function (frameObject, frameRate) {\r\n                var frame = new Frame();\r\n                DataParser.parseFrame(frameObject, frame, frameRate);\r\n                return frame;\r\n            };\r\n\r\n            DataParser.parseTransformFrame = function (frameObject, frameRate) {\r\n                var frame = new TransformFrame();\r\n                DataParser.parseFrame(frameObject, frame, frameRate);\r\n\r\n                frame.visible = Number(frameObject[utils.ConstValues.A_HIDE]) != 1;\r\n\r\n                if (frameObject.hasOwnProperty(utils.ConstValues.A_TWEEN_EASING)) {\r\n                    var tweenEase = frameObject[utils.ConstValues.A_TWEEN_EASING];\r\n                    if (tweenEase == undefined || tweenEase == null) {\r\n                        frame.tweenEasing = NaN;\r\n                    } else {\r\n                        frame.tweenEasing = Number(tweenEase);\r\n                    }\r\n                } else {\r\n                    frame.tweenEasing = 0;\r\n                }\r\n\r\n                frame.tweenRotate = Number(frameObject[utils.ConstValues.A_TWEEN_ROTATE]) || 0;\r\n                frame.displayIndex = Number(frameObject[utils.ConstValues.A_DISPLAY_INDEX]) || 0;\r\n\r\n                frame.zOrder = Number(frameObject[utils.ConstValues.A_Z_ORDER]) || 0;\r\n\r\n                DataParser.parseTransform(frameObject[utils.ConstValues.TRANSFORM], frame.global, frame.pivot);\r\n                frame.transform.copy(frame.global);\r\n\r\n                var colorTransformObject = frameObject[utils.ConstValues.COLOR_TRANSFORM];\r\n                if (colorTransformObject) {\r\n                    frame.color = new geom.ColorTransform();\r\n                    frame.color.alphaOffset = Number(colorTransformObject[utils.ConstValues.A_ALPHA_OFFSET]);\r\n                    frame.color.redOffset = Number(colorTransformObject[utils.ConstValues.A_RED_OFFSET]);\r\n                    frame.color.greenOffset = Number(colorTransformObject[utils.ConstValues.A_GREEN_OFFSET]);\r\n                    frame.color.blueOffset = Number(colorTransformObject[utils.ConstValues.A_BLUE_OFFSET]);\r\n\r\n                    frame.color.alphaMultiplier = Number(colorTransformObject[utils.ConstValues.A_ALPHA_MULTIPLIER]) * 0.01;\r\n                    frame.color.redMultiplier = Number(colorTransformObject[utils.ConstValues.A_RED_MULTIPLIER]) * 0.01;\r\n                    frame.color.greenMultiplier = Number(colorTransformObject[utils.ConstValues.A_GREEN_MULTIPLIER]) * 0.01;\r\n                    frame.color.blueMultiplier = Number(colorTransformObject[utils.ConstValues.A_BLUE_MULTIPLIER]) * 0.01;\r\n                }\r\n\r\n                return frame;\r\n            };\r\n\r\n            DataParser.parseTransform = function (transformObject, transform, pivot) {\r\n                if (typeof pivot === \"undefined\") { pivot = null; }\r\n                if (transformObject) {\r\n                    if (transform) {\r\n                        transform.x = Number(transformObject[utils.ConstValues.A_X]);\r\n                        transform.y = Number(transformObject[utils.ConstValues.A_Y]);\r\n                        transform.skewX = Number(transformObject[utils.ConstValues.A_SKEW_X]) * utils.ConstValues.ANGLE_TO_RADIAN;\r\n                        transform.skewY = Number(transformObject[utils.ConstValues.A_SKEW_Y]) * utils.ConstValues.ANGLE_TO_RADIAN;\r\n                        transform.scaleX = Number(transformObject[utils.ConstValues.A_SCALE_X]);\r\n                        transform.scaleY = Number(transformObject[utils.ConstValues.A_SCALE_Y]);\r\n                    }\r\n                    if (pivot) {\r\n                        pivot.x = Number(transformObject[utils.ConstValues.A_PIVOT_X]);\r\n                        pivot.y = Number(transformObject[utils.ConstValues.A_PIVOT_Y]);\r\n                    }\r\n                }\r\n            };\r\n            return DataParser;\r\n        })();\r\n        objects.DataParser = DataParser;\r\n    })(dragonBones.objects || (dragonBones.objects = {}));\r\n    var objects = dragonBones.objects;\r\n\r\n    (function (factorys) {\r\n        var BaseFactory = (function (_super) {\r\n            __extends(BaseFactory, _super);\r\n            function BaseFactory() {\r\n                _super.call(this);\r\n\r\n                this._dataDic = {};\r\n                this._textureAtlasDic = {};\r\n                this._textureAtlasLoadingDic = {};\r\n            }\r\n            BaseFactory.prototype.getSkeletonData = function (name) {\r\n                return this._dataDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.addSkeletonData = function (data, name) {\r\n                if (!data) {\r\n                    throw new Error();\r\n                }\r\n                name = name || data.name;\r\n                if (!name) {\r\n                    throw new Error(\"Unnamed data!\");\r\n                }\r\n                if (this._dataDic[name]) {\r\n                }\r\n                this._dataDic[name] = data;\r\n            };\r\n\r\n            BaseFactory.prototype.removeSkeletonData = function (name) {\r\n                delete this._dataDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.getTextureAtlas = function (name) {\r\n                return this._textureAtlasDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.addTextureAtlas = function (textureAtlas, name) {\r\n                if (!textureAtlas) {\r\n                    throw new Error();\r\n                }\r\n\r\n                name = name || textureAtlas.name;\r\n                if (!name) {\r\n                    throw new Error(\"Unnamed data!\");\r\n                }\r\n                if (this._textureAtlasDic[name]) {\r\n                }\r\n                this._textureAtlasDic[name] = textureAtlas;\r\n            };\r\n\r\n            BaseFactory.prototype.removeTextureAtlas = function (name) {\r\n                delete this._textureAtlasDic[name];\r\n            };\r\n\r\n            BaseFactory.prototype.dispose = function (disposeData) {\r\n                if (typeof disposeData === \"undefined\") { disposeData = true; }\r\n                if (disposeData) {\r\n                    for (var i in this._dataDic) {\r\n                        this._dataDic[i].dispose();\r\n                    }\r\n                    for (var i in this._textureAtlasDic) {\r\n                        this._textureAtlasDic[i].dispose();\r\n                    }\r\n                }\r\n                this._dataDic = null;\r\n                this._textureAtlasDic = null;\r\n                this._textureAtlasLoadingDic = null;\r\n                this._currentDataName = null;\r\n                this._currentTextureAtlasName = null;\r\n            };\r\n\r\n            BaseFactory.prototype.buildArmature = function (armatureName, animationName, skeletonName, textureAtlasName, skinName) {\r\n                if (skeletonName) {\r\n                    var data = this._dataDic[skeletonName];\r\n                    if (data) {\r\n                        var armatureData = data.getArmatureData(armatureName);\r\n                    }\r\n                } else {\r\n                    for (skeletonName in this._dataDic) {\r\n                        data = this._dataDic[skeletonName];\r\n                        armatureData = data.getArmatureData(armatureName);\r\n                        if (armatureData) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!armatureData) {\r\n                    return null;\r\n                }\r\n\r\n                this._currentDataName = skeletonName;\r\n                this._currentTextureAtlasName = textureAtlasName || skeletonName;\r\n\r\n                var armature = this._generateArmature();\r\n                armature.name = armatureName;\r\n                var bone;\r\n                var boneData;\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                for (var index in boneDataList) {\r\n                    if (boneDataList.hasOwnProperty(index)) {\r\n                        boneData = boneDataList[index];\r\n                        bone = new dragonBones.Bone();\r\n                        bone.name = boneData.name;\r\n                        bone.origin.copy(boneData.transform);\r\n                        if (armatureData.getBoneData(boneData.parent)) {\r\n                            armature.addChild(bone, boneData.parent);\r\n                        } else {\r\n                            armature.addChild(bone, null);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (animationName && animationName != armatureName) {\r\n                    var animationArmatureData = data.getArmatureData(animationName);\r\n                    if (!animationArmatureData) {\r\n                        for (skeletonName in this._dataDic) {\r\n                            data = this._dataDic[skeletonName];\r\n                            animationArmatureData = data.getArmatureData(animationName);\r\n                            if (animationArmatureData) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (animationArmatureData) {\r\n                    armature.animation.setAnimationDataList(animationArmatureData.getAnimationDataList());\r\n                } else {\r\n                    armature.animation.setAnimationDataList(armatureData.getAnimationDataList());\r\n                }\r\n\r\n                var skinData = armatureData.getSkinData(skinName);\r\n                if (!skinData) {\r\n                    throw new Error();\r\n                }\r\n\r\n                var slot;\r\n                var displayData;\r\n                var childArmature;\r\n                var i;\r\n                var helpArray = [];\r\n                var slotData;\r\n                var slotDataList = skinData.getSlotDataList();\r\n                var displayDataList;\r\n                for (var index in slotDataList) {\r\n                    if (slotDataList.hasOwnProperty(index)) {\r\n                        slotData = slotDataList[index];\r\n                        bone = armature.getBone(slotData.parent);\r\n                        if (!bone) {\r\n                            continue;\r\n                        }\r\n                        displayDataList = slotData.getDisplayDataList();\r\n                        slot = this._generateSlot();\r\n                        slot.name = slotData.name;\r\n                        slot._originZOrder = slotData.zOrder;\r\n                        slot._dislayDataList = displayDataList;\r\n\r\n                        helpArray.length = 0;\r\n                        i = displayDataList.length;\r\n                        while (i--) {\r\n                            displayData = displayDataList[i];\r\n                            switch (displayData.type) {\r\n                                case objects.DisplayData.ARMATURE:\r\n                                    childArmature = this.buildArmature(displayData.name, null, this._currentDataName, this._currentTextureAtlasName, null);\r\n                                    if (childArmature) {\r\n                                        helpArray[i] = childArmature;\r\n                                    }\r\n                                    break;\r\n                                case objects.DisplayData.IMAGE:\r\n                                default:\r\n                                    helpArray[i] = this._generateDisplay(displayData.name, displayData.pivot.x, displayData.pivot.y);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        slot.setDisplayList(helpArray);\r\n                        slot._changeDisplay(0);\r\n                        bone.addChild(slot);\r\n                    }\r\n                }\r\n\r\n                armature._slotsZOrderChanged = true;\r\n                armature.advanceTime(0);\r\n                return armature;\r\n            };\r\n\r\n            BaseFactory.prototype.getTextureDisplay = function (textureName, textureAtlasName, pivotX, pivotY) {\r\n                if (textureAtlasName) {\r\n                    var textureAtlas = this._textureAtlasDic[textureAtlasName];\r\n                }\r\n                if (!textureAtlas && !textureAtlasName) {\r\n                    for (textureAtlasName in this._textureAtlasDic) {\r\n                        textureAtlas = this._textureAtlasDic[textureAtlasName];\r\n                        if (textureAtlas.getRegion(textureName)) {\r\n                            break;\r\n                        }\r\n                        textureAtlas = null;\r\n                    }\r\n                }\r\n                if (textureAtlas) {\r\n                    if (isNaN(pivotX) || isNaN(pivotY)) {\r\n                        var data = this._dataDic[textureAtlasName];\r\n                        if (data) {\r\n                            var pivot = data.getSubTexturePivot(textureName);\r\n                            if (pivot) {\r\n                                pivotX = pivot.x;\r\n                                pivotY = pivot.y;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return this._generateDisplay(textureName, pivotX, pivotY);\r\n                }\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateArmature = function () {\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateSlot = function () {\r\n                return null;\r\n            };\r\n\r\n            BaseFactory.prototype._generateDisplay = function (fullName, pivotX, pivotY) {\r\n                return null;\r\n            };\r\n            return BaseFactory;\r\n        })(events.EventDispatcher);\r\n        factorys.BaseFactory = BaseFactory;\r\n    })(dragonBones.factorys || (dragonBones.factorys = {}));\r\n    var factorys = dragonBones.factorys;\r\n\r\n    (function (utils) {\r\n        var ConstValues = (function () {\r\n            function ConstValues() {\r\n            }\r\n            ConstValues.ANGLE_TO_RADIAN = Math.PI / 180;\r\n\r\n            ConstValues.DRAGON_BONES = \"dragonBones\";\r\n            ConstValues.ARMATURE = \"armature\";\r\n            ConstValues.SKIN = \"skin\";\r\n            ConstValues.BONE = \"bone\";\r\n            ConstValues.SLOT = \"slot\";\r\n            ConstValues.DISPLAY = \"display\";\r\n            ConstValues.ANIMATION = \"animation\";\r\n            ConstValues.TIMELINE = \"timeline\";\r\n            ConstValues.FRAME = \"frame\";\r\n            ConstValues.TRANSFORM = \"transform\";\r\n            ConstValues.COLOR_TRANSFORM = \"colorTransform\";\r\n\r\n            ConstValues.TEXTURE_ATLAS = \"TextureAtlas\";\r\n            ConstValues.SUB_TEXTURE = \"SubTexture\";\r\n\r\n            ConstValues.A_VERSION = \"version\";\r\n            ConstValues.A_IMAGE_PATH = \"imagePath\";\r\n            ConstValues.A_FRAME_RATE = \"frameRate\";\r\n            ConstValues.A_NAME = \"name\";\r\n            ConstValues.A_PARENT = \"parent\";\r\n            ConstValues.A_LENGTH = \"length\";\r\n            ConstValues.A_TYPE = \"type\";\r\n            ConstValues.A_FADE_IN_TIME = \"fadeInTime\";\r\n            ConstValues.A_DURATION = \"duration\";\r\n            ConstValues.A_SCALE = \"scale\";\r\n            ConstValues.A_OFFSET = \"offset\";\r\n            ConstValues.A_LOOP = \"loop\";\r\n            ConstValues.A_EVENT = \"event\";\r\n            ConstValues.A_SOUND = \"sound\";\r\n            ConstValues.A_ACTION = \"action\";\r\n            ConstValues.A_HIDE = \"hide\";\r\n            ConstValues.A_TWEEN_EASING = \"tweenEasing\";\r\n            ConstValues.A_TWEEN_ROTATE = \"tweenRotate\";\r\n            ConstValues.A_DISPLAY_INDEX = \"displayIndex\";\r\n            ConstValues.A_Z_ORDER = \"z\";\r\n            ConstValues.A_WIDTH = \"width\";\r\n            ConstValues.A_HEIGHT = \"height\";\r\n            ConstValues.A_X = \"x\";\r\n            ConstValues.A_Y = \"y\";\r\n            ConstValues.A_SKEW_X = \"skX\";\r\n            ConstValues.A_SKEW_Y = \"skY\";\r\n            ConstValues.A_SCALE_X = \"scX\";\r\n            ConstValues.A_SCALE_Y = \"scY\";\r\n            ConstValues.A_PIVOT_X = \"pX\";\r\n            ConstValues.A_PIVOT_Y = \"pY\";\r\n            ConstValues.A_ALPHA_OFFSET = \"aO\";\r\n            ConstValues.A_RED_OFFSET = \"rO\";\r\n            ConstValues.A_GREEN_OFFSET = \"gO\";\r\n            ConstValues.A_BLUE_OFFSET = \"bO\";\r\n            ConstValues.A_ALPHA_MULTIPLIER = \"aM\";\r\n            ConstValues.A_RED_MULTIPLIER = \"rM\";\r\n            ConstValues.A_GREEN_MULTIPLIER = \"gM\";\r\n            ConstValues.A_BLUE_MULTIPLIER = \"bM\";\r\n            return ConstValues;\r\n        })();\r\n        utils.ConstValues = ConstValues;\r\n\r\n        var TransformUtil = (function () {\r\n            function TransformUtil() {\r\n            }\r\n            TransformUtil.transformPointWithParent = function (transform, parent) {\r\n                var helpMatrix = TransformUtil._helpMatrix;\r\n                TransformUtil.transformToMatrix(parent, helpMatrix);\r\n                helpMatrix.invert();\r\n\r\n                var x = transform.x;\r\n                var y = transform.y;\r\n\r\n                transform.x = helpMatrix.a * x + helpMatrix.c * y + helpMatrix.tx;\r\n                transform.y = helpMatrix.d * y + helpMatrix.b * x + helpMatrix.ty;\r\n\r\n                transform.skewX = TransformUtil.formatRadian(transform.skewX - parent.skewX);\r\n                transform.skewY = TransformUtil.formatRadian(transform.skewY - parent.skewY);\r\n            };\r\n\r\n            TransformUtil.transformToMatrix = function (transform, matrix) {\r\n                matrix.a = transform.scaleX * Math.cos(transform.skewY);\r\n                matrix.b = transform.scaleX * Math.sin(transform.skewY);\r\n                matrix.c = -transform.scaleY * Math.sin(transform.skewX);\r\n                matrix.d = transform.scaleY * Math.cos(transform.skewX);\r\n                matrix.tx = transform.x;\r\n                matrix.ty = transform.y;\r\n            };\r\n\r\n            TransformUtil.formatRadian = function (radian) {\r\n                radian %= TransformUtil.DOUBLE_PI;\r\n                if (radian > Math.PI) {\r\n                    radian -= TransformUtil.DOUBLE_PI;\r\n                }\r\n                if (radian < -Math.PI) {\r\n                    radian += TransformUtil.DOUBLE_PI;\r\n                }\r\n                return radian;\r\n            };\r\n            TransformUtil.DOUBLE_PI = Math.PI * 2;\r\n            TransformUtil._helpMatrix = new geom.Matrix();\r\n            return TransformUtil;\r\n        })();\r\n        utils.TransformUtil = TransformUtil;\r\n\r\n        var DBDataUtil = (function () {\r\n            function DBDataUtil() {\r\n            }\r\n            DBDataUtil.transformArmatureData = function (armatureData) {\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var i = boneDataList.length;\r\n                var boneData;\r\n                var parentBoneData;\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    if (boneData.parent) {\r\n                        parentBoneData = armatureData.getBoneData(boneData.parent);\r\n                        if (parentBoneData) {\r\n                            boneData.transform.copy(boneData.global);\r\n                            TransformUtil.transformPointWithParent(boneData.transform, parentBoneData.global);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            DBDataUtil.transformArmatureDataAnimations = function (armatureData) {\r\n                var animationDataList = armatureData.getAnimationDataList();\r\n                var i = animationDataList.length;\r\n                while (i--) {\r\n                    DBDataUtil.transformAnimationData(animationDataList[i], armatureData);\r\n                }\r\n            };\r\n\r\n            DBDataUtil.transformAnimationData = function (animationData, armatureData) {\r\n                var skinData = armatureData.getSkinData(null);\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var slotDataList = skinData.getSlotDataList();\r\n                var i = boneDataList.length;\r\n\r\n                var boneData;\r\n                var timeline;\r\n                var slotData;\r\n                var displayData;\r\n                var parentTimeline;\r\n                var frameList;\r\n                var originTransform;\r\n                var originPivot;\r\n                var prevFrame;\r\n                var frame;\r\n                var frameListLength;\r\n\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    timeline = animationData.getTimeline(boneData.name);\r\n                    if (!timeline) {\r\n                        continue;\r\n                    }\r\n\r\n                    slotData = null;\r\n\r\n                    for (var slotIndex in slotDataList) {\r\n                        slotData = slotDataList[slotIndex];\r\n                        if (slotData.parent == boneData.name) {\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    parentTimeline = boneData.parent ? animationData.getTimeline(boneData.parent) : null;\r\n\r\n                    frameList = timeline.getFrameList();\r\n\r\n                    originTransform = null;\r\n                    originPivot = null;\r\n                    prevFrame = null;\r\n                    frameListLength = frameList.length;\r\n                    for (var j = 0; j < frameListLength; j++) {\r\n                        frame = frameList[j];\r\n                        if (parentTimeline) {\r\n                            DBDataUtil._helpTransform1.copy(frame.global);\r\n\r\n                            DBDataUtil.getTimelineTransform(parentTimeline, frame.position, DBDataUtil._helpTransform2);\r\n                            TransformUtil.transformPointWithParent(DBDataUtil._helpTransform1, DBDataUtil._helpTransform2);\r\n\r\n                            frame.transform.copy(DBDataUtil._helpTransform1);\r\n                        } else {\r\n                            frame.transform.copy(frame.global);\r\n                        }\r\n\r\n                        frame.transform.x -= boneData.transform.x;\r\n                        frame.transform.y -= boneData.transform.y;\r\n                        frame.transform.skewX -= boneData.transform.skewX;\r\n                        frame.transform.skewY -= boneData.transform.skewY;\r\n                        frame.transform.scaleX -= boneData.transform.scaleX;\r\n                        frame.transform.scaleY -= boneData.transform.scaleY;\r\n\r\n                        if (!timeline.transformed) {\r\n                            if (slotData) {\r\n                                frame.zOrder -= slotData.zOrder;\r\n                            }\r\n                        }\r\n\r\n                        if (!originTransform) {\r\n                            originTransform = timeline.originTransform;\r\n                            originTransform.copy(frame.transform);\r\n                            originTransform.skewX = TransformUtil.formatRadian(originTransform.skewX);\r\n                            originTransform.skewY = TransformUtil.formatRadian(originTransform.skewY);\r\n                            originPivot = timeline.originPivot;\r\n                            originPivot.x = frame.pivot.x;\r\n                            originPivot.y = frame.pivot.y;\r\n                        }\r\n\r\n                        frame.transform.x -= originTransform.x;\r\n                        frame.transform.y -= originTransform.y;\r\n                        frame.transform.skewX = TransformUtil.formatRadian(frame.transform.skewX - originTransform.skewX);\r\n                        frame.transform.skewY = TransformUtil.formatRadian(frame.transform.skewY - originTransform.skewY);\r\n                        frame.transform.scaleX -= originTransform.scaleX;\r\n                        frame.transform.scaleY -= originTransform.scaleY;\r\n\r\n                        if (!timeline.transformed) {\r\n                            frame.pivot.x -= originPivot.x;\r\n                            frame.pivot.y -= originPivot.y;\r\n                        }\r\n\r\n                        if (prevFrame) {\r\n                            var dLX = frame.transform.skewX - prevFrame.transform.skewX;\r\n\r\n                            if (prevFrame.tweenRotate) {\r\n                                if (prevFrame.tweenRotate > 0) {\r\n                                    if (dLX < 0) {\r\n                                        frame.transform.skewX += Math.PI * 2;\r\n                                        frame.transform.skewY += Math.PI * 2;\r\n                                    }\r\n\r\n                                    if (prevFrame.tweenRotate > 1) {\r\n                                        frame.transform.skewX += Math.PI * 2 * (prevFrame.tweenRotate - 1);\r\n                                        frame.transform.skewY += Math.PI * 2 * (prevFrame.tweenRotate - 1);\r\n                                    }\r\n                                } else {\r\n                                    if (dLX > 0) {\r\n                                        frame.transform.skewX -= Math.PI * 2;\r\n                                        frame.transform.skewY -= Math.PI * 2;\r\n                                    }\r\n\r\n                                    if (prevFrame.tweenRotate < 1) {\r\n                                        frame.transform.skewX += Math.PI * 2 * (prevFrame.tweenRotate + 1);\r\n                                        frame.transform.skewY += Math.PI * 2 * (prevFrame.tweenRotate + 1);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                frame.transform.skewX = prevFrame.transform.skewX + TransformUtil.formatRadian(frame.transform.skewX - prevFrame.transform.skewX);\r\n                                frame.transform.skewY = prevFrame.transform.skewY + TransformUtil.formatRadian(frame.transform.skewY - prevFrame.transform.skewY);\r\n                            }\r\n                        }\r\n\r\n                        prevFrame = frame;\r\n                    }\r\n                    timeline.transformed = true;\r\n                }\r\n            };\r\n\r\n            DBDataUtil.getTimelineTransform = function (timeline, position, retult) {\r\n                var frameList = timeline.getFrameList();\r\n                var i = frameList.length;\r\n\r\n                var currentFrame;\r\n                var tweenEasing;\r\n                var progress;\r\n                var nextFrame;\r\n                while (i--) {\r\n                    currentFrame = frameList[i];\r\n                    if (currentFrame.position <= position && currentFrame.position + currentFrame.duration > position) {\r\n                        tweenEasing = currentFrame.tweenEasing;\r\n                        if (i == frameList.length - 1 || isNaN(tweenEasing) || position == currentFrame.position) {\r\n                            retult.copy(currentFrame.global);\r\n                        } else {\r\n                            progress = (position - currentFrame.position) / currentFrame.duration;\r\n                            if (tweenEasing) {\r\n                                progress = animation.TimelineState.getEaseValue(progress, tweenEasing);\r\n                            }\r\n\r\n                            nextFrame = frameList[i + 1];\r\n\r\n                            retult.x = currentFrame.global.x + (nextFrame.global.x - currentFrame.global.x) * progress;\r\n                            retult.y = currentFrame.global.y + (nextFrame.global.y - currentFrame.global.y) * progress;\r\n                            retult.skewX = TransformUtil.formatRadian(currentFrame.global.skewX + (nextFrame.global.skewX - currentFrame.global.skewX) * progress);\r\n                            retult.skewY = TransformUtil.formatRadian(currentFrame.global.skewY + (nextFrame.global.skewY - currentFrame.global.skewY) * progress);\r\n                            retult.scaleX = currentFrame.global.scaleX + (nextFrame.global.scaleX - currentFrame.global.scaleX) * progress;\r\n                            retult.scaleY = currentFrame.global.scaleY + (nextFrame.global.scaleY - currentFrame.global.scaleY) * progress;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            DBDataUtil.addHideTimeline = function (animationData, armatureData) {\r\n                var boneDataList = armatureData.getBoneDataList();\r\n                var i = boneDataList.length;\r\n\r\n                var boneData;\r\n                var boneName;\r\n                while (i--) {\r\n                    boneData = boneDataList[i];\r\n                    boneName = boneData.name;\r\n                    if (!animationData.getTimeline(boneName)) {\r\n                        animationData.addTimeline(objects.TransformTimeline.HIDE_TIMELINE, boneName);\r\n                    }\r\n                }\r\n            };\r\n            DBDataUtil._helpTransform1 = new objects.DBTransform();\r\n            DBDataUtil._helpTransform2 = new objects.DBTransform();\r\n            return DBDataUtil;\r\n        })();\r\n        utils.DBDataUtil = DBDataUtil;\r\n    })(dragonBones.utils || (dragonBones.utils = {}));\r\n    var utils = dragonBones.utils;\r\n\r\n    var DBObject = (function () {\r\n        function DBObject() {\r\n            this.global = new objects.DBTransform();\r\n            this.origin = new objects.DBTransform();\r\n            this.offset = new objects.DBTransform();\r\n            this.tween = new objects.DBTransform();\r\n            this.tween.scaleX = this.tween.scaleY = 0;\r\n\r\n            this._globalTransformMatrix = new geom.Matrix();\r\n\r\n            this._visible = true;\r\n            this._isColorChanged = false;\r\n            this._isDisplayOnStage = false;\r\n            this._scaleType = 0;\r\n\r\n            this.fixedRotation = false;\r\n        }\r\n        DBObject.prototype.getVisible = function () {\r\n            return this._visible;\r\n        };\r\n        DBObject.prototype.setVisible = function (value) {\r\n            this._visible = value;\r\n        };\r\n\r\n        DBObject.prototype._setParent = function (value) {\r\n            this.parent = value;\r\n        };\r\n\r\n        DBObject.prototype._setArmature = function (value) {\r\n            if (this.armature) {\r\n                this.armature._removeDBObject(this);\r\n            }\r\n            this.armature = value;\r\n            if (this.armature) {\r\n                this.armature._addDBObject(this);\r\n            }\r\n        };\r\n\r\n        DBObject.prototype.dispose = function () {\r\n            this.parent = null;\r\n            this.armature = null;\r\n            this.global = null;\r\n            this.origin = null;\r\n            this.offset = null;\r\n            this.tween = null;\r\n            this._globalTransformMatrix = null;\r\n        };\r\n\r\n        DBObject.prototype._update = function () {\r\n            this.global.scaleX = (this.origin.scaleX + this.tween.scaleX) * this.offset.scaleX;\r\n            this.global.scaleY = (this.origin.scaleY + this.tween.scaleY) * this.offset.scaleY;\r\n\r\n            if (this.parent) {\r\n                var x = this.origin.x + this.offset.x + this.tween.x;\r\n                var y = this.origin.y + this.offset.y + this.tween.y;\r\n                var parentMatrix = this.parent._globalTransformMatrix;\r\n\r\n                this._globalTransformMatrix.tx = this.global.x = parentMatrix.a * x + parentMatrix.c * y + parentMatrix.tx;\r\n                this._globalTransformMatrix.ty = this.global.y = parentMatrix.d * y + parentMatrix.b * x + parentMatrix.ty;\r\n\r\n                if (this.fixedRotation) {\r\n                    this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX;\r\n                    this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY;\r\n                } else {\r\n                    this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX + this.parent.global.skewX;\r\n                    this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY + this.parent.global.skewY;\r\n                }\r\n\r\n                if (this.parent.scaleMode >= this._scaleType) {\r\n                    this.global.scaleX *= this.parent.global.scaleX;\r\n                    this.global.scaleY *= this.parent.global.scaleY;\r\n                }\r\n            } else {\r\n                this._globalTransformMatrix.tx = this.global.x = this.origin.x + this.offset.x + this.tween.x;\r\n                this._globalTransformMatrix.ty = this.global.y = this.origin.y + this.offset.y + this.tween.y;\r\n\r\n                this.global.skewX = this.origin.skewX + this.offset.skewX + this.tween.skewX;\r\n                this.global.skewY = this.origin.skewY + this.offset.skewY + this.tween.skewY;\r\n            }\r\n            this._globalTransformMatrix.a = this.global.scaleX * Math.cos(this.global.skewY);\r\n            this._globalTransformMatrix.b = this.global.scaleX * Math.sin(this.global.skewY);\r\n            this._globalTransformMatrix.c = -this.global.scaleY * Math.sin(this.global.skewX);\r\n            this._globalTransformMatrix.d = this.global.scaleY * Math.cos(this.global.skewX);\r\n        };\r\n        return DBObject;\r\n    })();\r\n    dragonBones.DBObject = DBObject;\r\n\r\n    var Slot = (function (_super) {\r\n        __extends(Slot, _super);\r\n        function Slot(displayBrideg) {\r\n            _super.call(this);\r\n            this._displayBridge = displayBrideg;\r\n            this._displayList = [];\r\n            this._displayIndex = -1;\r\n            this._scaleType = 1;\r\n\r\n            this._originZOrder = 0;\r\n            this._tweenZorder = 0;\r\n            this._offsetZOrder = 0;\r\n\r\n            this._isDisplayOnStage = false;\r\n            this._isHideDisplay = false;\r\n        }\r\n        Slot.prototype.getZOrder = function () {\r\n            return this._originZOrder + this._tweenZorder + this._offsetZOrder;\r\n        };\r\n\r\n        Slot.prototype.setZOrder = function (value) {\r\n            if (this.getZOrder() != value) {\r\n                this._offsetZOrder = value - this._originZOrder - this._tweenZorder;\r\n                if (this.armature) {\r\n                    this.armature._slotsZOrderChanged = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        Slot.prototype.getDisplay = function () {\r\n            var display = this._displayList[this._displayIndex];\r\n            if (display instanceof Armature) {\r\n                return (display).getDisplay();\r\n            }\r\n            return display;\r\n        };\r\n        Slot.prototype.setDisplay = function (value) {\r\n            this._displayList[this._displayIndex] = value;\r\n            this._setDisplay(value);\r\n        };\r\n\r\n        Slot.prototype.getChildArmature = function () {\r\n            var display = this._displayList[this._displayIndex];\r\n            if (display instanceof Armature) {\r\n                return display;\r\n            }\r\n            return null;\r\n        };\r\n        Slot.prototype.setChildArmature = function (value) {\r\n            this._displayList[this._displayIndex] = value;\r\n            if (value) {\r\n                this._setDisplay(value.getDisplay());\r\n            }\r\n        };\r\n\r\n        Slot.prototype.getDisplayList = function () {\r\n            return this._displayList;\r\n        };\r\n        Slot.prototype.setDisplayList = function (value) {\r\n            if (!value) {\r\n                throw new Error();\r\n            }\r\n            var i = this._displayList.length = value.length;\r\n            while (i--) {\r\n                this._displayList[i] = value[i];\r\n            }\r\n            if (this._displayIndex >= 0) {\r\n                var displayIndexBackup = this._displayIndex;\r\n                this._displayIndex = -1;\r\n                this._changeDisplay(displayIndexBackup);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._setDisplay = function (display) {\r\n            if (this._displayBridge.getDisplay()) {\r\n                this._displayBridge.setDisplay(display);\r\n            } else {\r\n                this._displayBridge.setDisplay(display);\r\n                if (this.armature) {\r\n                    this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n                    this.armature._slotsZOrderChanged = true;\r\n                }\r\n            }\r\n\r\n            this.updateChildArmatureAnimation();\r\n\r\n            if (!this._isHideDisplay && this._displayBridge.getDisplay()) {\r\n                this._isDisplayOnStage = true;\r\n            } else {\r\n                this._isDisplayOnStage = false;\r\n            }\r\n        };\r\n\r\n        Slot.prototype._changeDisplay = function (displayIndex) {\r\n            if (displayIndex < 0) {\r\n                if (!this._isHideDisplay) {\r\n                    this._isHideDisplay = true;\r\n                    this._displayBridge.removeDisplay();\r\n                    this.updateChildArmatureAnimation();\r\n                }\r\n            } else {\r\n                if (this._isHideDisplay) {\r\n                    this._isHideDisplay = false;\r\n                    var changeShowState = true;\r\n                    if (this.armature) {\r\n                        this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n                        this.armature._slotsZOrderChanged = true;\r\n                    }\r\n                }\r\n\r\n                var length = this._displayList.length;\r\n                if (displayIndex >= length && length > 0) {\r\n                    displayIndex = length - 1;\r\n                }\r\n                if (this._displayIndex != displayIndex) {\r\n                    this._displayIndex = displayIndex;\r\n\r\n                    var display = this._displayList[this._displayIndex];\r\n                    if (display instanceof Armature) {\r\n                        this._setDisplay((display).getDisplay());\r\n                    } else {\r\n                        this._setDisplay(display);\r\n                    }\r\n\r\n                    if (this._dislayDataList && this._displayIndex <= this._dislayDataList.length) {\r\n                        this.origin.copy(this._dislayDataList[this._displayIndex].transform);\r\n                    }\r\n                } else if (changeShowState) {\r\n                    this.updateChildArmatureAnimation();\r\n                }\r\n            }\r\n\r\n            if (!this._isHideDisplay && this._displayBridge.getDisplay()) {\r\n                this._isDisplayOnStage = true;\r\n            } else {\r\n                this._isDisplayOnStage = false;\r\n            }\r\n        };\r\n\r\n        Slot.prototype.setVisible = function (value) {\r\n            if (value != this._visible) {\r\n                this._visible = value;\r\n                this._updateVisible(this._visible);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._setArmature = function (value) {\r\n            _super.prototype._setArmature.call(this, value);\r\n            if (this.armature) {\r\n                this.armature._slotsZOrderChanged = true;\r\n                this._displayBridge.addDisplay(this.armature.getDisplay(), -1);\r\n            } else {\r\n                this._displayBridge.removeDisplay();\r\n            }\r\n        };\r\n\r\n        Slot.prototype.dispose = function () {\r\n            if (!this._displayBridge) {\r\n                return;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n\r\n            this._displayBridge.dispose();\r\n            this._displayList.length = 0;\r\n\r\n            this._displayBridge = null;\r\n            this._displayList = null;\r\n            this._dislayDataList = null;\r\n        };\r\n\r\n        Slot.prototype._update = function () {\r\n            _super.prototype._update.call(this);\r\n            if (this._isDisplayOnStage) {\r\n                var pivotX = this.parent._tweenPivot.x;\r\n                var pivotY = this.parent._tweenPivot.y;\r\n                if (pivotX || pivotY) {\r\n                    var parentMatrix = this.parent._globalTransformMatrix;\r\n                    this._globalTransformMatrix.tx += parentMatrix.a * pivotX + parentMatrix.c * pivotY;\r\n                    this._globalTransformMatrix.ty += parentMatrix.b * pivotX + parentMatrix.d * pivotY;\r\n                }\r\n\r\n                this._displayBridge.updateTransform(this._globalTransformMatrix, this.global);\r\n            }\r\n        };\r\n\r\n        Slot.prototype._updateVisible = function (value) {\r\n            this._displayBridge.setVisible(this.parent.getVisible() && this._visible && value);\r\n        };\r\n\r\n        Slot.prototype.updateChildArmatureAnimation = function () {\r\n            var childArmature = this.getChildArmature();\r\n\r\n            if (childArmature) {\r\n                if (this._isHideDisplay) {\r\n                    childArmature.animation.stop();\r\n                    childArmature.animation._lastAnimationState = null;\r\n                } else {\r\n                    var lastAnimationName = this.armature ? this.armature.animation.getLastAnimationName() : null;\r\n                    if (lastAnimationName && childArmature.animation.hasAnimation(lastAnimationName)) {\r\n                        childArmature.animation.gotoAndPlay(lastAnimationName);\r\n                    } else {\r\n                        childArmature.animation.play();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return Slot;\r\n    })(DBObject);\r\n    dragonBones.Slot = Slot;\r\n\r\n    var Bone = (function (_super) {\r\n        __extends(Bone, _super);\r\n        function Bone() {\r\n            _super.call(this);\r\n            this._children = [];\r\n            this._scaleType = 2;\r\n\r\n            this._tweenPivot = new geom.Point();\r\n\r\n            this.scaleMode = 1;\r\n        }\r\n        Bone.prototype.setVisible = function (value) {\r\n            if (this._visible != value) {\r\n                this._visible = value;\r\n                var i = this._children.length;\r\n                while (i--) {\r\n                    var child = this._children[i];\r\n                    if (child instanceof Slot) {\r\n                        (child)._updateVisible(this._visible);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        Bone.prototype._setArmature = function (value) {\r\n            _super.prototype._setArmature.call(this, value);\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                this._children[i]._setArmature(this.armature);\r\n            }\r\n        };\r\n\r\n        Bone.prototype.dispose = function () {\r\n            if (!this._children) {\r\n                return;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                this._children[i].dispose();\r\n            }\r\n            this._children.length = 0;\r\n\r\n            this._children = null;\r\n            this._tweenPivot = null;\r\n\r\n            this.slot = null;\r\n        };\r\n\r\n        Bone.prototype.contains = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n            if (child == this) {\r\n                return false;\r\n            }\r\n            var ancestor = child;\r\n            while (!(ancestor == this || ancestor == null)) {\r\n                ancestor = ancestor.parent;\r\n            }\r\n            return ancestor == this;\r\n        };\r\n\r\n        Bone.prototype.addChild = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (child == this || (child instanceof Bone && (child).contains(this))) {\r\n                throw new Error(\"An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)\");\r\n            }\r\n\r\n            if (child.parent) {\r\n                child.parent.removeChild(child);\r\n            }\r\n            this._children[this._children.length] = child;\r\n            child._setParent(this);\r\n            child._setArmature(this.armature);\r\n\r\n            if (!this.slot && child instanceof Slot) {\r\n                this.slot = child;\r\n            }\r\n        };\r\n\r\n        Bone.prototype.removeChild = function (child) {\r\n            if (!child) {\r\n                throw new Error();\r\n            }\r\n\r\n            var index = this._children.indexOf(child);\r\n            if (index >= 0) {\r\n                this._children.splice(index, 1);\r\n                child._setParent(null);\r\n                child._setArmature(null);\r\n\r\n                if (child == this.slot) {\r\n                    this.slot = null;\r\n                }\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Bone.prototype.getSlots = function () {\r\n            var slotList = [];\r\n            var i = this._children.length;\r\n            while (i--) {\r\n                if (this._children[i] instanceof Slot) {\r\n                    slotList.unshift(this._children[i]);\r\n                }\r\n            }\r\n            return slotList;\r\n        };\r\n\r\n        Bone.prototype._arriveAtFrame = function (frame, timelineState, animationState, isCross) {\r\n            if (frame) {\r\n                var mixingType = animationState.getMixingTransform(name);\r\n                if (animationState.displayControl && (mixingType == 2 || mixingType == -1)) {\r\n                    if (!this.displayController || this.displayController == animationState.name) {\r\n                        var tansformFrame = frame;\r\n                        if (this.slot) {\r\n                            var displayIndex = tansformFrame.displayIndex;\r\n                            if (displayIndex >= 0) {\r\n                                if (!isNaN(tansformFrame.zOrder) && tansformFrame.zOrder != this.slot._tweenZorder) {\r\n                                    this.slot._tweenZorder = tansformFrame.zOrder;\r\n                                    this.armature._slotsZOrderChanged = true;\r\n                                }\r\n                            }\r\n                            this.slot._changeDisplay(displayIndex);\r\n                            this.slot._updateVisible(tansformFrame.visible);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (frame.event && this.armature.hasEventListener(events.FrameEvent.BONE_FRAME_EVENT)) {\r\n                    var frameEvent = new events.FrameEvent(events.FrameEvent.BONE_FRAME_EVENT);\r\n                    frameEvent.bone = this;\r\n                    frameEvent.animationState = animationState;\r\n                    frameEvent.frameLabel = frame.event;\r\n                    this.armature._eventList.push(frameEvent);\r\n                }\r\n\r\n                if (frame.sound && Bone._soundManager.hasEventListener(events.SoundEvent.SOUND)) {\r\n                    var soundEvent = new events.SoundEvent(events.SoundEvent.SOUND);\r\n                    soundEvent.armature = this.armature;\r\n                    soundEvent.animationState = animationState;\r\n                    soundEvent.sound = frame.sound;\r\n                    Bone._soundManager.dispatchEvent(soundEvent);\r\n                }\r\n\r\n                if (frame.action) {\r\n                    for (var index in this._children) {\r\n                        if (this._children[index] instanceof Slot) {\r\n                            var childArmature = (this._children[index]).getChildArmature();\r\n                            if (childArmature) {\r\n                                childArmature.animation.gotoAndPlay(frame.action);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.slot) {\r\n                    this.slot._changeDisplay(-1);\r\n                }\r\n            }\r\n        };\r\n\r\n        Bone.prototype._updateColor = function (aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier, isColorChanged) {\r\n            if (isColorChanged || this._isColorChanged) {\r\n                this.slot._displayBridge.updateColor(aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier);\r\n            }\r\n            this._isColorChanged = isColorChanged;\r\n        };\r\n        Bone._soundManager = events.SoundEventManager.getInstance();\r\n        return Bone;\r\n    })(DBObject);\r\n    dragonBones.Bone = Bone;\r\n\r\n    var Armature = (function (_super) {\r\n        __extends(Armature, _super);\r\n        function Armature(display) {\r\n            _super.call(this);\r\n\r\n            this.animation = new animation.Animation(this);\r\n\r\n            this._display = display;\r\n            this._slotsZOrderChanged = false;\r\n            this._slotList = [];\r\n            this._boneList = [];\r\n            this._eventList = [];\r\n        }\r\n        Armature.prototype.getDisplay = function () {\r\n            return this._display;\r\n        };\r\n\r\n        Armature.prototype.dispose = function () {\r\n            if (!this.animation) {\r\n                return;\r\n            }\r\n\r\n            this.animation.dispose();\r\n\r\n            var i = this._slotList.length;\r\n            while (i--) {\r\n                this._slotList[i].dispose();\r\n            }\r\n\r\n            i = this._boneList.length;\r\n            while (i--) {\r\n                this._boneList[i].dispose();\r\n            }\r\n\r\n            this._slotList.length = 0;\r\n            this._boneList.length = 0;\r\n            this._eventList.length = 0;\r\n\r\n            this._slotList = null;\r\n            this._boneList = null;\r\n            this._eventList = null;\r\n            this._display = null;\r\n\r\n            this.animation = null;\r\n        };\r\n\r\n        Armature.prototype.advanceTime = function (passedTime) {\r\n            this.animation.advanceTime(passedTime);\r\n            passedTime *= this.animation.timeScale;\r\n\r\n            var i = this._boneList.length;\r\n            while (i--) {\r\n                this._boneList[i]._update();\r\n            }\r\n            i = this._slotList.length;\r\n            var slot;\r\n            while (i--) {\r\n                slot = this._slotList[i];\r\n                slot._update();\r\n                if (slot._isDisplayOnStage) {\r\n                    var childArmature = slot.getChildArmature();\r\n                    if (childArmature) {\r\n                        childArmature.advanceTime(passedTime);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._slotsZOrderChanged) {\r\n                this.updateSlotsZOrder();\r\n                if (this.hasEventListener(events.ArmatureEvent.Z_ORDER_UPDATED)) {\r\n                    this.dispatchEvent(new events.ArmatureEvent(events.ArmatureEvent.Z_ORDER_UPDATED));\r\n                }\r\n            }\r\n\r\n            if (this._eventList.length) {\r\n                var length = this._eventList.length;\r\n                for (i = 0; i < length; i++) {\r\n                    this.dispatchEvent(this._eventList[i]);\r\n                }\r\n                this._eventList.length = 0;\r\n            }\r\n        };\r\n\r\n        Armature.prototype.getSlots = function (returnCopy) {\r\n            if (typeof returnCopy === \"undefined\") { returnCopy = true; }\r\n            return returnCopy ? this._slotList.concat() : this._slotList;\r\n        };\r\n\r\n        Armature.prototype.getBones = function (returnCopy) {\r\n            if (typeof returnCopy === \"undefined\") { returnCopy = true; }\r\n            return returnCopy ? this._boneList.concat() : this._boneList;\r\n        };\r\n\r\n        Armature.prototype.getSlot = function (slotName) {\r\n            var i = this._slotList.length;\r\n            while (i--) {\r\n                if (this._slotList[i].name == slotName) {\r\n                    return this._slotList[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.getSlotByDisplay = function (display) {\r\n            if (display) {\r\n                var i = this._slotList.length;\r\n                while (i--) {\r\n                    if (this._slotList[i].getDisplay() == display) {\r\n                        return this._slotList[i];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.removeSlot = function (slot) {\r\n            if (!slot) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (this._slotList.indexOf(slot) >= 0) {\r\n                slot.parent.removeChild(slot);\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Armature.prototype.removeSlotByName = function (slotName) {\r\n            if (!slotName) {\r\n                return;\r\n            }\r\n\r\n            var slot = this.getSlot(slotName);\r\n            if (slot) {\r\n                this.removeSlot(slot);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.getBone = function (boneName) {\r\n            var i = this._boneList.length;\r\n            while (i--) {\r\n                if (this._boneList[i].name == boneName) {\r\n                    return this._boneList[i];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Armature.prototype.getBoneByDisplay = function (display) {\r\n            var slot = this.getSlotByDisplay(display);\r\n            return slot ? slot.parent : null;\r\n        };\r\n\r\n        Armature.prototype.removeBone = function (bone) {\r\n            if (!bone) {\r\n                throw new Error();\r\n            }\r\n\r\n            if (this._boneList.indexOf(bone) >= 0) {\r\n                if (bone.parent) {\r\n                    bone.parent.removeChild(bone);\r\n                } else {\r\n                    bone._setArmature(null);\r\n                }\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        };\r\n\r\n        Armature.prototype.removeBoneByName = function (boneName) {\r\n            if (!boneName) {\r\n                return;\r\n            }\r\n\r\n            var bone = this.getBone(boneName);\r\n            if (bone) {\r\n                this.removeBone(bone);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.addChild = function (object, parentName) {\r\n            if (!object) {\r\n                throw new Error();\r\n            }\r\n            if (parentName) {\r\n                var boneParent = this.getBone(parentName);\r\n                if (boneParent) {\r\n                    boneParent.addChild(object);\r\n                } else {\r\n                    throw new Error();\r\n                }\r\n            } else {\r\n                if (object.parent) {\r\n                    object.parent.removeChild(object);\r\n                }\r\n                object._setArmature(this);\r\n            }\r\n        };\r\n\r\n        Armature.prototype.updateSlotsZOrder = function () {\r\n            this._slotList.sort(this.sortSlot);\r\n            var i = this._slotList.length;\r\n            var slot;\r\n            while (i--) {\r\n                slot = this._slotList[i];\r\n                if (slot._isDisplayOnStage) {\r\n                    slot._displayBridge.addDisplay(this._display, -1);\r\n                }\r\n            }\r\n\r\n            this._slotsZOrderChanged = false;\r\n        };\r\n\r\n        Armature.prototype._addDBObject = function (object) {\r\n            if (object instanceof Slot) {\r\n                var slot = object;\r\n                if (this._slotList.indexOf(slot) < 0) {\r\n                    this._slotList[this._slotList.length] = slot;\r\n                }\r\n            } else if (object instanceof Bone) {\r\n                var bone = object;\r\n                if (this._boneList.indexOf(bone) < 0) {\r\n                    this._boneList[this._boneList.length] = bone;\r\n                    this._sortBoneList();\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype._removeDBObject = function (object) {\r\n            if (object instanceof Slot) {\r\n                var slot = object;\r\n                var index = this._slotList.indexOf(slot);\r\n                if (index >= 0) {\r\n                    this._slotList.splice(index, 1);\r\n                }\r\n            } else if (object instanceof Bone) {\r\n                var bone = object;\r\n                index = this._boneList.indexOf(bone);\r\n                if (index >= 0) {\r\n                    this._boneList.splice(index, 1);\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype._sortBoneList = function () {\r\n            var i = this._boneList.length;\r\n            if (i == 0) {\r\n                return;\r\n            }\r\n            var helpArray = [];\r\n            var level;\r\n            var bone;\r\n            var boneParent;\r\n            while (i--) {\r\n                level = 0;\r\n                bone = this._boneList[i];\r\n                boneParent = bone;\r\n                while (boneParent) {\r\n                    level++;\r\n                    boneParent = boneParent.parent;\r\n                }\r\n                helpArray[i] = { level: level, bone: bone };\r\n            }\r\n\r\n            helpArray.sort(this.sortBone);\r\n\r\n            i = helpArray.length;\r\n            while (i--) {\r\n                this._boneList[i] = helpArray[i].bone;\r\n            }\r\n        };\r\n\r\n        Armature.prototype._arriveAtFrame = function (frame, timelineState, animationState, isCross) {\r\n            if (frame.event && this.hasEventListener(events.FrameEvent.ANIMATION_FRAME_EVENT)) {\r\n                var frameEvent = new events.FrameEvent(events.FrameEvent.ANIMATION_FRAME_EVENT);\r\n                frameEvent.animationState = animationState;\r\n                frameEvent.frameLabel = frame.event;\r\n                this._eventList.push(frameEvent);\r\n            }\r\n\r\n            if (frame.sound && Armature._soundManager.hasEventListener(events.SoundEvent.SOUND)) {\r\n                var soundEvent = new events.SoundEvent(events.SoundEvent.SOUND);\r\n                soundEvent.armature = this;\r\n                soundEvent.animationState = animationState;\r\n                soundEvent.sound = frame.sound;\r\n                Armature._soundManager.dispatchEvent(soundEvent);\r\n            }\r\n\r\n            if (frame.action) {\r\n                if (animationState.isPlaying) {\r\n                    this.animation.gotoAndPlay(frame.action);\r\n                }\r\n            }\r\n        };\r\n\r\n        Armature.prototype.sortSlot = function (slot1, slot2) {\r\n            return slot1.getZOrder() < slot2.getZOrder() ? 1 : -1;\r\n        };\r\n\r\n        Armature.prototype.sortBone = function (object1, object2) {\r\n            return object1.level < object2.level ? 1 : -1;\r\n        };\r\n        Armature._soundManager = events.SoundEventManager.getInstance();\r\n        return Armature;\r\n    })(events.EventDispatcher);\r\n    dragonBones.Armature = Armature;\r\n})(dragonBones || (dragonBones = {}));\r\n\r\nmodule.exports = dragonBones;\r\n","var DisplayBridge = (function () {\r\n    function DisplayBridge() {\r\n    }\r\n\r\n    DisplayBridge.prototype.getVisible = function () {\r\n        return this._display ? this._display.visible : false;\r\n    };\r\n\r\n    DisplayBridge.prototype.setVisible = function (value) {\r\n        if (this._display) {\r\n            this._display.visible = value;\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.getDisplay = function () {\r\n        return this._display;\r\n    };\r\n\r\n    DisplayBridge.prototype.setDisplay = function (value) {\r\n        if (this._display == value) {\r\n            return;\r\n        }\r\n\r\n        var index = -1;\r\n        if (this._display) {\r\n            var parent = this._display.parent;\r\n            if (parent) {\r\n                index = this._display.parent.children.indexOf(this._display);\r\n            }\r\n            this.removeDisplay();\r\n        }\r\n        this._display = value;\r\n        this.addDisplay(parent, index);\r\n    };\r\n\r\n    DisplayBridge.prototype.dispose = function () {\r\n        this._display = null;\r\n    };\r\n\r\n    DisplayBridge.prototype.updateTransform = function (matrix, transform) {\r\n        this._display.x = transform.x;\r\n        this._display.y = transform.y;\r\n\r\n        this._display.rotation = transform.skewX;\r\n\r\n        this._display.scale.x = transform.scaleX;\r\n        this._display.scale.y = transform.scaleY;\r\n    };\r\n\r\n    DisplayBridge.prototype.updateColor = function (aOffset, rOffset, gOffset, bOffset, aMultiplier, rMultiplier, gMultiplier, bMultiplier) {\r\n        if (this._display) {\r\n            this._display.alpha = aMultiplier;\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.addDisplay = function (container, index) {\r\n        var parent = container;\r\n        if (parent && this._display) {\r\n            if (index < 0) {\r\n                parent.addChild(this._display);\r\n            } else {\r\n                parent.addChildAt(this._display, Math.min(index, parent.children.length));\r\n            }\r\n        }\r\n    };\r\n\r\n    DisplayBridge.prototype.removeDisplay = function () {\r\n        if (this._display && this._display.parent) {\r\n            this._display.parent.removeChild(this._display);\r\n        }\r\n    };\r\n\r\n    DisplayBridge.RADIAN_TO_ANGLE = 180 / Math.PI;\r\n    return DisplayBridge;\r\n})();\r\n\r\nmodule.exports = DisplayBridge;\r\n","var DisplayObjectContainer = (function (parent) {\r\n    var DisplayObjectContainer = function () {\r\n        parent.call(this);\r\n    };\r\n\r\n    DisplayObjectContainer.prototype = Object.create(parent.prototype);\r\n    DisplayObjectContainer.prototype.constructor = DisplayObjectContainer;\r\n\r\n    DisplayObjectContainer.prototype.updateTransform = function()\r\n    {\r\n        parent.prototype.updateTransform.call(this);\r\n    };\r\n\r\n    return DisplayObjectContainer;\r\n})(PIXI.Container);\r\n\r\nmodule.exports = DisplayObjectContainer;","var Sprite = (function (parent) {\r\n    var Sprite = function (texture) {\r\n        parent.call(this, texture);\r\n    };\r\n\r\n    Sprite.prototype = Object.create(parent.prototype);\r\n    Sprite.prototype.constructor = Sprite;\r\n\r\n    Sprite.prototype.updateTransform = function ()\r\n    {\r\n        parent.prototype.updateTransform.call(this);\r\n    };\r\n\r\n    return Sprite;\r\n})(PIXI.Sprite);\r\n\r\nmodule.exports = Sprite;","var DragonbonesRuntime      = require('../../DragonbonesRuntime/dragonBones'),\r\n    DisplayBridge           = require('../display/DisplayBridge'),\r\n    Sprite                  = require('../display/Sprite');\r\n    DisplayObjectContainer  = require('../display/DisplayObjectContainer');\r\n\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar Factory = (function (_super) {\r\n    __extends(Factory, _super);\r\n\r\n    function Factory() {\r\n        _super.call(this);\r\n    };\r\n\r\n    Factory.prototype._generateArmature = function() {\r\n        var armature = new DragonbonesRuntime.Armature(new DisplayObjectContainer());\r\n        return armature;\r\n    };\r\n\r\n    Factory.prototype._generateSlot = function() {\r\n        var slot = new DragonbonesRuntime.Slot(new DisplayBridge());\r\n        return slot;\r\n    };\r\n\r\n    Factory.prototype.getTextureDisplay = function (fullName, pivotX, pivotY) {\r\n        if (isNaN(pivotX) || isNaN(pivotY)) {\r\n            var data = this._dataDic[this._currentDataName];\r\n            if (data) {\r\n                var pivot = data.getSubTexturePivot(fullName);\r\n                if (pivot) {\r\n                    pivotX = pivot.x;\r\n                    pivotY = pivot.y;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._generateDisplay(fullName, pivotX, pivotY);\r\n    };\r\n\r\n    Factory.prototype._generateDisplay = function(fullName, pivotX, pivotY) {\r\n        var image = new Sprite(PIXI.utils.TextureCache.dragonbones[this._currentDataName][fullName]);\r\n        image.pivot.x = pivotX;\r\n        image.pivot.y = pivotY;\r\n\r\n        return image;\r\n    };\r\n\r\n    return Factory;\r\n})(DragonbonesRuntime.factorys.BaseFactory);\r\n\r\nmodule.exports = Factory;","var DragonbonesRuntime = require('../DragonbonesRuntime/dragonBones');\r\n\r\n\r\nmodule.exports = {\r\n    display: {\r\n        DisplayBridge: require('./display/DisplayBridge')\r\n    },\r\n    factory: {\r\n        Factory: require('./factories/Factory')\r\n    },\r\n    textures: {\r\n        TextureAtlas: require('./texture/TextureAtlas')\r\n    }\r\n};","var DragonbonesRuntime = require('../../DragonbonesRuntime/dragonBones');\r\n\r\nvar TextureAtlas = (function () {\r\n    function TextureAtlas(image, textureAtlasRawData, scale) {\r\n        if(typeof scale === \"undefined\") {\r\n            scale = 1;\r\n        }\r\n        this._regions = {};\r\n\r\n        this.image = image;\r\n        this.scale = scale;\r\n\r\n        this.parseData(textureAtlasRawData);\r\n    };\r\n\r\n    TextureAtlas.prototype.dispose = function() {\r\n        this.image = null;\r\n        this._regions = null;\r\n    };\r\n\r\n    TextureAtlas.prototype.getRegion = function(subTextureName) {\r\n        return this._regions[subTextureName];\r\n    };\r\n\r\n    TextureAtlas.prototype.parseData = function(textureAtlasRawData) {\r\n        var textureAtlasData = DragonbonesRuntime.objects.DataParser.parseTextureAtlasData(textureAtlasRawData, this.scale);\r\n        this.name = textureAtlasData.__name;\r\n        delete textureAtlasData.__name;\r\n\r\n        for(var subTextureName in textureAtlasData) {\r\n            this._regions[subTextureName] = textureAtlasData[subTextureName];\r\n        }\r\n    };\r\n\r\n    return TextureAtlas;\r\n})();\r\n\r\nmodule.exports = TextureAtlas;\r\n","var Dragonbones = require('../../Dragonbones'),\r\n    DragonbonesRuntime = require('../../DragonbonesRuntime/dragonBones'),\r\n    skeletonParser = require('../loaders/skeletonParser');\r\n\r\nvar Skeleton = (function () {\r\n    var Skeleton = function () {\r\n        this._factory = undefined;\r\n        this._armature = undefined;\r\n        //this._display = undefined;\r\n    };\r\n\r\n    Skeleton.makeArmature = function (armatureName, dataName) {\r\n        var skeleton = new Skeleton();\r\n\r\n        skeleton._factory = new Dragonbones.factory.Factory();\r\n        skeleton._factory.addSkeletonData(\r\n            DragonbonesRuntime.objects.DataParser.parseSkeletonData(skeletonParser.skeletons[dataName])\r\n        );\r\n\r\n        skeleton._armature = skeleton._factory.buildArmature(armatureName);\r\n\r\n        DragonbonesRuntime.animation.WorldClock.clock.add(skeleton._armature);\r\n\r\n        return skeleton;\r\n    };\r\n\r\n    Skeleton.prototype.dispose = function () {};\r\n\r\n    Object.defineProperties(Skeleton.prototype, {\r\n        armature: {\r\n            get: function () {\r\n                return this._armature;\r\n            }\r\n        },\r\n        display: {\r\n            get: function () {\r\n                return this._armature.getDisplay();\r\n            }\r\n        },\r\n        factory: {\r\n            get: function () {\r\n                return this._factory;\r\n            }\r\n        }\r\n    });\r\n\r\n    return Skeleton;\r\n})();\r\n\r\nmodule.exports = Skeleton;\r\n","var DragonbonesRuntime = require('../DragonbonesRuntime/dragonBones');\r\n\r\nmodule.exports = {\r\n    display: {\r\n        Skeleton: require('./display/Skeleton')\r\n    },\r\n    loaders: {\r\n        skeletonParser: require('./loaders/skeletonParser')\r\n    },\r\n    runtime: DragonbonesRuntime\r\n};","var Resource    = PIXI.loaders.Resource,\r\n    async       = PIXI.utils.async,\r\n    AtlasParser = require('../../loaders/AtlasParser');\r\n\r\nfunction skeletonParser() {\r\n    return function (resource, next) {\r\n        if(resource.url.indexOf('_skeleton.json') < 0) {\r\n            return next();\r\n        }\r\n\r\n        var skeletonData = resource.data;\r\n        skeletonParser.skeletons[skeletonData.name] = skeletonData;\r\n\r\n        var atlasPath = resource.url.split('_skeleton.json')[0] + '_atlas.json';\r\n        var atlasKey = resource.name + '_atlas';\r\n\r\n        var atlasLoader = new PIXI.loaders.Loader();\r\n        atlasLoader.use(AtlasParser());\r\n        atlasLoader.add(skeletonData.name + '_atlas', atlasPath);\r\n        atlasLoader.load((function (loader, res) {\r\n            next();\r\n        }).bind(this));\r\n    }\r\n};\r\n\r\nskeletonParser.skeletons = {};\r\n\r\nmodule.exports = skeletonParser;","var Resource    = PIXI.loaders.Resource,\r\n    async       = PIXI.utils.async;\r\n\r\nvar AtlasParser = function () {\r\n    return function (resource, next) {\r\n        if (!resource.data || !resource.isJson) {\r\n            return next();\r\n        }\r\n\r\n        var atlasData = resource.data;\r\n\r\n        var imagePath = resource.url.substr(0, resource.url.lastIndexOf('/') + 1) + atlasData.imagePath;\r\n\r\n        var loadOptions = {\r\n            crossOrigin: resource.crossOrigin,\r\n            loadType: Resource.LOAD_TYPE.IMAGE\r\n        };\r\n\r\n        PIXI.utils.TextureCache.dragonbones = PIXI.TextureCache.dragonbones || {};\r\n        PIXI.utils.TextureCache.dragonbones[atlasData.name] = {};\r\n\r\n        this.add(resource.name + '_image', imagePath, loadOptions, function (res) {\r\n            var frames = atlasData.SubTexture;\r\n\r\n            var currentFrame;\r\n            for( var i = 0 ; i < frames.length ; i++ ) {\r\n                var currentFrame = frames[i];\r\n\r\n                var size = new PIXI.math.Rectangle(currentFrame.x, currentFrame.y, currentFrame.width, currentFrame.height);\r\n\r\n                PIXI.utils.TextureCache.dragonbones[atlasData.name][currentFrame.name] = new PIXI.Texture(res.texture.baseTexture, size, size.clone(), null, false);\r\n            };\r\n\r\n            next();\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports = AtlasParser;"]}